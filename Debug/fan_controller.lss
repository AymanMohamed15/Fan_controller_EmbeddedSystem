
fan_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00007500  00007594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00800194  00800194  000076c8  2**0
                  ALLOC
  3 .stab         00003a38  00000000  00000000  000076c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001748  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000c848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000291  00000000  00000000  0000ca88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003784  00000000  00000000  0000cd19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001963  00000000  00000000  0001049d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000183b  00000000  00000000  00011e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  0001363c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003ac  00000000  00000000  0001389c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002550  00000000  00000000  00013c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00016198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <__vector_5>
      18:	0c 94 ea 37 	jmp	0x6fd4	; 0x6fd4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 da 37 	jmp	0x6fb4	; 0x6fb4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 20 37 	jmp	0x6e40	; 0x6e40 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 39 	call	0x7286	; 0x7286 <main>
      8a:	0c 94 7e 3a 	jmp	0x74fc	; 0x74fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 47 3a 	jmp	0x748e	; 0x748e <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 63 3a 	jmp	0x74c6	; 0x74c6 <__epilogue_restores__>

00000288 <__lshrdi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__lshrdi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__lshrdi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__lshrdi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	4d 81       	ldd	r20, Y+5	; 0x05
     2da:	5e 81       	ldd	r21, Y+6	; 0x06
     2dc:	6f 81       	ldd	r22, Y+7	; 0x07
     2de:	78 85       	ldd	r23, Y+8	; 0x08
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__lshrdi3+0x7c>
     2e4:	1d 86       	std	Y+13, r1	; 0x0d
     2e6:	1e 86       	std	Y+14, r1	; 0x0e
     2e8:	1f 86       	std	Y+15, r1	; 0x0f
     2ea:	18 8a       	std	Y+16, r1	; 0x10
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__lshrdi3+0x76>
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__lshrdi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__lshrdi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__lshrdi3+0x94>
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__lshrdi3+0x8c>
     320:	8d 87       	std	Y+13, r24	; 0x0d
     322:	9e 87       	std	Y+14, r25	; 0x0e
     324:	af 87       	std	Y+15, r26	; 0x0f
     326:	b8 8b       	std	Y+16, r27	; 0x10
     328:	04 c0       	rjmp	.+8      	; 0x332 <__lshrdi3+0xaa>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	66 1f       	adc	r22, r22
     330:	77 1f       	adc	r23, r23
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__lshrdi3+0xa2>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__lshrdi3+0xc0>
     340:	b6 95       	lsr	r27
     342:	a7 95       	ror	r26
     344:	97 95       	ror	r25
     346:	87 95       	ror	r24
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__lshrdi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	49 87       	std	Y+9, r20	; 0x09
     356:	5a 87       	std	Y+10, r21	; 0x0a
     358:	6b 87       	std	Y+11, r22	; 0x0b
     35a:	7c 87       	std	Y+12, r23	; 0x0c
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__ashldi3>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	60 97       	sbiw	r28, 0x10	; 16
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	a8 2f       	mov	r26, r24
     3a2:	00 23       	and	r16, r16
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <__ashldi3+0x22>
     3a6:	61 c0       	rjmp	.+194    	; 0x46a <__ashldi3+0xe4>
     3a8:	7e 01       	movw	r14, r28
     3aa:	08 94       	sec
     3ac:	e1 1c       	adc	r14, r1
     3ae:	f1 1c       	adc	r15, r1
     3b0:	88 e0       	ldi	r24, 0x08	; 8
     3b2:	f7 01       	movw	r30, r14
     3b4:	11 92       	st	Z+, r1
     3b6:	8a 95       	dec	r24
     3b8:	e9 f7       	brne	.-6      	; 0x3b4 <__ashldi3+0x2e>
     3ba:	29 83       	std	Y+1, r18	; 0x01
     3bc:	3a 83       	std	Y+2, r19	; 0x02
     3be:	4b 83       	std	Y+3, r20	; 0x03
     3c0:	5c 83       	std	Y+4, r21	; 0x04
     3c2:	6d 83       	std	Y+5, r22	; 0x05
     3c4:	7e 83       	std	Y+6, r23	; 0x06
     3c6:	af 83       	std	Y+7, r26	; 0x07
     3c8:	98 87       	std	Y+8, r25	; 0x08
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	80 1b       	sub	r24, r16
     3ce:	e8 2f       	mov	r30, r24
     3d0:	ff 27       	eor	r31, r31
     3d2:	e7 fd       	sbrc	r30, 7
     3d4:	f0 95       	com	r31
     3d6:	49 81       	ldd	r20, Y+1	; 0x01
     3d8:	5a 81       	ldd	r21, Y+2	; 0x02
     3da:	6b 81       	ldd	r22, Y+3	; 0x03
     3dc:	7c 81       	ldd	r23, Y+4	; 0x04
     3de:	18 16       	cp	r1, r24
     3e0:	84 f0       	brlt	.+32     	; 0x402 <__ashldi3+0x7c>
     3e2:	19 86       	std	Y+9, r1	; 0x09
     3e4:	1a 86       	std	Y+10, r1	; 0x0a
     3e6:	1b 86       	std	Y+11, r1	; 0x0b
     3e8:	1c 86       	std	Y+12, r1	; 0x0c
     3ea:	88 27       	eor	r24, r24
     3ec:	99 27       	eor	r25, r25
     3ee:	8e 1b       	sub	r24, r30
     3f0:	9f 0b       	sbc	r25, r31
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <__ashldi3+0x76>
     3f4:	44 0f       	add	r20, r20
     3f6:	55 1f       	adc	r21, r21
     3f8:	66 1f       	adc	r22, r22
     3fa:	77 1f       	adc	r23, r23
     3fc:	8a 95       	dec	r24
     3fe:	d2 f7       	brpl	.-12     	; 0x3f4 <__ashldi3+0x6e>
     400:	28 c0       	rjmp	.+80     	; 0x452 <__ashldi3+0xcc>
     402:	20 2f       	mov	r18, r16
     404:	33 27       	eor	r19, r19
     406:	27 fd       	sbrc	r18, 7
     408:	30 95       	com	r19
     40a:	db 01       	movw	r26, r22
     40c:	ca 01       	movw	r24, r20
     40e:	02 2e       	mov	r0, r18
     410:	04 c0       	rjmp	.+8      	; 0x41a <__ashldi3+0x94>
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	aa 1f       	adc	r26, r26
     418:	bb 1f       	adc	r27, r27
     41a:	0a 94       	dec	r0
     41c:	d2 f7       	brpl	.-12     	; 0x412 <__ashldi3+0x8c>
     41e:	89 87       	std	Y+9, r24	; 0x09
     420:	9a 87       	std	Y+10, r25	; 0x0a
     422:	ab 87       	std	Y+11, r26	; 0x0b
     424:	bc 87       	std	Y+12, r27	; 0x0c
     426:	04 c0       	rjmp	.+8      	; 0x430 <__ashldi3+0xaa>
     428:	76 95       	lsr	r23
     42a:	67 95       	ror	r22
     42c:	57 95       	ror	r21
     42e:	47 95       	ror	r20
     430:	ea 95       	dec	r30
     432:	d2 f7       	brpl	.-12     	; 0x428 <__ashldi3+0xa2>
     434:	8d 81       	ldd	r24, Y+5	; 0x05
     436:	9e 81       	ldd	r25, Y+6	; 0x06
     438:	af 81       	ldd	r26, Y+7	; 0x07
     43a:	b8 85       	ldd	r27, Y+8	; 0x08
     43c:	04 c0       	rjmp	.+8      	; 0x446 <__ashldi3+0xc0>
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	aa 1f       	adc	r26, r26
     444:	bb 1f       	adc	r27, r27
     446:	2a 95       	dec	r18
     448:	d2 f7       	brpl	.-12     	; 0x43e <__ashldi3+0xb8>
     44a:	48 2b       	or	r20, r24
     44c:	59 2b       	or	r21, r25
     44e:	6a 2b       	or	r22, r26
     450:	7b 2b       	or	r23, r27
     452:	4d 87       	std	Y+13, r20	; 0x0d
     454:	5e 87       	std	Y+14, r21	; 0x0e
     456:	6f 87       	std	Y+15, r22	; 0x0f
     458:	78 8b       	std	Y+16, r23	; 0x10
     45a:	29 85       	ldd	r18, Y+9	; 0x09
     45c:	3a 85       	ldd	r19, Y+10	; 0x0a
     45e:	4b 85       	ldd	r20, Y+11	; 0x0b
     460:	5c 85       	ldd	r21, Y+12	; 0x0c
     462:	6d 85       	ldd	r22, Y+13	; 0x0d
     464:	7e 85       	ldd	r23, Y+14	; 0x0e
     466:	af 85       	ldd	r26, Y+15	; 0x0f
     468:	98 89       	ldd	r25, Y+16	; 0x10
     46a:	8a 2f       	mov	r24, r26
     46c:	60 96       	adiw	r28, 0x10	; 16
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	08 95       	ret

00000484 <__fixunssfsi>:
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	7b 01       	movw	r14, r22
     48e:	8c 01       	movw	r16, r24
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	5f e4       	ldi	r21, 0x4F	; 79
     498:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gesf2>
     49c:	88 23       	and	r24, r24
     49e:	8c f0       	brlt	.+34     	; 0x4c2 <__fixunssfsi+0x3e>
     4a0:	c8 01       	movw	r24, r16
     4a2:	b7 01       	movw	r22, r14
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	5f e4       	ldi	r21, 0x4F	; 79
     4ac:	0e 94 9f 10 	call	0x213e	; 0x213e <__subsf3>
     4b0:	0e 94 33 13 	call	0x2666	; 0x2666 <__fixsfsi>
     4b4:	9b 01       	movw	r18, r22
     4b6:	ac 01       	movw	r20, r24
     4b8:	20 50       	subi	r18, 0x00	; 0
     4ba:	30 40       	sbci	r19, 0x00	; 0
     4bc:	40 40       	sbci	r20, 0x00	; 0
     4be:	50 48       	sbci	r21, 0x80	; 128
     4c0:	06 c0       	rjmp	.+12     	; 0x4ce <__fixunssfsi+0x4a>
     4c2:	c8 01       	movw	r24, r16
     4c4:	b7 01       	movw	r22, r14
     4c6:	0e 94 33 13 	call	0x2666	; 0x2666 <__fixsfsi>
     4ca:	9b 01       	movw	r18, r22
     4cc:	ac 01       	movw	r20, r24
     4ce:	b9 01       	movw	r22, r18
     4d0:	ca 01       	movw	r24, r20
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	08 95       	ret

000004dc <__udivdi3>:
     4dc:	ae e5       	ldi	r26, 0x5E	; 94
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	e4 e7       	ldi	r30, 0x74	; 116
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	0c 94 47 3a 	jmp	0x748e	; 0x748e <__prologue_saves__>
     4e8:	a8 e0       	ldi	r26, 0x08	; 8
     4ea:	4e 01       	movw	r8, r28
     4ec:	08 94       	sec
     4ee:	81 1c       	adc	r8, r1
     4f0:	91 1c       	adc	r9, r1
     4f2:	f4 01       	movw	r30, r8
     4f4:	6a 2e       	mov	r6, r26
     4f6:	11 92       	st	Z+, r1
     4f8:	6a 94       	dec	r6
     4fa:	e9 f7       	brne	.-6      	; 0x4f6 <__udivdi3+0x1a>
     4fc:	29 83       	std	Y+1, r18	; 0x01
     4fe:	3a 83       	std	Y+2, r19	; 0x02
     500:	4b 83       	std	Y+3, r20	; 0x03
     502:	5c 83       	std	Y+4, r21	; 0x04
     504:	6d 83       	std	Y+5, r22	; 0x05
     506:	7e 83       	std	Y+6, r23	; 0x06
     508:	8f 83       	std	Y+7, r24	; 0x07
     50a:	98 87       	std	Y+8, r25	; 0x08
     50c:	ce 01       	movw	r24, r28
     50e:	09 96       	adiw	r24, 0x09	; 9
     510:	fc 01       	movw	r30, r24
     512:	11 92       	st	Z+, r1
     514:	aa 95       	dec	r26
     516:	e9 f7       	brne	.-6      	; 0x512 <__udivdi3+0x36>
     518:	a9 86       	std	Y+9, r10	; 0x09
     51a:	ba 86       	std	Y+10, r11	; 0x0a
     51c:	cb 86       	std	Y+11, r12	; 0x0b
     51e:	dc 86       	std	Y+12, r13	; 0x0c
     520:	ed 86       	std	Y+13, r14	; 0x0d
     522:	fe 86       	std	Y+14, r15	; 0x0e
     524:	0f 87       	std	Y+15, r16	; 0x0f
     526:	18 8b       	std	Y+16, r17	; 0x10
     528:	29 84       	ldd	r2, Y+9	; 0x09
     52a:	3a 84       	ldd	r3, Y+10	; 0x0a
     52c:	4b 84       	ldd	r4, Y+11	; 0x0b
     52e:	5c 84       	ldd	r5, Y+12	; 0x0c
     530:	ed 84       	ldd	r14, Y+13	; 0x0d
     532:	fe 84       	ldd	r15, Y+14	; 0x0e
     534:	0f 85       	ldd	r16, Y+15	; 0x0f
     536:	18 89       	ldd	r17, Y+16	; 0x10
     538:	69 80       	ldd	r6, Y+1	; 0x01
     53a:	7a 80       	ldd	r7, Y+2	; 0x02
     53c:	8b 80       	ldd	r8, Y+3	; 0x03
     53e:	9c 80       	ldd	r9, Y+4	; 0x04
     540:	6d a6       	std	Y+45, r6	; 0x2d
     542:	7e a6       	std	Y+46, r7	; 0x2e
     544:	8f a6       	std	Y+47, r8	; 0x2f
     546:	98 aa       	std	Y+48, r9	; 0x30
     548:	6d 80       	ldd	r6, Y+5	; 0x05
     54a:	7e 80       	ldd	r7, Y+6	; 0x06
     54c:	8f 80       	ldd	r8, Y+7	; 0x07
     54e:	98 84       	ldd	r9, Y+8	; 0x08
     550:	e1 14       	cp	r14, r1
     552:	f1 04       	cpc	r15, r1
     554:	01 05       	cpc	r16, r1
     556:	11 05       	cpc	r17, r1
     558:	09 f0       	breq	.+2      	; 0x55c <__udivdi3+0x80>
     55a:	b3 c3       	rjmp	.+1894   	; 0xcc2 <__stack+0x463>
     55c:	62 14       	cp	r6, r2
     55e:	73 04       	cpc	r7, r3
     560:	84 04       	cpc	r8, r4
     562:	95 04       	cpc	r9, r5
     564:	08 f0       	brcs	.+2      	; 0x568 <__udivdi3+0x8c>
     566:	3d c1       	rjmp	.+634    	; 0x7e2 <__udivdi3+0x306>
     568:	00 e0       	ldi	r16, 0x00	; 0
     56a:	20 16       	cp	r2, r16
     56c:	00 e0       	ldi	r16, 0x00	; 0
     56e:	30 06       	cpc	r3, r16
     570:	01 e0       	ldi	r16, 0x01	; 1
     572:	40 06       	cpc	r4, r16
     574:	00 e0       	ldi	r16, 0x00	; 0
     576:	50 06       	cpc	r5, r16
     578:	88 f4       	brcc	.+34     	; 0x59c <__udivdi3+0xc0>
     57a:	1f ef       	ldi	r17, 0xFF	; 255
     57c:	21 16       	cp	r2, r17
     57e:	31 04       	cpc	r3, r1
     580:	41 04       	cpc	r4, r1
     582:	51 04       	cpc	r5, r1
     584:	39 f0       	breq	.+14     	; 0x594 <__udivdi3+0xb8>
     586:	30 f0       	brcs	.+12     	; 0x594 <__udivdi3+0xb8>
     588:	48 e0       	ldi	r20, 0x08	; 8
     58a:	e4 2e       	mov	r14, r20
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	18 c0       	rjmp	.+48     	; 0x5c4 <__udivdi3+0xe8>
     594:	ee 24       	eor	r14, r14
     596:	ff 24       	eor	r15, r15
     598:	87 01       	movw	r16, r14
     59a:	14 c0       	rjmp	.+40     	; 0x5c4 <__udivdi3+0xe8>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	22 16       	cp	r2, r18
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	32 06       	cpc	r3, r18
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	42 06       	cpc	r4, r18
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	52 06       	cpc	r5, r18
     5ac:	30 f0       	brcs	.+12     	; 0x5ba <__udivdi3+0xde>
     5ae:	38 e1       	ldi	r19, 0x18	; 24
     5b0:	e3 2e       	mov	r14, r19
     5b2:	f1 2c       	mov	r15, r1
     5b4:	01 2d       	mov	r16, r1
     5b6:	11 2d       	mov	r17, r1
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <__udivdi3+0xe8>
     5ba:	20 e1       	ldi	r18, 0x10	; 16
     5bc:	e2 2e       	mov	r14, r18
     5be:	f1 2c       	mov	r15, r1
     5c0:	01 2d       	mov	r16, r1
     5c2:	11 2d       	mov	r17, r1
     5c4:	d2 01       	movw	r26, r4
     5c6:	c1 01       	movw	r24, r2
     5c8:	0e 2c       	mov	r0, r14
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <__udivdi3+0xf8>
     5cc:	b6 95       	lsr	r27
     5ce:	a7 95       	ror	r26
     5d0:	97 95       	ror	r25
     5d2:	87 95       	ror	r24
     5d4:	0a 94       	dec	r0
     5d6:	d2 f7       	brpl	.-12     	; 0x5cc <__udivdi3+0xf0>
     5d8:	8d 56       	subi	r24, 0x6D	; 109
     5da:	9f 4f       	sbci	r25, 0xFF	; 255
     5dc:	dc 01       	movw	r26, r24
     5de:	2c 91       	ld	r18, X
     5e0:	80 e2       	ldi	r24, 0x20	; 32
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	a0 e0       	ldi	r26, 0x00	; 0
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	8e 19       	sub	r24, r14
     5ea:	9f 09       	sbc	r25, r15
     5ec:	a0 0b       	sbc	r26, r16
     5ee:	b1 0b       	sbc	r27, r17
     5f0:	7c 01       	movw	r14, r24
     5f2:	8d 01       	movw	r16, r26
     5f4:	e2 1a       	sub	r14, r18
     5f6:	f1 08       	sbc	r15, r1
     5f8:	01 09       	sbc	r16, r1
     5fa:	11 09       	sbc	r17, r1
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	a1 f1       	breq	.+104    	; 0x66e <__udivdi3+0x192>
     606:	0e 2c       	mov	r0, r14
     608:	04 c0       	rjmp	.+8      	; 0x612 <__udivdi3+0x136>
     60a:	22 0c       	add	r2, r2
     60c:	33 1c       	adc	r3, r3
     60e:	44 1c       	adc	r4, r4
     610:	55 1c       	adc	r5, r5
     612:	0a 94       	dec	r0
     614:	d2 f7       	brpl	.-12     	; 0x60a <__udivdi3+0x12e>
     616:	a4 01       	movw	r20, r8
     618:	93 01       	movw	r18, r6
     61a:	0e 2c       	mov	r0, r14
     61c:	04 c0       	rjmp	.+8      	; 0x626 <__udivdi3+0x14a>
     61e:	22 0f       	add	r18, r18
     620:	33 1f       	adc	r19, r19
     622:	44 1f       	adc	r20, r20
     624:	55 1f       	adc	r21, r21
     626:	0a 94       	dec	r0
     628:	d2 f7       	brpl	.-12     	; 0x61e <__udivdi3+0x142>
     62a:	80 e2       	ldi	r24, 0x20	; 32
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	8e 19       	sub	r24, r14
     630:	9f 09       	sbc	r25, r15
     632:	6d a4       	ldd	r6, Y+45	; 0x2d
     634:	7e a4       	ldd	r7, Y+46	; 0x2e
     636:	8f a4       	ldd	r8, Y+47	; 0x2f
     638:	98 a8       	ldd	r9, Y+48	; 0x30
     63a:	04 c0       	rjmp	.+8      	; 0x644 <__udivdi3+0x168>
     63c:	96 94       	lsr	r9
     63e:	87 94       	ror	r8
     640:	77 94       	ror	r7
     642:	67 94       	ror	r6
     644:	8a 95       	dec	r24
     646:	d2 f7       	brpl	.-12     	; 0x63c <__udivdi3+0x160>
     648:	62 2a       	or	r6, r18
     64a:	73 2a       	or	r7, r19
     64c:	84 2a       	or	r8, r20
     64e:	95 2a       	or	r9, r21
     650:	ad a4       	ldd	r10, Y+45	; 0x2d
     652:	be a4       	ldd	r11, Y+46	; 0x2e
     654:	cf a4       	ldd	r12, Y+47	; 0x2f
     656:	d8 a8       	ldd	r13, Y+48	; 0x30
     658:	04 c0       	rjmp	.+8      	; 0x662 <__udivdi3+0x186>
     65a:	aa 0c       	add	r10, r10
     65c:	bb 1c       	adc	r11, r11
     65e:	cc 1c       	adc	r12, r12
     660:	dd 1c       	adc	r13, r13
     662:	ea 94       	dec	r14
     664:	d2 f7       	brpl	.-12     	; 0x65a <__udivdi3+0x17e>
     666:	ad a6       	std	Y+45, r10	; 0x2d
     668:	be a6       	std	Y+46, r11	; 0x2e
     66a:	cf a6       	std	Y+47, r12	; 0x2f
     66c:	d8 aa       	std	Y+48, r13	; 0x30
     66e:	62 01       	movw	r12, r4
     670:	ee 24       	eor	r14, r14
     672:	ff 24       	eor	r15, r15
     674:	cd aa       	std	Y+53, r12	; 0x35
     676:	de aa       	std	Y+54, r13	; 0x36
     678:	ef aa       	std	Y+55, r14	; 0x37
     67a:	f8 ae       	std	Y+56, r15	; 0x38
     67c:	92 01       	movw	r18, r4
     67e:	81 01       	movw	r16, r2
     680:	20 70       	andi	r18, 0x00	; 0
     682:	30 70       	andi	r19, 0x00	; 0
     684:	09 af       	std	Y+57, r16	; 0x39
     686:	1a af       	std	Y+58, r17	; 0x3a
     688:	2b af       	std	Y+59, r18	; 0x3b
     68a:	3c af       	std	Y+60, r19	; 0x3c
     68c:	c4 01       	movw	r24, r8
     68e:	b3 01       	movw	r22, r6
     690:	a7 01       	movw	r20, r14
     692:	96 01       	movw	r18, r12
     694:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     698:	7b 01       	movw	r14, r22
     69a:	8c 01       	movw	r16, r24
     69c:	c4 01       	movw	r24, r8
     69e:	b3 01       	movw	r22, r6
     6a0:	2d a9       	ldd	r18, Y+53	; 0x35
     6a2:	3e a9       	ldd	r19, Y+54	; 0x36
     6a4:	4f a9       	ldd	r20, Y+55	; 0x37
     6a6:	58 ad       	ldd	r21, Y+56	; 0x38
     6a8:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     6ac:	c9 01       	movw	r24, r18
     6ae:	da 01       	movw	r26, r20
     6b0:	3c 01       	movw	r6, r24
     6b2:	4d 01       	movw	r8, r26
     6b4:	c4 01       	movw	r24, r8
     6b6:	b3 01       	movw	r22, r6
     6b8:	29 ad       	ldd	r18, Y+57	; 0x39
     6ba:	3a ad       	ldd	r19, Y+58	; 0x3a
     6bc:	4b ad       	ldd	r20, Y+59	; 0x3b
     6be:	5c ad       	ldd	r21, Y+60	; 0x3c
     6c0:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	87 01       	movw	r16, r14
     6ca:	ff 24       	eor	r15, r15
     6cc:	ee 24       	eor	r14, r14
     6ce:	ad a4       	ldd	r10, Y+45	; 0x2d
     6d0:	be a4       	ldd	r11, Y+46	; 0x2e
     6d2:	cf a4       	ldd	r12, Y+47	; 0x2f
     6d4:	d8 a8       	ldd	r13, Y+48	; 0x30
     6d6:	c6 01       	movw	r24, r12
     6d8:	aa 27       	eor	r26, r26
     6da:	bb 27       	eor	r27, r27
     6dc:	57 01       	movw	r10, r14
     6de:	68 01       	movw	r12, r16
     6e0:	a8 2a       	or	r10, r24
     6e2:	b9 2a       	or	r11, r25
     6e4:	ca 2a       	or	r12, r26
     6e6:	db 2a       	or	r13, r27
     6e8:	a2 16       	cp	r10, r18
     6ea:	b3 06       	cpc	r11, r19
     6ec:	c4 06       	cpc	r12, r20
     6ee:	d5 06       	cpc	r13, r21
     6f0:	e0 f4       	brcc	.+56     	; 0x72a <__udivdi3+0x24e>
     6f2:	08 94       	sec
     6f4:	61 08       	sbc	r6, r1
     6f6:	71 08       	sbc	r7, r1
     6f8:	81 08       	sbc	r8, r1
     6fa:	91 08       	sbc	r9, r1
     6fc:	a2 0c       	add	r10, r2
     6fe:	b3 1c       	adc	r11, r3
     700:	c4 1c       	adc	r12, r4
     702:	d5 1c       	adc	r13, r5
     704:	a2 14       	cp	r10, r2
     706:	b3 04       	cpc	r11, r3
     708:	c4 04       	cpc	r12, r4
     70a:	d5 04       	cpc	r13, r5
     70c:	70 f0       	brcs	.+28     	; 0x72a <__udivdi3+0x24e>
     70e:	a2 16       	cp	r10, r18
     710:	b3 06       	cpc	r11, r19
     712:	c4 06       	cpc	r12, r20
     714:	d5 06       	cpc	r13, r21
     716:	48 f4       	brcc	.+18     	; 0x72a <__udivdi3+0x24e>
     718:	08 94       	sec
     71a:	61 08       	sbc	r6, r1
     71c:	71 08       	sbc	r7, r1
     71e:	81 08       	sbc	r8, r1
     720:	91 08       	sbc	r9, r1
     722:	a2 0c       	add	r10, r2
     724:	b3 1c       	adc	r11, r3
     726:	c4 1c       	adc	r12, r4
     728:	d5 1c       	adc	r13, r5
     72a:	a2 1a       	sub	r10, r18
     72c:	b3 0a       	sbc	r11, r19
     72e:	c4 0a       	sbc	r12, r20
     730:	d5 0a       	sbc	r13, r21
     732:	c6 01       	movw	r24, r12
     734:	b5 01       	movw	r22, r10
     736:	2d a9       	ldd	r18, Y+53	; 0x35
     738:	3e a9       	ldd	r19, Y+54	; 0x36
     73a:	4f a9       	ldd	r20, Y+55	; 0x37
     73c:	58 ad       	ldd	r21, Y+56	; 0x38
     73e:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     742:	7b 01       	movw	r14, r22
     744:	8c 01       	movw	r16, r24
     746:	c6 01       	movw	r24, r12
     748:	b5 01       	movw	r22, r10
     74a:	2d a9       	ldd	r18, Y+53	; 0x35
     74c:	3e a9       	ldd	r19, Y+54	; 0x36
     74e:	4f a9       	ldd	r20, Y+55	; 0x37
     750:	58 ad       	ldd	r21, Y+56	; 0x38
     752:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	5c 01       	movw	r10, r24
     75c:	6d 01       	movw	r12, r26
     75e:	c6 01       	movw	r24, r12
     760:	b5 01       	movw	r22, r10
     762:	29 ad       	ldd	r18, Y+57	; 0x39
     764:	3a ad       	ldd	r19, Y+58	; 0x3a
     766:	4b ad       	ldd	r20, Y+59	; 0x3b
     768:	5c ad       	ldd	r21, Y+60	; 0x3c
     76a:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	87 01       	movw	r16, r14
     774:	ff 24       	eor	r15, r15
     776:	ee 24       	eor	r14, r14
     778:	8d a5       	ldd	r24, Y+45	; 0x2d
     77a:	9e a5       	ldd	r25, Y+46	; 0x2e
     77c:	af a5       	ldd	r26, Y+47	; 0x2f
     77e:	b8 a9       	ldd	r27, Y+48	; 0x30
     780:	a0 70       	andi	r26, 0x00	; 0
     782:	b0 70       	andi	r27, 0x00	; 0
     784:	e8 2a       	or	r14, r24
     786:	f9 2a       	or	r15, r25
     788:	0a 2b       	or	r16, r26
     78a:	1b 2b       	or	r17, r27
     78c:	e2 16       	cp	r14, r18
     78e:	f3 06       	cpc	r15, r19
     790:	04 07       	cpc	r16, r20
     792:	15 07       	cpc	r17, r21
     794:	c0 f4       	brcc	.+48     	; 0x7c6 <__udivdi3+0x2ea>
     796:	08 94       	sec
     798:	a1 08       	sbc	r10, r1
     79a:	b1 08       	sbc	r11, r1
     79c:	c1 08       	sbc	r12, r1
     79e:	d1 08       	sbc	r13, r1
     7a0:	e2 0c       	add	r14, r2
     7a2:	f3 1c       	adc	r15, r3
     7a4:	04 1d       	adc	r16, r4
     7a6:	15 1d       	adc	r17, r5
     7a8:	e2 14       	cp	r14, r2
     7aa:	f3 04       	cpc	r15, r3
     7ac:	04 05       	cpc	r16, r4
     7ae:	15 05       	cpc	r17, r5
     7b0:	50 f0       	brcs	.+20     	; 0x7c6 <__udivdi3+0x2ea>
     7b2:	e2 16       	cp	r14, r18
     7b4:	f3 06       	cpc	r15, r19
     7b6:	04 07       	cpc	r16, r20
     7b8:	15 07       	cpc	r17, r21
     7ba:	28 f4       	brcc	.+10     	; 0x7c6 <__udivdi3+0x2ea>
     7bc:	08 94       	sec
     7be:	a1 08       	sbc	r10, r1
     7c0:	b1 08       	sbc	r11, r1
     7c2:	c1 08       	sbc	r12, r1
     7c4:	d1 08       	sbc	r13, r1
     7c6:	d3 01       	movw	r26, r6
     7c8:	99 27       	eor	r25, r25
     7ca:	88 27       	eor	r24, r24
     7cc:	86 01       	movw	r16, r12
     7ce:	75 01       	movw	r14, r10
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	e9 aa       	std	Y+49, r14	; 0x31
     7da:	fa aa       	std	Y+50, r15	; 0x32
     7dc:	0b ab       	std	Y+51, r16	; 0x33
     7de:	1c ab       	std	Y+52, r17	; 0x34
     7e0:	cf c4       	rjmp	.+2462   	; 0x1180 <__stack+0x921>
     7e2:	21 14       	cp	r2, r1
     7e4:	31 04       	cpc	r3, r1
     7e6:	41 04       	cpc	r4, r1
     7e8:	51 04       	cpc	r5, r1
     7ea:	71 f4       	brne	.+28     	; 0x808 <__udivdi3+0x32c>
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     800:	c9 01       	movw	r24, r18
     802:	da 01       	movw	r26, r20
     804:	1c 01       	movw	r2, r24
     806:	2d 01       	movw	r4, r26
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	20 16       	cp	r2, r16
     80c:	00 e0       	ldi	r16, 0x00	; 0
     80e:	30 06       	cpc	r3, r16
     810:	01 e0       	ldi	r16, 0x01	; 1
     812:	40 06       	cpc	r4, r16
     814:	00 e0       	ldi	r16, 0x00	; 0
     816:	50 06       	cpc	r5, r16
     818:	88 f4       	brcc	.+34     	; 0x83c <__udivdi3+0x360>
     81a:	1f ef       	ldi	r17, 0xFF	; 255
     81c:	21 16       	cp	r2, r17
     81e:	31 04       	cpc	r3, r1
     820:	41 04       	cpc	r4, r1
     822:	51 04       	cpc	r5, r1
     824:	31 f0       	breq	.+12     	; 0x832 <__udivdi3+0x356>
     826:	28 f0       	brcs	.+10     	; 0x832 <__udivdi3+0x356>
     828:	48 e0       	ldi	r20, 0x08	; 8
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	17 c0       	rjmp	.+46     	; 0x860 <__stack+0x1>
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	12 c0       	rjmp	.+36     	; 0x860 <__stack+0x1>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	22 16       	cp	r2, r18
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	32 06       	cpc	r3, r18
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	42 06       	cpc	r4, r18
     848:	21 e0       	ldi	r18, 0x01	; 1
     84a:	52 06       	cpc	r5, r18
     84c:	28 f0       	brcs	.+10     	; 0x858 <__udivdi3+0x37c>
     84e:	48 e1       	ldi	r20, 0x18	; 24
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	04 c0       	rjmp	.+8      	; 0x860 <__stack+0x1>
     858:	40 e1       	ldi	r20, 0x10	; 16
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	d2 01       	movw	r26, r4
     862:	c1 01       	movw	r24, r2
     864:	04 2e       	mov	r0, r20
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	b6 95       	lsr	r27
     86a:	a7 95       	ror	r26
     86c:	97 95       	ror	r25
     86e:	87 95       	ror	r24
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	8d 56       	subi	r24, 0x6D	; 109
     876:	9f 4f       	sbci	r25, 0xFF	; 255
     878:	dc 01       	movw	r26, r24
     87a:	2c 91       	ld	r18, X
     87c:	e0 e2       	ldi	r30, 0x20	; 32
     87e:	ee 2e       	mov	r14, r30
     880:	f1 2c       	mov	r15, r1
     882:	01 2d       	mov	r16, r1
     884:	11 2d       	mov	r17, r1
     886:	d8 01       	movw	r26, r16
     888:	c7 01       	movw	r24, r14
     88a:	84 1b       	sub	r24, r20
     88c:	95 0b       	sbc	r25, r21
     88e:	a6 0b       	sbc	r26, r22
     890:	b7 0b       	sbc	r27, r23
     892:	82 1b       	sub	r24, r18
     894:	91 09       	sbc	r25, r1
     896:	a1 09       	sbc	r26, r1
     898:	b1 09       	sbc	r27, r1
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	a1 05       	cpc	r26, r1
     89e:	b1 05       	cpc	r27, r1
     8a0:	61 f4       	brne	.+24     	; 0x8ba <__stack+0x5b>
     8a2:	64 01       	movw	r12, r8
     8a4:	53 01       	movw	r10, r6
     8a6:	a2 18       	sub	r10, r2
     8a8:	b3 08       	sbc	r11, r3
     8aa:	c4 08       	sbc	r12, r4
     8ac:	d5 08       	sbc	r13, r5
     8ae:	31 e0       	ldi	r19, 0x01	; 1
     8b0:	63 2e       	mov	r6, r19
     8b2:	71 2c       	mov	r7, r1
     8b4:	81 2c       	mov	r8, r1
     8b6:	91 2c       	mov	r9, r1
     8b8:	1e c1       	rjmp	.+572    	; 0xaf6 <__stack+0x297>
     8ba:	6f 96       	adiw	r28, 0x1f	; 31
     8bc:	8f af       	std	Y+63, r24	; 0x3f
     8be:	6f 97       	sbiw	r28, 0x1f	; 31
     8c0:	08 2e       	mov	r0, r24
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__stack+0x6d>
     8c4:	22 0c       	add	r2, r2
     8c6:	33 1c       	adc	r3, r3
     8c8:	44 1c       	adc	r4, r4
     8ca:	55 1c       	adc	r5, r5
     8cc:	0a 94       	dec	r0
     8ce:	d2 f7       	brpl	.-12     	; 0x8c4 <__stack+0x65>
     8d0:	ee 2d       	mov	r30, r14
     8d2:	e8 1b       	sub	r30, r24
     8d4:	64 01       	movw	r12, r8
     8d6:	53 01       	movw	r10, r6
     8d8:	0e 2e       	mov	r0, r30
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <__stack+0x85>
     8dc:	d6 94       	lsr	r13
     8de:	c7 94       	ror	r12
     8e0:	b7 94       	ror	r11
     8e2:	a7 94       	ror	r10
     8e4:	0a 94       	dec	r0
     8e6:	d2 f7       	brpl	.-12     	; 0x8dc <__stack+0x7d>
     8e8:	a4 01       	movw	r20, r8
     8ea:	93 01       	movw	r18, r6
     8ec:	6f 96       	adiw	r28, 0x1f	; 31
     8ee:	0f ac       	ldd	r0, Y+63	; 0x3f
     8f0:	6f 97       	sbiw	r28, 0x1f	; 31
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__stack+0x9d>
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	44 1f       	adc	r20, r20
     8fa:	55 1f       	adc	r21, r21
     8fc:	0a 94       	dec	r0
     8fe:	d2 f7       	brpl	.-12     	; 0x8f4 <__stack+0x95>
     900:	6d a4       	ldd	r6, Y+45	; 0x2d
     902:	7e a4       	ldd	r7, Y+46	; 0x2e
     904:	8f a4       	ldd	r8, Y+47	; 0x2f
     906:	98 a8       	ldd	r9, Y+48	; 0x30
     908:	0e 2e       	mov	r0, r30
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0xb5>
     90c:	96 94       	lsr	r9
     90e:	87 94       	ror	r8
     910:	77 94       	ror	r7
     912:	67 94       	ror	r6
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__stack+0xad>
     918:	84 01       	movw	r16, r8
     91a:	73 01       	movw	r14, r6
     91c:	e2 2a       	or	r14, r18
     91e:	f3 2a       	or	r15, r19
     920:	04 2b       	or	r16, r20
     922:	15 2b       	or	r17, r21
     924:	e9 a6       	std	Y+41, r14	; 0x29
     926:	fa a6       	std	Y+42, r15	; 0x2a
     928:	0b a7       	std	Y+43, r16	; 0x2b
     92a:	1c a7       	std	Y+44, r17	; 0x2c
     92c:	32 01       	movw	r6, r4
     92e:	88 24       	eor	r8, r8
     930:	99 24       	eor	r9, r9
     932:	92 01       	movw	r18, r4
     934:	81 01       	movw	r16, r2
     936:	20 70       	andi	r18, 0x00	; 0
     938:	30 70       	andi	r19, 0x00	; 0
     93a:	21 96       	adiw	r28, 0x01	; 1
     93c:	0c af       	std	Y+60, r16	; 0x3c
     93e:	1d af       	std	Y+61, r17	; 0x3d
     940:	2e af       	std	Y+62, r18	; 0x3e
     942:	3f af       	std	Y+63, r19	; 0x3f
     944:	21 97       	sbiw	r28, 0x01	; 1
     946:	c6 01       	movw	r24, r12
     948:	b5 01       	movw	r22, r10
     94a:	a4 01       	movw	r20, r8
     94c:	93 01       	movw	r18, r6
     94e:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     952:	7b 01       	movw	r14, r22
     954:	8c 01       	movw	r16, r24
     956:	c6 01       	movw	r24, r12
     958:	b5 01       	movw	r22, r10
     95a:	a4 01       	movw	r20, r8
     95c:	93 01       	movw	r18, r6
     95e:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     962:	c9 01       	movw	r24, r18
     964:	da 01       	movw	r26, r20
     966:	25 96       	adiw	r28, 0x05	; 5
     968:	8c af       	std	Y+60, r24	; 0x3c
     96a:	9d af       	std	Y+61, r25	; 0x3d
     96c:	ae af       	std	Y+62, r26	; 0x3e
     96e:	bf af       	std	Y+63, r27	; 0x3f
     970:	25 97       	sbiw	r28, 0x05	; 5
     972:	bc 01       	movw	r22, r24
     974:	cd 01       	movw	r24, r26
     976:	21 96       	adiw	r28, 0x01	; 1
     978:	2c ad       	ldd	r18, Y+60	; 0x3c
     97a:	3d ad       	ldd	r19, Y+61	; 0x3d
     97c:	4e ad       	ldd	r20, Y+62	; 0x3e
     97e:	5f ad       	ldd	r21, Y+63	; 0x3f
     980:	21 97       	sbiw	r28, 0x01	; 1
     982:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	87 01       	movw	r16, r14
     98c:	ff 24       	eor	r15, r15
     98e:	ee 24       	eor	r14, r14
     990:	a9 a4       	ldd	r10, Y+41	; 0x29
     992:	ba a4       	ldd	r11, Y+42	; 0x2a
     994:	cb a4       	ldd	r12, Y+43	; 0x2b
     996:	dc a4       	ldd	r13, Y+44	; 0x2c
     998:	c6 01       	movw	r24, r12
     99a:	aa 27       	eor	r26, r26
     99c:	bb 27       	eor	r27, r27
     99e:	5c 01       	movw	r10, r24
     9a0:	6d 01       	movw	r12, r26
     9a2:	ae 28       	or	r10, r14
     9a4:	bf 28       	or	r11, r15
     9a6:	c0 2a       	or	r12, r16
     9a8:	d1 2a       	or	r13, r17
     9aa:	a2 16       	cp	r10, r18
     9ac:	b3 06       	cpc	r11, r19
     9ae:	c4 06       	cpc	r12, r20
     9b0:	d5 06       	cpc	r13, r21
     9b2:	60 f5       	brcc	.+88     	; 0xa0c <__stack+0x1ad>
     9b4:	25 96       	adiw	r28, 0x05	; 5
     9b6:	6c ad       	ldd	r22, Y+60	; 0x3c
     9b8:	7d ad       	ldd	r23, Y+61	; 0x3d
     9ba:	8e ad       	ldd	r24, Y+62	; 0x3e
     9bc:	9f ad       	ldd	r25, Y+63	; 0x3f
     9be:	25 97       	sbiw	r28, 0x05	; 5
     9c0:	61 50       	subi	r22, 0x01	; 1
     9c2:	70 40       	sbci	r23, 0x00	; 0
     9c4:	80 40       	sbci	r24, 0x00	; 0
     9c6:	90 40       	sbci	r25, 0x00	; 0
     9c8:	25 96       	adiw	r28, 0x05	; 5
     9ca:	6c af       	std	Y+60, r22	; 0x3c
     9cc:	7d af       	std	Y+61, r23	; 0x3d
     9ce:	8e af       	std	Y+62, r24	; 0x3e
     9d0:	9f af       	std	Y+63, r25	; 0x3f
     9d2:	25 97       	sbiw	r28, 0x05	; 5
     9d4:	a2 0c       	add	r10, r2
     9d6:	b3 1c       	adc	r11, r3
     9d8:	c4 1c       	adc	r12, r4
     9da:	d5 1c       	adc	r13, r5
     9dc:	a2 14       	cp	r10, r2
     9de:	b3 04       	cpc	r11, r3
     9e0:	c4 04       	cpc	r12, r4
     9e2:	d5 04       	cpc	r13, r5
     9e4:	98 f0       	brcs	.+38     	; 0xa0c <__stack+0x1ad>
     9e6:	a2 16       	cp	r10, r18
     9e8:	b3 06       	cpc	r11, r19
     9ea:	c4 06       	cpc	r12, r20
     9ec:	d5 06       	cpc	r13, r21
     9ee:	70 f4       	brcc	.+28     	; 0xa0c <__stack+0x1ad>
     9f0:	61 50       	subi	r22, 0x01	; 1
     9f2:	70 40       	sbci	r23, 0x00	; 0
     9f4:	80 40       	sbci	r24, 0x00	; 0
     9f6:	90 40       	sbci	r25, 0x00	; 0
     9f8:	25 96       	adiw	r28, 0x05	; 5
     9fa:	6c af       	std	Y+60, r22	; 0x3c
     9fc:	7d af       	std	Y+61, r23	; 0x3d
     9fe:	8e af       	std	Y+62, r24	; 0x3e
     a00:	9f af       	std	Y+63, r25	; 0x3f
     a02:	25 97       	sbiw	r28, 0x05	; 5
     a04:	a2 0c       	add	r10, r2
     a06:	b3 1c       	adc	r11, r3
     a08:	c4 1c       	adc	r12, r4
     a0a:	d5 1c       	adc	r13, r5
     a0c:	a2 1a       	sub	r10, r18
     a0e:	b3 0a       	sbc	r11, r19
     a10:	c4 0a       	sbc	r12, r20
     a12:	d5 0a       	sbc	r13, r21
     a14:	c6 01       	movw	r24, r12
     a16:	b5 01       	movw	r22, r10
     a18:	a4 01       	movw	r20, r8
     a1a:	93 01       	movw	r18, r6
     a1c:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     a20:	7b 01       	movw	r14, r22
     a22:	8c 01       	movw	r16, r24
     a24:	c6 01       	movw	r24, r12
     a26:	b5 01       	movw	r22, r10
     a28:	a4 01       	movw	r20, r8
     a2a:	93 01       	movw	r18, r6
     a2c:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     a30:	c9 01       	movw	r24, r18
     a32:	da 01       	movw	r26, r20
     a34:	3c 01       	movw	r6, r24
     a36:	4d 01       	movw	r8, r26
     a38:	c4 01       	movw	r24, r8
     a3a:	b3 01       	movw	r22, r6
     a3c:	21 96       	adiw	r28, 0x01	; 1
     a3e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a40:	3d ad       	ldd	r19, Y+61	; 0x3d
     a42:	4e ad       	ldd	r20, Y+62	; 0x3e
     a44:	5f ad       	ldd	r21, Y+63	; 0x3f
     a46:	21 97       	sbiw	r28, 0x01	; 1
     a48:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	87 01       	movw	r16, r14
     a52:	ff 24       	eor	r15, r15
     a54:	ee 24       	eor	r14, r14
     a56:	89 a5       	ldd	r24, Y+41	; 0x29
     a58:	9a a5       	ldd	r25, Y+42	; 0x2a
     a5a:	ab a5       	ldd	r26, Y+43	; 0x2b
     a5c:	bc a5       	ldd	r27, Y+44	; 0x2c
     a5e:	a0 70       	andi	r26, 0x00	; 0
     a60:	b0 70       	andi	r27, 0x00	; 0
     a62:	57 01       	movw	r10, r14
     a64:	68 01       	movw	r12, r16
     a66:	a8 2a       	or	r10, r24
     a68:	b9 2a       	or	r11, r25
     a6a:	ca 2a       	or	r12, r26
     a6c:	db 2a       	or	r13, r27
     a6e:	a2 16       	cp	r10, r18
     a70:	b3 06       	cpc	r11, r19
     a72:	c4 06       	cpc	r12, r20
     a74:	d5 06       	cpc	r13, r21
     a76:	e0 f4       	brcc	.+56     	; 0xab0 <__stack+0x251>
     a78:	08 94       	sec
     a7a:	61 08       	sbc	r6, r1
     a7c:	71 08       	sbc	r7, r1
     a7e:	81 08       	sbc	r8, r1
     a80:	91 08       	sbc	r9, r1
     a82:	a2 0c       	add	r10, r2
     a84:	b3 1c       	adc	r11, r3
     a86:	c4 1c       	adc	r12, r4
     a88:	d5 1c       	adc	r13, r5
     a8a:	a2 14       	cp	r10, r2
     a8c:	b3 04       	cpc	r11, r3
     a8e:	c4 04       	cpc	r12, r4
     a90:	d5 04       	cpc	r13, r5
     a92:	70 f0       	brcs	.+28     	; 0xab0 <__stack+0x251>
     a94:	a2 16       	cp	r10, r18
     a96:	b3 06       	cpc	r11, r19
     a98:	c4 06       	cpc	r12, r20
     a9a:	d5 06       	cpc	r13, r21
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__stack+0x251>
     a9e:	08 94       	sec
     aa0:	61 08       	sbc	r6, r1
     aa2:	71 08       	sbc	r7, r1
     aa4:	81 08       	sbc	r8, r1
     aa6:	91 08       	sbc	r9, r1
     aa8:	a2 0c       	add	r10, r2
     aaa:	b3 1c       	adc	r11, r3
     aac:	c4 1c       	adc	r12, r4
     aae:	d5 1c       	adc	r13, r5
     ab0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ab2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ab4:	af a5       	ldd	r26, Y+47	; 0x2f
     ab6:	b8 a9       	ldd	r27, Y+48	; 0x30
     ab8:	6f 96       	adiw	r28, 0x1f	; 31
     aba:	0f ac       	ldd	r0, Y+63	; 0x3f
     abc:	6f 97       	sbiw	r28, 0x1f	; 31
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__stack+0x269>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	0a 94       	dec	r0
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__stack+0x261>
     acc:	8d a7       	std	Y+45, r24	; 0x2d
     ace:	9e a7       	std	Y+46, r25	; 0x2e
     ad0:	af a7       	std	Y+47, r26	; 0x2f
     ad2:	b8 ab       	std	Y+48, r27	; 0x30
     ad4:	a2 1a       	sub	r10, r18
     ad6:	b3 0a       	sbc	r11, r19
     ad8:	c4 0a       	sbc	r12, r20
     ada:	d5 0a       	sbc	r13, r21
     adc:	25 96       	adiw	r28, 0x05	; 5
     ade:	ec ac       	ldd	r14, Y+60	; 0x3c
     ae0:	fd ac       	ldd	r15, Y+61	; 0x3d
     ae2:	0e ad       	ldd	r16, Y+62	; 0x3e
     ae4:	1f ad       	ldd	r17, Y+63	; 0x3f
     ae6:	25 97       	sbiw	r28, 0x05	; 5
     ae8:	d7 01       	movw	r26, r14
     aea:	99 27       	eor	r25, r25
     aec:	88 27       	eor	r24, r24
     aee:	68 2a       	or	r6, r24
     af0:	79 2a       	or	r7, r25
     af2:	8a 2a       	or	r8, r26
     af4:	9b 2a       	or	r9, r27
     af6:	82 01       	movw	r16, r4
     af8:	22 27       	eor	r18, r18
     afa:	33 27       	eor	r19, r19
     afc:	29 96       	adiw	r28, 0x09	; 9
     afe:	0c af       	std	Y+60, r16	; 0x3c
     b00:	1d af       	std	Y+61, r17	; 0x3d
     b02:	2e af       	std	Y+62, r18	; 0x3e
     b04:	3f af       	std	Y+63, r19	; 0x3f
     b06:	29 97       	sbiw	r28, 0x09	; 9
     b08:	a2 01       	movw	r20, r4
     b0a:	91 01       	movw	r18, r2
     b0c:	40 70       	andi	r20, 0x00	; 0
     b0e:	50 70       	andi	r21, 0x00	; 0
     b10:	2d 96       	adiw	r28, 0x0d	; 13
     b12:	2c af       	std	Y+60, r18	; 0x3c
     b14:	3d af       	std	Y+61, r19	; 0x3d
     b16:	4e af       	std	Y+62, r20	; 0x3e
     b18:	5f af       	std	Y+63, r21	; 0x3f
     b1a:	2d 97       	sbiw	r28, 0x0d	; 13
     b1c:	c6 01       	movw	r24, r12
     b1e:	b5 01       	movw	r22, r10
     b20:	29 96       	adiw	r28, 0x09	; 9
     b22:	2c ad       	ldd	r18, Y+60	; 0x3c
     b24:	3d ad       	ldd	r19, Y+61	; 0x3d
     b26:	4e ad       	ldd	r20, Y+62	; 0x3e
     b28:	5f ad       	ldd	r21, Y+63	; 0x3f
     b2a:	29 97       	sbiw	r28, 0x09	; 9
     b2c:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     b30:	7b 01       	movw	r14, r22
     b32:	8c 01       	movw	r16, r24
     b34:	c6 01       	movw	r24, r12
     b36:	b5 01       	movw	r22, r10
     b38:	29 96       	adiw	r28, 0x09	; 9
     b3a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b3c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b3e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b40:	5f ad       	ldd	r21, Y+63	; 0x3f
     b42:	29 97       	sbiw	r28, 0x09	; 9
     b44:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     b48:	c9 01       	movw	r24, r18
     b4a:	da 01       	movw	r26, r20
     b4c:	61 96       	adiw	r28, 0x11	; 17
     b4e:	8c af       	std	Y+60, r24	; 0x3c
     b50:	9d af       	std	Y+61, r25	; 0x3d
     b52:	ae af       	std	Y+62, r26	; 0x3e
     b54:	bf af       	std	Y+63, r27	; 0x3f
     b56:	61 97       	sbiw	r28, 0x11	; 17
     b58:	bc 01       	movw	r22, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	2d 96       	adiw	r28, 0x0d	; 13
     b5e:	2c ad       	ldd	r18, Y+60	; 0x3c
     b60:	3d ad       	ldd	r19, Y+61	; 0x3d
     b62:	4e ad       	ldd	r20, Y+62	; 0x3e
     b64:	5f ad       	ldd	r21, Y+63	; 0x3f
     b66:	2d 97       	sbiw	r28, 0x0d	; 13
     b68:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	87 01       	movw	r16, r14
     b72:	ff 24       	eor	r15, r15
     b74:	ee 24       	eor	r14, r14
     b76:	ad a4       	ldd	r10, Y+45	; 0x2d
     b78:	be a4       	ldd	r11, Y+46	; 0x2e
     b7a:	cf a4       	ldd	r12, Y+47	; 0x2f
     b7c:	d8 a8       	ldd	r13, Y+48	; 0x30
     b7e:	c6 01       	movw	r24, r12
     b80:	aa 27       	eor	r26, r26
     b82:	bb 27       	eor	r27, r27
     b84:	57 01       	movw	r10, r14
     b86:	68 01       	movw	r12, r16
     b88:	a8 2a       	or	r10, r24
     b8a:	b9 2a       	or	r11, r25
     b8c:	ca 2a       	or	r12, r26
     b8e:	db 2a       	or	r13, r27
     b90:	a2 16       	cp	r10, r18
     b92:	b3 06       	cpc	r11, r19
     b94:	c4 06       	cpc	r12, r20
     b96:	d5 06       	cpc	r13, r21
     b98:	60 f5       	brcc	.+88     	; 0xbf2 <__stack+0x393>
     b9a:	61 96       	adiw	r28, 0x11	; 17
     b9c:	6c ad       	ldd	r22, Y+60	; 0x3c
     b9e:	7d ad       	ldd	r23, Y+61	; 0x3d
     ba0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ba2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ba4:	61 97       	sbiw	r28, 0x11	; 17
     ba6:	61 50       	subi	r22, 0x01	; 1
     ba8:	70 40       	sbci	r23, 0x00	; 0
     baa:	80 40       	sbci	r24, 0x00	; 0
     bac:	90 40       	sbci	r25, 0x00	; 0
     bae:	61 96       	adiw	r28, 0x11	; 17
     bb0:	6c af       	std	Y+60, r22	; 0x3c
     bb2:	7d af       	std	Y+61, r23	; 0x3d
     bb4:	8e af       	std	Y+62, r24	; 0x3e
     bb6:	9f af       	std	Y+63, r25	; 0x3f
     bb8:	61 97       	sbiw	r28, 0x11	; 17
     bba:	a2 0c       	add	r10, r2
     bbc:	b3 1c       	adc	r11, r3
     bbe:	c4 1c       	adc	r12, r4
     bc0:	d5 1c       	adc	r13, r5
     bc2:	a2 14       	cp	r10, r2
     bc4:	b3 04       	cpc	r11, r3
     bc6:	c4 04       	cpc	r12, r4
     bc8:	d5 04       	cpc	r13, r5
     bca:	98 f0       	brcs	.+38     	; 0xbf2 <__stack+0x393>
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	70 f4       	brcc	.+28     	; 0xbf2 <__stack+0x393>
     bd6:	61 50       	subi	r22, 0x01	; 1
     bd8:	70 40       	sbci	r23, 0x00	; 0
     bda:	80 40       	sbci	r24, 0x00	; 0
     bdc:	90 40       	sbci	r25, 0x00	; 0
     bde:	61 96       	adiw	r28, 0x11	; 17
     be0:	6c af       	std	Y+60, r22	; 0x3c
     be2:	7d af       	std	Y+61, r23	; 0x3d
     be4:	8e af       	std	Y+62, r24	; 0x3e
     be6:	9f af       	std	Y+63, r25	; 0x3f
     be8:	61 97       	sbiw	r28, 0x11	; 17
     bea:	a2 0c       	add	r10, r2
     bec:	b3 1c       	adc	r11, r3
     bee:	c4 1c       	adc	r12, r4
     bf0:	d5 1c       	adc	r13, r5
     bf2:	a2 1a       	sub	r10, r18
     bf4:	b3 0a       	sbc	r11, r19
     bf6:	c4 0a       	sbc	r12, r20
     bf8:	d5 0a       	sbc	r13, r21
     bfa:	c6 01       	movw	r24, r12
     bfc:	b5 01       	movw	r22, r10
     bfe:	29 96       	adiw	r28, 0x09	; 9
     c00:	2c ad       	ldd	r18, Y+60	; 0x3c
     c02:	3d ad       	ldd	r19, Y+61	; 0x3d
     c04:	4e ad       	ldd	r20, Y+62	; 0x3e
     c06:	5f ad       	ldd	r21, Y+63	; 0x3f
     c08:	29 97       	sbiw	r28, 0x09	; 9
     c0a:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     c0e:	7b 01       	movw	r14, r22
     c10:	8c 01       	movw	r16, r24
     c12:	c6 01       	movw	r24, r12
     c14:	b5 01       	movw	r22, r10
     c16:	29 96       	adiw	r28, 0x09	; 9
     c18:	2c ad       	ldd	r18, Y+60	; 0x3c
     c1a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c1c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c1e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c20:	29 97       	sbiw	r28, 0x09	; 9
     c22:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     c26:	c9 01       	movw	r24, r18
     c28:	da 01       	movw	r26, r20
     c2a:	5c 01       	movw	r10, r24
     c2c:	6d 01       	movw	r12, r26
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	2d 96       	adiw	r28, 0x0d	; 13
     c34:	2c ad       	ldd	r18, Y+60	; 0x3c
     c36:	3d ad       	ldd	r19, Y+61	; 0x3d
     c38:	4e ad       	ldd	r20, Y+62	; 0x3e
     c3a:	5f ad       	ldd	r21, Y+63	; 0x3f
     c3c:	2d 97       	sbiw	r28, 0x0d	; 13
     c3e:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	87 01       	movw	r16, r14
     c48:	ff 24       	eor	r15, r15
     c4a:	ee 24       	eor	r14, r14
     c4c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c4e:	9e a5       	ldd	r25, Y+46	; 0x2e
     c50:	af a5       	ldd	r26, Y+47	; 0x2f
     c52:	b8 a9       	ldd	r27, Y+48	; 0x30
     c54:	a0 70       	andi	r26, 0x00	; 0
     c56:	b0 70       	andi	r27, 0x00	; 0
     c58:	e8 2a       	or	r14, r24
     c5a:	f9 2a       	or	r15, r25
     c5c:	0a 2b       	or	r16, r26
     c5e:	1b 2b       	or	r17, r27
     c60:	e2 16       	cp	r14, r18
     c62:	f3 06       	cpc	r15, r19
     c64:	04 07       	cpc	r16, r20
     c66:	15 07       	cpc	r17, r21
     c68:	c0 f4       	brcc	.+48     	; 0xc9a <__stack+0x43b>
     c6a:	08 94       	sec
     c6c:	a1 08       	sbc	r10, r1
     c6e:	b1 08       	sbc	r11, r1
     c70:	c1 08       	sbc	r12, r1
     c72:	d1 08       	sbc	r13, r1
     c74:	e2 0c       	add	r14, r2
     c76:	f3 1c       	adc	r15, r3
     c78:	04 1d       	adc	r16, r4
     c7a:	15 1d       	adc	r17, r5
     c7c:	e2 14       	cp	r14, r2
     c7e:	f3 04       	cpc	r15, r3
     c80:	04 05       	cpc	r16, r4
     c82:	15 05       	cpc	r17, r5
     c84:	50 f0       	brcs	.+20     	; 0xc9a <__stack+0x43b>
     c86:	e2 16       	cp	r14, r18
     c88:	f3 06       	cpc	r15, r19
     c8a:	04 07       	cpc	r16, r20
     c8c:	15 07       	cpc	r17, r21
     c8e:	28 f4       	brcc	.+10     	; 0xc9a <__stack+0x43b>
     c90:	08 94       	sec
     c92:	a1 08       	sbc	r10, r1
     c94:	b1 08       	sbc	r11, r1
     c96:	c1 08       	sbc	r12, r1
     c98:	d1 08       	sbc	r13, r1
     c9a:	61 96       	adiw	r28, 0x11	; 17
     c9c:	ec ac       	ldd	r14, Y+60	; 0x3c
     c9e:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca0:	0e ad       	ldd	r16, Y+62	; 0x3e
     ca2:	1f ad       	ldd	r17, Y+63	; 0x3f
     ca4:	61 97       	sbiw	r28, 0x11	; 17
     ca6:	d7 01       	movw	r26, r14
     ca8:	99 27       	eor	r25, r25
     caa:	88 27       	eor	r24, r24
     cac:	96 01       	movw	r18, r12
     cae:	85 01       	movw	r16, r10
     cb0:	08 2b       	or	r16, r24
     cb2:	19 2b       	or	r17, r25
     cb4:	2a 2b       	or	r18, r26
     cb6:	3b 2b       	or	r19, r27
     cb8:	09 ab       	std	Y+49, r16	; 0x31
     cba:	1a ab       	std	Y+50, r17	; 0x32
     cbc:	2b ab       	std	Y+51, r18	; 0x33
     cbe:	3c ab       	std	Y+52, r19	; 0x34
     cc0:	62 c2       	rjmp	.+1220   	; 0x1186 <__stack+0x927>
     cc2:	6e 14       	cp	r6, r14
     cc4:	7f 04       	cpc	r7, r15
     cc6:	80 06       	cpc	r8, r16
     cc8:	91 06       	cpc	r9, r17
     cca:	08 f4       	brcc	.+2      	; 0xcce <__stack+0x46f>
     ccc:	51 c2       	rjmp	.+1186   	; 0x1170 <__stack+0x911>
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	e2 16       	cp	r14, r18
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	f2 06       	cpc	r15, r18
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	02 07       	cpc	r16, r18
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	12 07       	cpc	r17, r18
     cde:	88 f4       	brcc	.+34     	; 0xd02 <__stack+0x4a3>
     ce0:	3f ef       	ldi	r19, 0xFF	; 255
     ce2:	e3 16       	cp	r14, r19
     ce4:	f1 04       	cpc	r15, r1
     ce6:	01 05       	cpc	r16, r1
     ce8:	11 05       	cpc	r17, r1
     cea:	31 f0       	breq	.+12     	; 0xcf8 <__stack+0x499>
     cec:	28 f0       	brcs	.+10     	; 0xcf8 <__stack+0x499>
     cee:	48 e0       	ldi	r20, 0x08	; 8
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <__stack+0x4c7>
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__stack+0x4c7>
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	e4 16       	cp	r14, r20
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	f4 06       	cpc	r15, r20
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	04 07       	cpc	r16, r20
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	14 07       	cpc	r17, r20
     d12:	28 f0       	brcs	.+10     	; 0xd1e <__stack+0x4bf>
     d14:	48 e1       	ldi	r20, 0x18	; 24
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__stack+0x4c7>
     d1e:	40 e1       	ldi	r20, 0x10	; 16
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	d8 01       	movw	r26, r16
     d28:	c7 01       	movw	r24, r14
     d2a:	04 2e       	mov	r0, r20
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <__stack+0x4d7>
     d2e:	b6 95       	lsr	r27
     d30:	a7 95       	ror	r26
     d32:	97 95       	ror	r25
     d34:	87 95       	ror	r24
     d36:	0a 94       	dec	r0
     d38:	d2 f7       	brpl	.-12     	; 0xd2e <__stack+0x4cf>
     d3a:	8d 56       	subi	r24, 0x6D	; 109
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	dc 01       	movw	r26, r24
     d40:	2c 91       	ld	r18, X
     d42:	30 e2       	ldi	r19, 0x20	; 32
     d44:	a3 2e       	mov	r10, r19
     d46:	b1 2c       	mov	r11, r1
     d48:	c1 2c       	mov	r12, r1
     d4a:	d1 2c       	mov	r13, r1
     d4c:	d6 01       	movw	r26, r12
     d4e:	c5 01       	movw	r24, r10
     d50:	84 1b       	sub	r24, r20
     d52:	95 0b       	sbc	r25, r21
     d54:	a6 0b       	sbc	r26, r22
     d56:	b7 0b       	sbc	r27, r23
     d58:	82 1b       	sub	r24, r18
     d5a:	91 09       	sbc	r25, r1
     d5c:	a1 09       	sbc	r26, r1
     d5e:	b1 09       	sbc	r27, r1
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	a1 05       	cpc	r26, r1
     d64:	b1 05       	cpc	r27, r1
     d66:	89 f4       	brne	.+34     	; 0xd8a <__stack+0x52b>
     d68:	e6 14       	cp	r14, r6
     d6a:	f7 04       	cpc	r15, r7
     d6c:	08 05       	cpc	r16, r8
     d6e:	19 05       	cpc	r17, r9
     d70:	08 f4       	brcc	.+2      	; 0xd74 <__stack+0x515>
     d72:	f2 c1       	rjmp	.+996    	; 0x1158 <__stack+0x8f9>
     d74:	6d a4       	ldd	r6, Y+45	; 0x2d
     d76:	7e a4       	ldd	r7, Y+46	; 0x2e
     d78:	8f a4       	ldd	r8, Y+47	; 0x2f
     d7a:	98 a8       	ldd	r9, Y+48	; 0x30
     d7c:	62 14       	cp	r6, r2
     d7e:	73 04       	cpc	r7, r3
     d80:	84 04       	cpc	r8, r4
     d82:	95 04       	cpc	r9, r5
     d84:	08 f0       	brcs	.+2      	; 0xd88 <__stack+0x529>
     d86:	e8 c1       	rjmp	.+976    	; 0x1158 <__stack+0x8f9>
     d88:	f3 c1       	rjmp	.+998    	; 0x1170 <__stack+0x911>
     d8a:	6e 96       	adiw	r28, 0x1e	; 30
     d8c:	8f af       	std	Y+63, r24	; 0x3f
     d8e:	6e 97       	sbiw	r28, 0x1e	; 30
     d90:	08 2e       	mov	r0, r24
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <__stack+0x53d>
     d94:	ee 0c       	add	r14, r14
     d96:	ff 1c       	adc	r15, r15
     d98:	00 1f       	adc	r16, r16
     d9a:	11 1f       	adc	r17, r17
     d9c:	0a 94       	dec	r0
     d9e:	d2 f7       	brpl	.-12     	; 0xd94 <__stack+0x535>
     da0:	6a 2d       	mov	r22, r10
     da2:	68 1b       	sub	r22, r24
     da4:	d2 01       	movw	r26, r4
     da6:	c1 01       	movw	r24, r2
     da8:	06 2e       	mov	r0, r22
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <__stack+0x555>
     dac:	b6 95       	lsr	r27
     dae:	a7 95       	ror	r26
     db0:	97 95       	ror	r25
     db2:	87 95       	ror	r24
     db4:	0a 94       	dec	r0
     db6:	d2 f7       	brpl	.-12     	; 0xdac <__stack+0x54d>
     db8:	5c 01       	movw	r10, r24
     dba:	6d 01       	movw	r12, r26
     dbc:	ae 28       	or	r10, r14
     dbe:	bf 28       	or	r11, r15
     dc0:	c0 2a       	or	r12, r16
     dc2:	d1 2a       	or	r13, r17
     dc4:	ad a2       	std	Y+37, r10	; 0x25
     dc6:	be a2       	std	Y+38, r11	; 0x26
     dc8:	cf a2       	std	Y+39, r12	; 0x27
     dca:	d8 a6       	std	Y+40, r13	; 0x28
     dcc:	72 01       	movw	r14, r4
     dce:	61 01       	movw	r12, r2
     dd0:	6e 96       	adiw	r28, 0x1e	; 30
     dd2:	0f ac       	ldd	r0, Y+63	; 0x3f
     dd4:	6e 97       	sbiw	r28, 0x1e	; 30
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__stack+0x581>
     dd8:	cc 0c       	add	r12, r12
     dda:	dd 1c       	adc	r13, r13
     ddc:	ee 1c       	adc	r14, r14
     dde:	ff 1c       	adc	r15, r15
     de0:	0a 94       	dec	r0
     de2:	d2 f7       	brpl	.-12     	; 0xdd8 <__stack+0x579>
     de4:	c9 a2       	std	Y+33, r12	; 0x21
     de6:	da a2       	std	Y+34, r13	; 0x22
     de8:	eb a2       	std	Y+35, r14	; 0x23
     dea:	fc a2       	std	Y+36, r15	; 0x24
     dec:	64 01       	movw	r12, r8
     dee:	53 01       	movw	r10, r6
     df0:	06 2e       	mov	r0, r22
     df2:	04 c0       	rjmp	.+8      	; 0xdfc <__stack+0x59d>
     df4:	d6 94       	lsr	r13
     df6:	c7 94       	ror	r12
     df8:	b7 94       	ror	r11
     dfa:	a7 94       	ror	r10
     dfc:	0a 94       	dec	r0
     dfe:	d2 f7       	brpl	.-12     	; 0xdf4 <__stack+0x595>
     e00:	d4 01       	movw	r26, r8
     e02:	c3 01       	movw	r24, r6
     e04:	6e 96       	adiw	r28, 0x1e	; 30
     e06:	0f ac       	ldd	r0, Y+63	; 0x3f
     e08:	6e 97       	sbiw	r28, 0x1e	; 30
     e0a:	04 c0       	rjmp	.+8      	; 0xe14 <__stack+0x5b5>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	aa 1f       	adc	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	0a 94       	dec	r0
     e16:	d2 f7       	brpl	.-12     	; 0xe0c <__stack+0x5ad>
     e18:	ed a4       	ldd	r14, Y+45	; 0x2d
     e1a:	fe a4       	ldd	r15, Y+46	; 0x2e
     e1c:	0f a5       	ldd	r16, Y+47	; 0x2f
     e1e:	18 a9       	ldd	r17, Y+48	; 0x30
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <__stack+0x5cb>
     e22:	16 95       	lsr	r17
     e24:	07 95       	ror	r16
     e26:	f7 94       	ror	r15
     e28:	e7 94       	ror	r14
     e2a:	6a 95       	dec	r22
     e2c:	d2 f7       	brpl	.-12     	; 0xe22 <__stack+0x5c3>
     e2e:	37 01       	movw	r6, r14
     e30:	48 01       	movw	r8, r16
     e32:	68 2a       	or	r6, r24
     e34:	79 2a       	or	r7, r25
     e36:	8a 2a       	or	r8, r26
     e38:	9b 2a       	or	r9, r27
     e3a:	6d 8e       	std	Y+29, r6	; 0x1d
     e3c:	7e 8e       	std	Y+30, r7	; 0x1e
     e3e:	8f 8e       	std	Y+31, r8	; 0x1f
     e40:	98 a2       	std	Y+32, r9	; 0x20
     e42:	ed a0       	ldd	r14, Y+37	; 0x25
     e44:	fe a0       	ldd	r15, Y+38	; 0x26
     e46:	0f a1       	ldd	r16, Y+39	; 0x27
     e48:	18 a5       	ldd	r17, Y+40	; 0x28
     e4a:	38 01       	movw	r6, r16
     e4c:	88 24       	eor	r8, r8
     e4e:	99 24       	eor	r9, r9
     e50:	98 01       	movw	r18, r16
     e52:	87 01       	movw	r16, r14
     e54:	20 70       	andi	r18, 0x00	; 0
     e56:	30 70       	andi	r19, 0x00	; 0
     e58:	65 96       	adiw	r28, 0x15	; 21
     e5a:	0c af       	std	Y+60, r16	; 0x3c
     e5c:	1d af       	std	Y+61, r17	; 0x3d
     e5e:	2e af       	std	Y+62, r18	; 0x3e
     e60:	3f af       	std	Y+63, r19	; 0x3f
     e62:	65 97       	sbiw	r28, 0x15	; 21
     e64:	c6 01       	movw	r24, r12
     e66:	b5 01       	movw	r22, r10
     e68:	a4 01       	movw	r20, r8
     e6a:	93 01       	movw	r18, r6
     e6c:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     e70:	7b 01       	movw	r14, r22
     e72:	8c 01       	movw	r16, r24
     e74:	c6 01       	movw	r24, r12
     e76:	b5 01       	movw	r22, r10
     e78:	a4 01       	movw	r20, r8
     e7a:	93 01       	movw	r18, r6
     e7c:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     e80:	c9 01       	movw	r24, r18
     e82:	da 01       	movw	r26, r20
     e84:	1c 01       	movw	r2, r24
     e86:	2d 01       	movw	r4, r26
     e88:	c2 01       	movw	r24, r4
     e8a:	b1 01       	movw	r22, r2
     e8c:	65 96       	adiw	r28, 0x15	; 21
     e8e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e90:	3d ad       	ldd	r19, Y+61	; 0x3d
     e92:	4e ad       	ldd	r20, Y+62	; 0x3e
     e94:	5f ad       	ldd	r21, Y+63	; 0x3f
     e96:	65 97       	sbiw	r28, 0x15	; 21
     e98:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	87 01       	movw	r16, r14
     ea2:	ff 24       	eor	r15, r15
     ea4:	ee 24       	eor	r14, r14
     ea6:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ea8:	be 8c       	ldd	r11, Y+30	; 0x1e
     eaa:	cf 8c       	ldd	r12, Y+31	; 0x1f
     eac:	d8 a0       	ldd	r13, Y+32	; 0x20
     eae:	c6 01       	movw	r24, r12
     eb0:	aa 27       	eor	r26, r26
     eb2:	bb 27       	eor	r27, r27
     eb4:	57 01       	movw	r10, r14
     eb6:	68 01       	movw	r12, r16
     eb8:	a8 2a       	or	r10, r24
     eba:	b9 2a       	or	r11, r25
     ebc:	ca 2a       	or	r12, r26
     ebe:	db 2a       	or	r13, r27
     ec0:	a2 16       	cp	r10, r18
     ec2:	b3 06       	cpc	r11, r19
     ec4:	c4 06       	cpc	r12, r20
     ec6:	d5 06       	cpc	r13, r21
     ec8:	00 f5       	brcc	.+64     	; 0xf0a <__stack+0x6ab>
     eca:	08 94       	sec
     ecc:	21 08       	sbc	r2, r1
     ece:	31 08       	sbc	r3, r1
     ed0:	41 08       	sbc	r4, r1
     ed2:	51 08       	sbc	r5, r1
     ed4:	ed a0       	ldd	r14, Y+37	; 0x25
     ed6:	fe a0       	ldd	r15, Y+38	; 0x26
     ed8:	0f a1       	ldd	r16, Y+39	; 0x27
     eda:	18 a5       	ldd	r17, Y+40	; 0x28
     edc:	ae 0c       	add	r10, r14
     ede:	bf 1c       	adc	r11, r15
     ee0:	c0 1e       	adc	r12, r16
     ee2:	d1 1e       	adc	r13, r17
     ee4:	ae 14       	cp	r10, r14
     ee6:	bf 04       	cpc	r11, r15
     ee8:	c0 06       	cpc	r12, r16
     eea:	d1 06       	cpc	r13, r17
     eec:	70 f0       	brcs	.+28     	; 0xf0a <__stack+0x6ab>
     eee:	a2 16       	cp	r10, r18
     ef0:	b3 06       	cpc	r11, r19
     ef2:	c4 06       	cpc	r12, r20
     ef4:	d5 06       	cpc	r13, r21
     ef6:	48 f4       	brcc	.+18     	; 0xf0a <__stack+0x6ab>
     ef8:	08 94       	sec
     efa:	21 08       	sbc	r2, r1
     efc:	31 08       	sbc	r3, r1
     efe:	41 08       	sbc	r4, r1
     f00:	51 08       	sbc	r5, r1
     f02:	ae 0c       	add	r10, r14
     f04:	bf 1c       	adc	r11, r15
     f06:	c0 1e       	adc	r12, r16
     f08:	d1 1e       	adc	r13, r17
     f0a:	a2 1a       	sub	r10, r18
     f0c:	b3 0a       	sbc	r11, r19
     f0e:	c4 0a       	sbc	r12, r20
     f10:	d5 0a       	sbc	r13, r21
     f12:	c6 01       	movw	r24, r12
     f14:	b5 01       	movw	r22, r10
     f16:	a4 01       	movw	r20, r8
     f18:	93 01       	movw	r18, r6
     f1a:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     f1e:	7b 01       	movw	r14, r22
     f20:	8c 01       	movw	r16, r24
     f22:	c6 01       	movw	r24, r12
     f24:	b5 01       	movw	r22, r10
     f26:	a4 01       	movw	r20, r8
     f28:	93 01       	movw	r18, r6
     f2a:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
     f2e:	c9 01       	movw	r24, r18
     f30:	da 01       	movw	r26, r20
     f32:	3c 01       	movw	r6, r24
     f34:	4d 01       	movw	r8, r26
     f36:	c4 01       	movw	r24, r8
     f38:	b3 01       	movw	r22, r6
     f3a:	65 96       	adiw	r28, 0x15	; 21
     f3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     f3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     f40:	4e ad       	ldd	r20, Y+62	; 0x3e
     f42:	5f ad       	ldd	r21, Y+63	; 0x3f
     f44:	65 97       	sbiw	r28, 0x15	; 21
     f46:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
     f4a:	9b 01       	movw	r18, r22
     f4c:	ac 01       	movw	r20, r24
     f4e:	87 01       	movw	r16, r14
     f50:	ff 24       	eor	r15, r15
     f52:	ee 24       	eor	r14, r14
     f54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f56:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f58:	af 8d       	ldd	r26, Y+31	; 0x1f
     f5a:	b8 a1       	ldd	r27, Y+32	; 0x20
     f5c:	a0 70       	andi	r26, 0x00	; 0
     f5e:	b0 70       	andi	r27, 0x00	; 0
     f60:	57 01       	movw	r10, r14
     f62:	68 01       	movw	r12, r16
     f64:	a8 2a       	or	r10, r24
     f66:	b9 2a       	or	r11, r25
     f68:	ca 2a       	or	r12, r26
     f6a:	db 2a       	or	r13, r27
     f6c:	a2 16       	cp	r10, r18
     f6e:	b3 06       	cpc	r11, r19
     f70:	c4 06       	cpc	r12, r20
     f72:	d5 06       	cpc	r13, r21
     f74:	00 f5       	brcc	.+64     	; 0xfb6 <__stack+0x757>
     f76:	08 94       	sec
     f78:	61 08       	sbc	r6, r1
     f7a:	71 08       	sbc	r7, r1
     f7c:	81 08       	sbc	r8, r1
     f7e:	91 08       	sbc	r9, r1
     f80:	6d a1       	ldd	r22, Y+37	; 0x25
     f82:	7e a1       	ldd	r23, Y+38	; 0x26
     f84:	8f a1       	ldd	r24, Y+39	; 0x27
     f86:	98 a5       	ldd	r25, Y+40	; 0x28
     f88:	a6 0e       	add	r10, r22
     f8a:	b7 1e       	adc	r11, r23
     f8c:	c8 1e       	adc	r12, r24
     f8e:	d9 1e       	adc	r13, r25
     f90:	a6 16       	cp	r10, r22
     f92:	b7 06       	cpc	r11, r23
     f94:	c8 06       	cpc	r12, r24
     f96:	d9 06       	cpc	r13, r25
     f98:	70 f0       	brcs	.+28     	; 0xfb6 <__stack+0x757>
     f9a:	a2 16       	cp	r10, r18
     f9c:	b3 06       	cpc	r11, r19
     f9e:	c4 06       	cpc	r12, r20
     fa0:	d5 06       	cpc	r13, r21
     fa2:	48 f4       	brcc	.+18     	; 0xfb6 <__stack+0x757>
     fa4:	08 94       	sec
     fa6:	61 08       	sbc	r6, r1
     fa8:	71 08       	sbc	r7, r1
     faa:	81 08       	sbc	r8, r1
     fac:	91 08       	sbc	r9, r1
     fae:	a6 0e       	add	r10, r22
     fb0:	b7 1e       	adc	r11, r23
     fb2:	c8 1e       	adc	r12, r24
     fb4:	d9 1e       	adc	r13, r25
     fb6:	d6 01       	movw	r26, r12
     fb8:	c5 01       	movw	r24, r10
     fba:	82 1b       	sub	r24, r18
     fbc:	93 0b       	sbc	r25, r19
     fbe:	a4 0b       	sbc	r26, r20
     fc0:	b5 0b       	sbc	r27, r21
     fc2:	89 8f       	std	Y+25, r24	; 0x19
     fc4:	9a 8f       	std	Y+26, r25	; 0x1a
     fc6:	ab 8f       	std	Y+27, r26	; 0x1b
     fc8:	bc 8f       	std	Y+28, r27	; 0x1c
     fca:	d1 01       	movw	r26, r2
     fcc:	99 27       	eor	r25, r25
     fce:	88 27       	eor	r24, r24
     fd0:	64 01       	movw	r12, r8
     fd2:	53 01       	movw	r10, r6
     fd4:	a8 2a       	or	r10, r24
     fd6:	b9 2a       	or	r11, r25
     fd8:	ca 2a       	or	r12, r26
     fda:	db 2a       	or	r13, r27
     fdc:	a9 aa       	std	Y+49, r10	; 0x31
     fde:	ba aa       	std	Y+50, r11	; 0x32
     fe0:	cb aa       	std	Y+51, r12	; 0x33
     fe2:	dc aa       	std	Y+52, r13	; 0x34
     fe4:	86 01       	movw	r16, r12
     fe6:	75 01       	movw	r14, r10
     fe8:	2f ef       	ldi	r18, 0xFF	; 255
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	e2 22       	and	r14, r18
     ff2:	f3 22       	and	r15, r19
     ff4:	04 23       	and	r16, r20
     ff6:	15 23       	and	r17, r21
     ff8:	a6 01       	movw	r20, r12
     ffa:	66 27       	eor	r22, r22
     ffc:	77 27       	eor	r23, r23
     ffe:	6d 96       	adiw	r28, 0x1d	; 29
    1000:	4c af       	std	Y+60, r20	; 0x3c
    1002:	5d af       	std	Y+61, r21	; 0x3d
    1004:	6e af       	std	Y+62, r22	; 0x3e
    1006:	7f af       	std	Y+63, r23	; 0x3f
    1008:	6d 97       	sbiw	r28, 0x1d	; 29
    100a:	a9 a0       	ldd	r10, Y+33	; 0x21
    100c:	ba a0       	ldd	r11, Y+34	; 0x22
    100e:	cb a0       	ldd	r12, Y+35	; 0x23
    1010:	dc a0       	ldd	r13, Y+36	; 0x24
    1012:	6f ef       	ldi	r22, 0xFF	; 255
    1014:	7f ef       	ldi	r23, 0xFF	; 255
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a6 22       	and	r10, r22
    101c:	b7 22       	and	r11, r23
    101e:	c8 22       	and	r12, r24
    1020:	d9 22       	and	r13, r25
    1022:	89 a1       	ldd	r24, Y+33	; 0x21
    1024:	9a a1       	ldd	r25, Y+34	; 0x22
    1026:	ab a1       	ldd	r26, Y+35	; 0x23
    1028:	bc a1       	ldd	r27, Y+36	; 0x24
    102a:	1d 01       	movw	r2, r26
    102c:	44 24       	eor	r4, r4
    102e:	55 24       	eor	r5, r5
    1030:	c8 01       	movw	r24, r16
    1032:	b7 01       	movw	r22, r14
    1034:	a6 01       	movw	r20, r12
    1036:	95 01       	movw	r18, r10
    1038:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    103c:	69 96       	adiw	r28, 0x19	; 25
    103e:	6c af       	std	Y+60, r22	; 0x3c
    1040:	7d af       	std	Y+61, r23	; 0x3d
    1042:	8e af       	std	Y+62, r24	; 0x3e
    1044:	9f af       	std	Y+63, r25	; 0x3f
    1046:	69 97       	sbiw	r28, 0x19	; 25
    1048:	c8 01       	movw	r24, r16
    104a:	b7 01       	movw	r22, r14
    104c:	a2 01       	movw	r20, r4
    104e:	91 01       	movw	r18, r2
    1050:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1054:	3b 01       	movw	r6, r22
    1056:	4c 01       	movw	r8, r24
    1058:	6d 96       	adiw	r28, 0x1d	; 29
    105a:	6c ad       	ldd	r22, Y+60	; 0x3c
    105c:	7d ad       	ldd	r23, Y+61	; 0x3d
    105e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1060:	9f ad       	ldd	r25, Y+63	; 0x3f
    1062:	6d 97       	sbiw	r28, 0x1d	; 29
    1064:	a6 01       	movw	r20, r12
    1066:	95 01       	movw	r18, r10
    1068:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    106c:	7b 01       	movw	r14, r22
    106e:	8c 01       	movw	r16, r24
    1070:	6d 96       	adiw	r28, 0x1d	; 29
    1072:	6c ad       	ldd	r22, Y+60	; 0x3c
    1074:	7d ad       	ldd	r23, Y+61	; 0x3d
    1076:	8e ad       	ldd	r24, Y+62	; 0x3e
    1078:	9f ad       	ldd	r25, Y+63	; 0x3f
    107a:	6d 97       	sbiw	r28, 0x1d	; 29
    107c:	a2 01       	movw	r20, r4
    107e:	91 01       	movw	r18, r2
    1080:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1084:	5b 01       	movw	r10, r22
    1086:	6c 01       	movw	r12, r24
    1088:	a8 01       	movw	r20, r16
    108a:	97 01       	movw	r18, r14
    108c:	26 0d       	add	r18, r6
    108e:	37 1d       	adc	r19, r7
    1090:	48 1d       	adc	r20, r8
    1092:	59 1d       	adc	r21, r9
    1094:	69 96       	adiw	r28, 0x19	; 25
    1096:	6c ac       	ldd	r6, Y+60	; 0x3c
    1098:	7d ac       	ldd	r7, Y+61	; 0x3d
    109a:	8e ac       	ldd	r8, Y+62	; 0x3e
    109c:	9f ac       	ldd	r9, Y+63	; 0x3f
    109e:	69 97       	sbiw	r28, 0x19	; 25
    10a0:	c4 01       	movw	r24, r8
    10a2:	aa 27       	eor	r26, r26
    10a4:	bb 27       	eor	r27, r27
    10a6:	28 0f       	add	r18, r24
    10a8:	39 1f       	adc	r19, r25
    10aa:	4a 1f       	adc	r20, r26
    10ac:	5b 1f       	adc	r21, r27
    10ae:	2e 15       	cp	r18, r14
    10b0:	3f 05       	cpc	r19, r15
    10b2:	40 07       	cpc	r20, r16
    10b4:	51 07       	cpc	r21, r17
    10b6:	48 f4       	brcc	.+18     	; 0x10ca <__stack+0x86b>
    10b8:	e1 2c       	mov	r14, r1
    10ba:	f1 2c       	mov	r15, r1
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	06 2f       	mov	r16, r22
    10c0:	11 2d       	mov	r17, r1
    10c2:	ae 0c       	add	r10, r14
    10c4:	bf 1c       	adc	r11, r15
    10c6:	c0 1e       	adc	r12, r16
    10c8:	d1 1e       	adc	r13, r17
    10ca:	ca 01       	movw	r24, r20
    10cc:	aa 27       	eor	r26, r26
    10ce:	bb 27       	eor	r27, r27
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	6a 0d       	add	r22, r10
    10d6:	7b 1d       	adc	r23, r11
    10d8:	8c 1d       	adc	r24, r12
    10da:	9d 1d       	adc	r25, r13
    10dc:	69 8c       	ldd	r6, Y+25	; 0x19
    10de:	7a 8c       	ldd	r7, Y+26	; 0x1a
    10e0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    10e2:	9c 8c       	ldd	r9, Y+28	; 0x1c
    10e4:	66 16       	cp	r6, r22
    10e6:	77 06       	cpc	r7, r23
    10e8:	88 06       	cpc	r8, r24
    10ea:	99 06       	cpc	r9, r25
    10ec:	40 f1       	brcs	.+80     	; 0x113e <__stack+0x8df>
    10ee:	66 15       	cp	r22, r6
    10f0:	77 05       	cpc	r23, r7
    10f2:	88 05       	cpc	r24, r8
    10f4:	99 05       	cpc	r25, r9
    10f6:	09 f0       	breq	.+2      	; 0x10fa <__stack+0x89b>
    10f8:	43 c0       	rjmp	.+134    	; 0x1180 <__stack+0x921>
    10fa:	d9 01       	movw	r26, r18
    10fc:	99 27       	eor	r25, r25
    10fe:	88 27       	eor	r24, r24
    1100:	69 96       	adiw	r28, 0x19	; 25
    1102:	2c ad       	ldd	r18, Y+60	; 0x3c
    1104:	3d ad       	ldd	r19, Y+61	; 0x3d
    1106:	4e ad       	ldd	r20, Y+62	; 0x3e
    1108:	5f ad       	ldd	r21, Y+63	; 0x3f
    110a:	69 97       	sbiw	r28, 0x19	; 25
    110c:	40 70       	andi	r20, 0x00	; 0
    110e:	50 70       	andi	r21, 0x00	; 0
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	a4 1f       	adc	r26, r20
    1116:	b5 1f       	adc	r27, r21
    1118:	2d a5       	ldd	r18, Y+45	; 0x2d
    111a:	3e a5       	ldd	r19, Y+46	; 0x2e
    111c:	4f a5       	ldd	r20, Y+47	; 0x2f
    111e:	58 a9       	ldd	r21, Y+48	; 0x30
    1120:	6e 96       	adiw	r28, 0x1e	; 30
    1122:	0f ac       	ldd	r0, Y+63	; 0x3f
    1124:	6e 97       	sbiw	r28, 0x1e	; 30
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <__stack+0x8d1>
    1128:	22 0f       	add	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	44 1f       	adc	r20, r20
    112e:	55 1f       	adc	r21, r21
    1130:	0a 94       	dec	r0
    1132:	d2 f7       	brpl	.-12     	; 0x1128 <__stack+0x8c9>
    1134:	28 17       	cp	r18, r24
    1136:	39 07       	cpc	r19, r25
    1138:	4a 07       	cpc	r20, r26
    113a:	5b 07       	cpc	r21, r27
    113c:	08 f5       	brcc	.+66     	; 0x1180 <__stack+0x921>
    113e:	09 a9       	ldd	r16, Y+49	; 0x31
    1140:	1a a9       	ldd	r17, Y+50	; 0x32
    1142:	2b a9       	ldd	r18, Y+51	; 0x33
    1144:	3c a9       	ldd	r19, Y+52	; 0x34
    1146:	01 50       	subi	r16, 0x01	; 1
    1148:	10 40       	sbci	r17, 0x00	; 0
    114a:	20 40       	sbci	r18, 0x00	; 0
    114c:	30 40       	sbci	r19, 0x00	; 0
    114e:	09 ab       	std	Y+49, r16	; 0x31
    1150:	1a ab       	std	Y+50, r17	; 0x32
    1152:	2b ab       	std	Y+51, r18	; 0x33
    1154:	3c ab       	std	Y+52, r19	; 0x34
    1156:	14 c0       	rjmp	.+40     	; 0x1180 <__stack+0x921>
    1158:	66 24       	eor	r6, r6
    115a:	77 24       	eor	r7, r7
    115c:	43 01       	movw	r8, r6
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	29 ab       	std	Y+49, r18	; 0x31
    1168:	3a ab       	std	Y+50, r19	; 0x32
    116a:	4b ab       	std	Y+51, r20	; 0x33
    116c:	5c ab       	std	Y+52, r21	; 0x34
    116e:	0b c0       	rjmp	.+22     	; 0x1186 <__stack+0x927>
    1170:	66 24       	eor	r6, r6
    1172:	77 24       	eor	r7, r7
    1174:	43 01       	movw	r8, r6
    1176:	19 aa       	std	Y+49, r1	; 0x31
    1178:	1a aa       	std	Y+50, r1	; 0x32
    117a:	1b aa       	std	Y+51, r1	; 0x33
    117c:	1c aa       	std	Y+52, r1	; 0x34
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <__stack+0x927>
    1180:	66 24       	eor	r6, r6
    1182:	77 24       	eor	r7, r7
    1184:	43 01       	movw	r8, r6
    1186:	fe 01       	movw	r30, r28
    1188:	71 96       	adiw	r30, 0x11	; 17
    118a:	88 e0       	ldi	r24, 0x08	; 8
    118c:	df 01       	movw	r26, r30
    118e:	1d 92       	st	X+, r1
    1190:	8a 95       	dec	r24
    1192:	e9 f7       	brne	.-6      	; 0x118e <__stack+0x92f>
    1194:	a9 a8       	ldd	r10, Y+49	; 0x31
    1196:	ba a8       	ldd	r11, Y+50	; 0x32
    1198:	cb a8       	ldd	r12, Y+51	; 0x33
    119a:	dc a8       	ldd	r13, Y+52	; 0x34
    119c:	a9 8a       	std	Y+17, r10	; 0x11
    119e:	ba 8a       	std	Y+18, r11	; 0x12
    11a0:	cb 8a       	std	Y+19, r12	; 0x13
    11a2:	dc 8a       	std	Y+20, r13	; 0x14
    11a4:	6d 8a       	std	Y+21, r6	; 0x15
    11a6:	7e 8a       	std	Y+22, r7	; 0x16
    11a8:	8f 8a       	std	Y+23, r8	; 0x17
    11aa:	98 8e       	std	Y+24, r9	; 0x18
    11ac:	29 a9       	ldd	r18, Y+49	; 0x31
    11ae:	3a 89       	ldd	r19, Y+18	; 0x12
    11b0:	4b 89       	ldd	r20, Y+19	; 0x13
    11b2:	5c 89       	ldd	r21, Y+20	; 0x14
    11b4:	66 2d       	mov	r22, r6
    11b6:	7e 89       	ldd	r23, Y+22	; 0x16
    11b8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ba:	98 8d       	ldd	r25, Y+24	; 0x18
    11bc:	c2 5a       	subi	r28, 0xA2	; 162
    11be:	df 4f       	sbci	r29, 0xFF	; 255
    11c0:	e2 e1       	ldi	r30, 0x12	; 18
    11c2:	0c 94 63 3a 	jmp	0x74c6	; 0x74c6 <__epilogue_restores__>

000011c6 <__umoddi3>:
    11c6:	ab e5       	ldi	r26, 0x5B	; 91
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e9 ee       	ldi	r30, 0xE9	; 233
    11cc:	f8 e0       	ldi	r31, 0x08	; 8
    11ce:	0c 94 47 3a 	jmp	0x748e	; 0x748e <__prologue_saves__>
    11d2:	a8 e0       	ldi	r26, 0x08	; 8
    11d4:	4e 01       	movw	r8, r28
    11d6:	08 94       	sec
    11d8:	81 1c       	adc	r8, r1
    11da:	91 1c       	adc	r9, r1
    11dc:	f4 01       	movw	r30, r8
    11de:	6a 2e       	mov	r6, r26
    11e0:	11 92       	st	Z+, r1
    11e2:	6a 94       	dec	r6
    11e4:	e9 f7       	brne	.-6      	; 0x11e0 <__umoddi3+0x1a>
    11e6:	29 83       	std	Y+1, r18	; 0x01
    11e8:	3a 83       	std	Y+2, r19	; 0x02
    11ea:	4b 83       	std	Y+3, r20	; 0x03
    11ec:	5c 83       	std	Y+4, r21	; 0x04
    11ee:	6d 83       	std	Y+5, r22	; 0x05
    11f0:	7e 83       	std	Y+6, r23	; 0x06
    11f2:	8f 83       	std	Y+7, r24	; 0x07
    11f4:	98 87       	std	Y+8, r25	; 0x08
    11f6:	ce 01       	movw	r24, r28
    11f8:	09 96       	adiw	r24, 0x09	; 9
    11fa:	fc 01       	movw	r30, r24
    11fc:	11 92       	st	Z+, r1
    11fe:	aa 95       	dec	r26
    1200:	e9 f7       	brne	.-6      	; 0x11fc <__umoddi3+0x36>
    1202:	a9 86       	std	Y+9, r10	; 0x09
    1204:	ba 86       	std	Y+10, r11	; 0x0a
    1206:	cb 86       	std	Y+11, r12	; 0x0b
    1208:	dc 86       	std	Y+12, r13	; 0x0c
    120a:	ed 86       	std	Y+13, r14	; 0x0d
    120c:	fe 86       	std	Y+14, r15	; 0x0e
    120e:	0f 87       	std	Y+15, r16	; 0x0f
    1210:	18 8b       	std	Y+16, r17	; 0x10
    1212:	29 84       	ldd	r2, Y+9	; 0x09
    1214:	3a 84       	ldd	r3, Y+10	; 0x0a
    1216:	4b 84       	ldd	r4, Y+11	; 0x0b
    1218:	5c 84       	ldd	r5, Y+12	; 0x0c
    121a:	ad 84       	ldd	r10, Y+13	; 0x0d
    121c:	be 84       	ldd	r11, Y+14	; 0x0e
    121e:	cf 84       	ldd	r12, Y+15	; 0x0f
    1220:	d8 88       	ldd	r13, Y+16	; 0x10
    1222:	29 81       	ldd	r18, Y+1	; 0x01
    1224:	3a 81       	ldd	r19, Y+2	; 0x02
    1226:	4b 81       	ldd	r20, Y+3	; 0x03
    1228:	5c 81       	ldd	r21, Y+4	; 0x04
    122a:	69 96       	adiw	r28, 0x19	; 25
    122c:	2f af       	std	Y+63, r18	; 0x3f
    122e:	69 97       	sbiw	r28, 0x19	; 25
    1230:	6a 96       	adiw	r28, 0x1a	; 26
    1232:	3f af       	std	Y+63, r19	; 0x3f
    1234:	6a 97       	sbiw	r28, 0x1a	; 26
    1236:	6b 96       	adiw	r28, 0x1b	; 27
    1238:	4f af       	std	Y+63, r20	; 0x3f
    123a:	6b 97       	sbiw	r28, 0x1b	; 27
    123c:	6c 96       	adiw	r28, 0x1c	; 28
    123e:	5f af       	std	Y+63, r21	; 0x3f
    1240:	6c 97       	sbiw	r28, 0x1c	; 28
    1242:	6c 96       	adiw	r28, 0x1c	; 28
    1244:	6c ac       	ldd	r6, Y+60	; 0x3c
    1246:	7d ac       	ldd	r7, Y+61	; 0x3d
    1248:	8e ac       	ldd	r8, Y+62	; 0x3e
    124a:	9f ac       	ldd	r9, Y+63	; 0x3f
    124c:	6c 97       	sbiw	r28, 0x1c	; 28
    124e:	69 aa       	std	Y+49, r6	; 0x31
    1250:	7a aa       	std	Y+50, r7	; 0x32
    1252:	8b aa       	std	Y+51, r8	; 0x33
    1254:	9c aa       	std	Y+52, r9	; 0x34
    1256:	6d 81       	ldd	r22, Y+5	; 0x05
    1258:	7e 81       	ldd	r23, Y+6	; 0x06
    125a:	8f 81       	ldd	r24, Y+7	; 0x07
    125c:	98 85       	ldd	r25, Y+8	; 0x08
    125e:	3b 01       	movw	r6, r22
    1260:	4c 01       	movw	r8, r24
    1262:	6d aa       	std	Y+53, r6	; 0x35
    1264:	7e aa       	std	Y+54, r7	; 0x36
    1266:	8f aa       	std	Y+55, r8	; 0x37
    1268:	98 ae       	std	Y+56, r9	; 0x38
    126a:	a1 14       	cp	r10, r1
    126c:	b1 04       	cpc	r11, r1
    126e:	c1 04       	cpc	r12, r1
    1270:	d1 04       	cpc	r13, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <__umoddi3+0xb0>
    1274:	04 c3       	rjmp	.+1544   	; 0x187e <__umoddi3+0x6b8>
    1276:	62 14       	cp	r6, r2
    1278:	73 04       	cpc	r7, r3
    127a:	84 04       	cpc	r8, r4
    127c:	95 04       	cpc	r9, r5
    127e:	08 f0       	brcs	.+2      	; 0x1282 <__umoddi3+0xbc>
    1280:	00 c1       	rjmp	.+512    	; 0x1482 <__umoddi3+0x2bc>
    1282:	00 e0       	ldi	r16, 0x00	; 0
    1284:	20 16       	cp	r2, r16
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	30 06       	cpc	r3, r16
    128a:	01 e0       	ldi	r16, 0x01	; 1
    128c:	40 06       	cpc	r4, r16
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	50 06       	cpc	r5, r16
    1292:	88 f4       	brcc	.+34     	; 0x12b6 <__umoddi3+0xf0>
    1294:	1f ef       	ldi	r17, 0xFF	; 255
    1296:	21 16       	cp	r2, r17
    1298:	31 04       	cpc	r3, r1
    129a:	41 04       	cpc	r4, r1
    129c:	51 04       	cpc	r5, r1
    129e:	39 f0       	breq	.+14     	; 0x12ae <__umoddi3+0xe8>
    12a0:	30 f0       	brcs	.+12     	; 0x12ae <__umoddi3+0xe8>
    12a2:	88 e0       	ldi	r24, 0x08	; 8
    12a4:	e8 2e       	mov	r14, r24
    12a6:	f1 2c       	mov	r15, r1
    12a8:	01 2d       	mov	r16, r1
    12aa:	11 2d       	mov	r17, r1
    12ac:	18 c0       	rjmp	.+48     	; 0x12de <__umoddi3+0x118>
    12ae:	ee 24       	eor	r14, r14
    12b0:	ff 24       	eor	r15, r15
    12b2:	87 01       	movw	r16, r14
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <__umoddi3+0x118>
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	24 16       	cp	r2, r20
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	34 06       	cpc	r3, r20
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	44 06       	cpc	r4, r20
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	54 06       	cpc	r5, r20
    12c6:	30 f0       	brcs	.+12     	; 0x12d4 <__umoddi3+0x10e>
    12c8:	b8 e1       	ldi	r27, 0x18	; 24
    12ca:	eb 2e       	mov	r14, r27
    12cc:	f1 2c       	mov	r15, r1
    12ce:	01 2d       	mov	r16, r1
    12d0:	11 2d       	mov	r17, r1
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <__umoddi3+0x118>
    12d4:	a0 e1       	ldi	r26, 0x10	; 16
    12d6:	ea 2e       	mov	r14, r26
    12d8:	f1 2c       	mov	r15, r1
    12da:	01 2d       	mov	r16, r1
    12dc:	11 2d       	mov	r17, r1
    12de:	d2 01       	movw	r26, r4
    12e0:	c1 01       	movw	r24, r2
    12e2:	0e 2c       	mov	r0, r14
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <__umoddi3+0x128>
    12e6:	b6 95       	lsr	r27
    12e8:	a7 95       	ror	r26
    12ea:	97 95       	ror	r25
    12ec:	87 95       	ror	r24
    12ee:	0a 94       	dec	r0
    12f0:	d2 f7       	brpl	.-12     	; 0x12e6 <__umoddi3+0x120>
    12f2:	8d 56       	subi	r24, 0x6D	; 109
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	dc 01       	movw	r26, r24
    12f8:	2c 91       	ld	r18, X
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 e0       	ldi	r26, 0x00	; 0
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	8e 19       	sub	r24, r14
    1304:	9f 09       	sbc	r25, r15
    1306:	a0 0b       	sbc	r26, r16
    1308:	b1 0b       	sbc	r27, r17
    130a:	5c 01       	movw	r10, r24
    130c:	6d 01       	movw	r12, r26
    130e:	a2 1a       	sub	r10, r18
    1310:	b1 08       	sbc	r11, r1
    1312:	c1 08       	sbc	r12, r1
    1314:	d1 08       	sbc	r13, r1
    1316:	a9 ae       	std	Y+57, r10	; 0x39
    1318:	ba ae       	std	Y+58, r11	; 0x3a
    131a:	cb ae       	std	Y+59, r12	; 0x3b
    131c:	dc ae       	std	Y+60, r13	; 0x3c
    131e:	a1 14       	cp	r10, r1
    1320:	b1 04       	cpc	r11, r1
    1322:	c1 04       	cpc	r12, r1
    1324:	d1 04       	cpc	r13, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <__umoddi3+0x164>
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <__umoddi3+0x1e2>
    132a:	69 ad       	ldd	r22, Y+57	; 0x39
    132c:	06 2e       	mov	r0, r22
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <__umoddi3+0x172>
    1330:	22 0c       	add	r2, r2
    1332:	33 1c       	adc	r3, r3
    1334:	44 1c       	adc	r4, r4
    1336:	55 1c       	adc	r5, r5
    1338:	0a 94       	dec	r0
    133a:	d2 f7       	brpl	.-12     	; 0x1330 <__umoddi3+0x16a>
    133c:	a4 01       	movw	r20, r8
    133e:	93 01       	movw	r18, r6
    1340:	06 2e       	mov	r0, r22
    1342:	04 c0       	rjmp	.+8      	; 0x134c <__umoddi3+0x186>
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	44 1f       	adc	r20, r20
    134a:	55 1f       	adc	r21, r21
    134c:	0a 94       	dec	r0
    134e:	d2 f7       	brpl	.-12     	; 0x1344 <__umoddi3+0x17e>
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	8a 19       	sub	r24, r10
    1356:	9b 09       	sbc	r25, r11
    1358:	6c 96       	adiw	r28, 0x1c	; 28
    135a:	cc ac       	ldd	r12, Y+60	; 0x3c
    135c:	dd ac       	ldd	r13, Y+61	; 0x3d
    135e:	ee ac       	ldd	r14, Y+62	; 0x3e
    1360:	ff ac       	ldd	r15, Y+63	; 0x3f
    1362:	6c 97       	sbiw	r28, 0x1c	; 28
    1364:	04 c0       	rjmp	.+8      	; 0x136e <__umoddi3+0x1a8>
    1366:	f6 94       	lsr	r15
    1368:	e7 94       	ror	r14
    136a:	d7 94       	ror	r13
    136c:	c7 94       	ror	r12
    136e:	8a 95       	dec	r24
    1370:	d2 f7       	brpl	.-12     	; 0x1366 <__umoddi3+0x1a0>
    1372:	87 01       	movw	r16, r14
    1374:	76 01       	movw	r14, r12
    1376:	e2 2a       	or	r14, r18
    1378:	f3 2a       	or	r15, r19
    137a:	04 2b       	or	r16, r20
    137c:	15 2b       	or	r17, r21
    137e:	ed aa       	std	Y+53, r14	; 0x35
    1380:	fe aa       	std	Y+54, r15	; 0x36
    1382:	0f ab       	std	Y+55, r16	; 0x37
    1384:	18 af       	std	Y+56, r17	; 0x38
    1386:	6c 96       	adiw	r28, 0x1c	; 28
    1388:	8c ad       	ldd	r24, Y+60	; 0x3c
    138a:	9d ad       	ldd	r25, Y+61	; 0x3d
    138c:	ae ad       	ldd	r26, Y+62	; 0x3e
    138e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1390:	6c 97       	sbiw	r28, 0x1c	; 28
    1392:	04 c0       	rjmp	.+8      	; 0x139c <__umoddi3+0x1d6>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	aa 1f       	adc	r26, r26
    139a:	bb 1f       	adc	r27, r27
    139c:	6a 95       	dec	r22
    139e:	d2 f7       	brpl	.-12     	; 0x1394 <__umoddi3+0x1ce>
    13a0:	89 ab       	std	Y+49, r24	; 0x31
    13a2:	9a ab       	std	Y+50, r25	; 0x32
    13a4:	ab ab       	std	Y+51, r26	; 0x33
    13a6:	bc ab       	std	Y+52, r27	; 0x34
    13a8:	32 01       	movw	r6, r4
    13aa:	88 24       	eor	r8, r8
    13ac:	99 24       	eor	r9, r9
    13ae:	b2 01       	movw	r22, r4
    13b0:	a1 01       	movw	r20, r2
    13b2:	60 70       	andi	r22, 0x00	; 0
    13b4:	70 70       	andi	r23, 0x00	; 0
    13b6:	21 96       	adiw	r28, 0x01	; 1
    13b8:	4c af       	std	Y+60, r20	; 0x3c
    13ba:	5d af       	std	Y+61, r21	; 0x3d
    13bc:	6e af       	std	Y+62, r22	; 0x3e
    13be:	7f af       	std	Y+63, r23	; 0x3f
    13c0:	21 97       	sbiw	r28, 0x01	; 1
    13c2:	6d a9       	ldd	r22, Y+53	; 0x35
    13c4:	7e a9       	ldd	r23, Y+54	; 0x36
    13c6:	8f a9       	ldd	r24, Y+55	; 0x37
    13c8:	98 ad       	ldd	r25, Y+56	; 0x38
    13ca:	a4 01       	movw	r20, r8
    13cc:	93 01       	movw	r18, r6
    13ce:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    13d2:	7b 01       	movw	r14, r22
    13d4:	8c 01       	movw	r16, r24
    13d6:	6d a9       	ldd	r22, Y+53	; 0x35
    13d8:	7e a9       	ldd	r23, Y+54	; 0x36
    13da:	8f a9       	ldd	r24, Y+55	; 0x37
    13dc:	98 ad       	ldd	r25, Y+56	; 0x38
    13de:	a4 01       	movw	r20, r8
    13e0:	93 01       	movw	r18, r6
    13e2:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    13e6:	ca 01       	movw	r24, r20
    13e8:	b9 01       	movw	r22, r18
    13ea:	21 96       	adiw	r28, 0x01	; 1
    13ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    13ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    13f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    13f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    13f4:	21 97       	sbiw	r28, 0x01	; 1
    13f6:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    13fa:	9b 01       	movw	r18, r22
    13fc:	ac 01       	movw	r20, r24
    13fe:	87 01       	movw	r16, r14
    1400:	ff 24       	eor	r15, r15
    1402:	ee 24       	eor	r14, r14
    1404:	a9 a8       	ldd	r10, Y+49	; 0x31
    1406:	ba a8       	ldd	r11, Y+50	; 0x32
    1408:	cb a8       	ldd	r12, Y+51	; 0x33
    140a:	dc a8       	ldd	r13, Y+52	; 0x34
    140c:	c6 01       	movw	r24, r12
    140e:	aa 27       	eor	r26, r26
    1410:	bb 27       	eor	r27, r27
    1412:	57 01       	movw	r10, r14
    1414:	68 01       	movw	r12, r16
    1416:	a8 2a       	or	r10, r24
    1418:	b9 2a       	or	r11, r25
    141a:	ca 2a       	or	r12, r26
    141c:	db 2a       	or	r13, r27
    141e:	a2 16       	cp	r10, r18
    1420:	b3 06       	cpc	r11, r19
    1422:	c4 06       	cpc	r12, r20
    1424:	d5 06       	cpc	r13, r21
    1426:	90 f4       	brcc	.+36     	; 0x144c <__umoddi3+0x286>
    1428:	a2 0c       	add	r10, r2
    142a:	b3 1c       	adc	r11, r3
    142c:	c4 1c       	adc	r12, r4
    142e:	d5 1c       	adc	r13, r5
    1430:	a2 14       	cp	r10, r2
    1432:	b3 04       	cpc	r11, r3
    1434:	c4 04       	cpc	r12, r4
    1436:	d5 04       	cpc	r13, r5
    1438:	48 f0       	brcs	.+18     	; 0x144c <__umoddi3+0x286>
    143a:	a2 16       	cp	r10, r18
    143c:	b3 06       	cpc	r11, r19
    143e:	c4 06       	cpc	r12, r20
    1440:	d5 06       	cpc	r13, r21
    1442:	20 f4       	brcc	.+8      	; 0x144c <__umoddi3+0x286>
    1444:	a2 0c       	add	r10, r2
    1446:	b3 1c       	adc	r11, r3
    1448:	c4 1c       	adc	r12, r4
    144a:	d5 1c       	adc	r13, r5
    144c:	a2 1a       	sub	r10, r18
    144e:	b3 0a       	sbc	r11, r19
    1450:	c4 0a       	sbc	r12, r20
    1452:	d5 0a       	sbc	r13, r21
    1454:	c6 01       	movw	r24, r12
    1456:	b5 01       	movw	r22, r10
    1458:	a4 01       	movw	r20, r8
    145a:	93 01       	movw	r18, r6
    145c:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1460:	7b 01       	movw	r14, r22
    1462:	8c 01       	movw	r16, r24
    1464:	c6 01       	movw	r24, r12
    1466:	b5 01       	movw	r22, r10
    1468:	a4 01       	movw	r20, r8
    146a:	93 01       	movw	r18, r6
    146c:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1470:	ca 01       	movw	r24, r20
    1472:	b9 01       	movw	r22, r18
    1474:	21 96       	adiw	r28, 0x01	; 1
    1476:	2c ad       	ldd	r18, Y+60	; 0x3c
    1478:	3d ad       	ldd	r19, Y+61	; 0x3d
    147a:	4e ad       	ldd	r20, Y+62	; 0x3e
    147c:	5f ad       	ldd	r21, Y+63	; 0x3f
    147e:	21 97       	sbiw	r28, 0x01	; 1
    1480:	ba c1       	rjmp	.+884    	; 0x17f6 <__umoddi3+0x630>
    1482:	21 14       	cp	r2, r1
    1484:	31 04       	cpc	r3, r1
    1486:	41 04       	cpc	r4, r1
    1488:	51 04       	cpc	r5, r1
    148a:	71 f4       	brne	.+28     	; 0x14a8 <__umoddi3+0x2e2>
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    14a0:	c9 01       	movw	r24, r18
    14a2:	da 01       	movw	r26, r20
    14a4:	1c 01       	movw	r2, r24
    14a6:	2d 01       	movw	r4, r26
    14a8:	00 e0       	ldi	r16, 0x00	; 0
    14aa:	20 16       	cp	r2, r16
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	30 06       	cpc	r3, r16
    14b0:	01 e0       	ldi	r16, 0x01	; 1
    14b2:	40 06       	cpc	r4, r16
    14b4:	00 e0       	ldi	r16, 0x00	; 0
    14b6:	50 06       	cpc	r5, r16
    14b8:	88 f4       	brcc	.+34     	; 0x14dc <__umoddi3+0x316>
    14ba:	1f ef       	ldi	r17, 0xFF	; 255
    14bc:	21 16       	cp	r2, r17
    14be:	31 04       	cpc	r3, r1
    14c0:	41 04       	cpc	r4, r1
    14c2:	51 04       	cpc	r5, r1
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <__umoddi3+0x30e>
    14c6:	30 f0       	brcs	.+12     	; 0x14d4 <__umoddi3+0x30e>
    14c8:	68 e0       	ldi	r22, 0x08	; 8
    14ca:	e6 2e       	mov	r14, r22
    14cc:	f1 2c       	mov	r15, r1
    14ce:	01 2d       	mov	r16, r1
    14d0:	11 2d       	mov	r17, r1
    14d2:	18 c0       	rjmp	.+48     	; 0x1504 <__umoddi3+0x33e>
    14d4:	ee 24       	eor	r14, r14
    14d6:	ff 24       	eor	r15, r15
    14d8:	87 01       	movw	r16, r14
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <__umoddi3+0x33e>
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	24 16       	cp	r2, r20
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	34 06       	cpc	r3, r20
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	44 06       	cpc	r4, r20
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	54 06       	cpc	r5, r20
    14ec:	30 f0       	brcs	.+12     	; 0x14fa <__umoddi3+0x334>
    14ee:	58 e1       	ldi	r21, 0x18	; 24
    14f0:	e5 2e       	mov	r14, r21
    14f2:	f1 2c       	mov	r15, r1
    14f4:	01 2d       	mov	r16, r1
    14f6:	11 2d       	mov	r17, r1
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <__umoddi3+0x33e>
    14fa:	40 e1       	ldi	r20, 0x10	; 16
    14fc:	e4 2e       	mov	r14, r20
    14fe:	f1 2c       	mov	r15, r1
    1500:	01 2d       	mov	r16, r1
    1502:	11 2d       	mov	r17, r1
    1504:	d2 01       	movw	r26, r4
    1506:	c1 01       	movw	r24, r2
    1508:	0e 2c       	mov	r0, r14
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <__umoddi3+0x34e>
    150c:	b6 95       	lsr	r27
    150e:	a7 95       	ror	r26
    1510:	97 95       	ror	r25
    1512:	87 95       	ror	r24
    1514:	0a 94       	dec	r0
    1516:	d2 f7       	brpl	.-12     	; 0x150c <__umoddi3+0x346>
    1518:	8d 56       	subi	r24, 0x6D	; 109
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	dc 01       	movw	r26, r24
    151e:	2c 91       	ld	r18, X
    1520:	30 e2       	ldi	r19, 0x20	; 32
    1522:	a3 2e       	mov	r10, r19
    1524:	b1 2c       	mov	r11, r1
    1526:	c1 2c       	mov	r12, r1
    1528:	d1 2c       	mov	r13, r1
    152a:	d6 01       	movw	r26, r12
    152c:	c5 01       	movw	r24, r10
    152e:	8e 19       	sub	r24, r14
    1530:	9f 09       	sbc	r25, r15
    1532:	a0 0b       	sbc	r26, r16
    1534:	b1 0b       	sbc	r27, r17
    1536:	7c 01       	movw	r14, r24
    1538:	8d 01       	movw	r16, r26
    153a:	e2 1a       	sub	r14, r18
    153c:	f1 08       	sbc	r15, r1
    153e:	01 09       	sbc	r16, r1
    1540:	11 09       	sbc	r17, r1
    1542:	e9 ae       	std	Y+57, r14	; 0x39
    1544:	fa ae       	std	Y+58, r15	; 0x3a
    1546:	0b af       	std	Y+59, r16	; 0x3b
    1548:	1c af       	std	Y+60, r17	; 0x3c
    154a:	e1 14       	cp	r14, r1
    154c:	f1 04       	cpc	r15, r1
    154e:	01 05       	cpc	r16, r1
    1550:	11 05       	cpc	r17, r1
    1552:	39 f4       	brne	.+14     	; 0x1562 <__umoddi3+0x39c>
    1554:	64 01       	movw	r12, r8
    1556:	53 01       	movw	r10, r6
    1558:	a2 18       	sub	r10, r2
    155a:	b3 08       	sbc	r11, r3
    155c:	c4 08       	sbc	r12, r4
    155e:	d5 08       	sbc	r13, r5
    1560:	e2 c0       	rjmp	.+452    	; 0x1726 <__umoddi3+0x560>
    1562:	f9 ac       	ldd	r15, Y+57	; 0x39
    1564:	68 96       	adiw	r28, 0x18	; 24
    1566:	ff ae       	std	Y+63, r15	; 0x3f
    1568:	68 97       	sbiw	r28, 0x18	; 24
    156a:	0f 2c       	mov	r0, r15
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <__umoddi3+0x3b0>
    156e:	22 0c       	add	r2, r2
    1570:	33 1c       	adc	r3, r3
    1572:	44 1c       	adc	r4, r4
    1574:	55 1c       	adc	r5, r5
    1576:	0a 94       	dec	r0
    1578:	d2 f7       	brpl	.-12     	; 0x156e <__umoddi3+0x3a8>
    157a:	8a 2d       	mov	r24, r10
    157c:	8f 19       	sub	r24, r15
    157e:	64 01       	movw	r12, r8
    1580:	53 01       	movw	r10, r6
    1582:	08 2e       	mov	r0, r24
    1584:	04 c0       	rjmp	.+8      	; 0x158e <__umoddi3+0x3c8>
    1586:	d6 94       	lsr	r13
    1588:	c7 94       	ror	r12
    158a:	b7 94       	ror	r11
    158c:	a7 94       	ror	r10
    158e:	0a 94       	dec	r0
    1590:	d2 f7       	brpl	.-12     	; 0x1586 <__umoddi3+0x3c0>
    1592:	a4 01       	movw	r20, r8
    1594:	93 01       	movw	r18, r6
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <__umoddi3+0x3da>
    1598:	22 0f       	add	r18, r18
    159a:	33 1f       	adc	r19, r19
    159c:	44 1f       	adc	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	fa 94       	dec	r15
    15a2:	d2 f7       	brpl	.-12     	; 0x1598 <__umoddi3+0x3d2>
    15a4:	6c 96       	adiw	r28, 0x1c	; 28
    15a6:	6c ac       	ldd	r6, Y+60	; 0x3c
    15a8:	7d ac       	ldd	r7, Y+61	; 0x3d
    15aa:	8e ac       	ldd	r8, Y+62	; 0x3e
    15ac:	9f ac       	ldd	r9, Y+63	; 0x3f
    15ae:	6c 97       	sbiw	r28, 0x1c	; 28
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <__umoddi3+0x3f4>
    15b2:	96 94       	lsr	r9
    15b4:	87 94       	ror	r8
    15b6:	77 94       	ror	r7
    15b8:	67 94       	ror	r6
    15ba:	8a 95       	dec	r24
    15bc:	d2 f7       	brpl	.-12     	; 0x15b2 <__umoddi3+0x3ec>
    15be:	84 01       	movw	r16, r8
    15c0:	73 01       	movw	r14, r6
    15c2:	e2 2a       	or	r14, r18
    15c4:	f3 2a       	or	r15, r19
    15c6:	04 2b       	or	r16, r20
    15c8:	15 2b       	or	r17, r21
    15ca:	ed a6       	std	Y+45, r14	; 0x2d
    15cc:	fe a6       	std	Y+46, r15	; 0x2e
    15ce:	0f a7       	std	Y+47, r16	; 0x2f
    15d0:	18 ab       	std	Y+48, r17	; 0x30
    15d2:	32 01       	movw	r6, r4
    15d4:	88 24       	eor	r8, r8
    15d6:	99 24       	eor	r9, r9
    15d8:	b2 01       	movw	r22, r4
    15da:	a1 01       	movw	r20, r2
    15dc:	60 70       	andi	r22, 0x00	; 0
    15de:	70 70       	andi	r23, 0x00	; 0
    15e0:	25 96       	adiw	r28, 0x05	; 5
    15e2:	4c af       	std	Y+60, r20	; 0x3c
    15e4:	5d af       	std	Y+61, r21	; 0x3d
    15e6:	6e af       	std	Y+62, r22	; 0x3e
    15e8:	7f af       	std	Y+63, r23	; 0x3f
    15ea:	25 97       	sbiw	r28, 0x05	; 5
    15ec:	c6 01       	movw	r24, r12
    15ee:	b5 01       	movw	r22, r10
    15f0:	a4 01       	movw	r20, r8
    15f2:	93 01       	movw	r18, r6
    15f4:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    15f8:	7b 01       	movw	r14, r22
    15fa:	8c 01       	movw	r16, r24
    15fc:	c6 01       	movw	r24, r12
    15fe:	b5 01       	movw	r22, r10
    1600:	a4 01       	movw	r20, r8
    1602:	93 01       	movw	r18, r6
    1604:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1608:	ca 01       	movw	r24, r20
    160a:	b9 01       	movw	r22, r18
    160c:	25 96       	adiw	r28, 0x05	; 5
    160e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1610:	3d ad       	ldd	r19, Y+61	; 0x3d
    1612:	4e ad       	ldd	r20, Y+62	; 0x3e
    1614:	5f ad       	ldd	r21, Y+63	; 0x3f
    1616:	25 97       	sbiw	r28, 0x05	; 5
    1618:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	87 01       	movw	r16, r14
    1622:	ff 24       	eor	r15, r15
    1624:	ee 24       	eor	r14, r14
    1626:	ad a4       	ldd	r10, Y+45	; 0x2d
    1628:	be a4       	ldd	r11, Y+46	; 0x2e
    162a:	cf a4       	ldd	r12, Y+47	; 0x2f
    162c:	d8 a8       	ldd	r13, Y+48	; 0x30
    162e:	c6 01       	movw	r24, r12
    1630:	aa 27       	eor	r26, r26
    1632:	bb 27       	eor	r27, r27
    1634:	5c 01       	movw	r10, r24
    1636:	6d 01       	movw	r12, r26
    1638:	ae 28       	or	r10, r14
    163a:	bf 28       	or	r11, r15
    163c:	c0 2a       	or	r12, r16
    163e:	d1 2a       	or	r13, r17
    1640:	a2 16       	cp	r10, r18
    1642:	b3 06       	cpc	r11, r19
    1644:	c4 06       	cpc	r12, r20
    1646:	d5 06       	cpc	r13, r21
    1648:	90 f4       	brcc	.+36     	; 0x166e <__umoddi3+0x4a8>
    164a:	a2 0c       	add	r10, r2
    164c:	b3 1c       	adc	r11, r3
    164e:	c4 1c       	adc	r12, r4
    1650:	d5 1c       	adc	r13, r5
    1652:	a2 14       	cp	r10, r2
    1654:	b3 04       	cpc	r11, r3
    1656:	c4 04       	cpc	r12, r4
    1658:	d5 04       	cpc	r13, r5
    165a:	48 f0       	brcs	.+18     	; 0x166e <__umoddi3+0x4a8>
    165c:	a2 16       	cp	r10, r18
    165e:	b3 06       	cpc	r11, r19
    1660:	c4 06       	cpc	r12, r20
    1662:	d5 06       	cpc	r13, r21
    1664:	20 f4       	brcc	.+8      	; 0x166e <__umoddi3+0x4a8>
    1666:	a2 0c       	add	r10, r2
    1668:	b3 1c       	adc	r11, r3
    166a:	c4 1c       	adc	r12, r4
    166c:	d5 1c       	adc	r13, r5
    166e:	a2 1a       	sub	r10, r18
    1670:	b3 0a       	sbc	r11, r19
    1672:	c4 0a       	sbc	r12, r20
    1674:	d5 0a       	sbc	r13, r21
    1676:	c6 01       	movw	r24, r12
    1678:	b5 01       	movw	r22, r10
    167a:	a4 01       	movw	r20, r8
    167c:	93 01       	movw	r18, r6
    167e:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1682:	7b 01       	movw	r14, r22
    1684:	8c 01       	movw	r16, r24
    1686:	c6 01       	movw	r24, r12
    1688:	b5 01       	movw	r22, r10
    168a:	a4 01       	movw	r20, r8
    168c:	93 01       	movw	r18, r6
    168e:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1692:	ca 01       	movw	r24, r20
    1694:	b9 01       	movw	r22, r18
    1696:	25 96       	adiw	r28, 0x05	; 5
    1698:	2c ad       	ldd	r18, Y+60	; 0x3c
    169a:	3d ad       	ldd	r19, Y+61	; 0x3d
    169c:	4e ad       	ldd	r20, Y+62	; 0x3e
    169e:	5f ad       	ldd	r21, Y+63	; 0x3f
    16a0:	25 97       	sbiw	r28, 0x05	; 5
    16a2:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	87 01       	movw	r16, r14
    16ac:	ff 24       	eor	r15, r15
    16ae:	ee 24       	eor	r14, r14
    16b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    16b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    16b4:	af a5       	ldd	r26, Y+47	; 0x2f
    16b6:	b8 a9       	ldd	r27, Y+48	; 0x30
    16b8:	a0 70       	andi	r26, 0x00	; 0
    16ba:	b0 70       	andi	r27, 0x00	; 0
    16bc:	57 01       	movw	r10, r14
    16be:	68 01       	movw	r12, r16
    16c0:	a8 2a       	or	r10, r24
    16c2:	b9 2a       	or	r11, r25
    16c4:	ca 2a       	or	r12, r26
    16c6:	db 2a       	or	r13, r27
    16c8:	a2 16       	cp	r10, r18
    16ca:	b3 06       	cpc	r11, r19
    16cc:	c4 06       	cpc	r12, r20
    16ce:	d5 06       	cpc	r13, r21
    16d0:	90 f4       	brcc	.+36     	; 0x16f6 <__umoddi3+0x530>
    16d2:	a2 0c       	add	r10, r2
    16d4:	b3 1c       	adc	r11, r3
    16d6:	c4 1c       	adc	r12, r4
    16d8:	d5 1c       	adc	r13, r5
    16da:	a2 14       	cp	r10, r2
    16dc:	b3 04       	cpc	r11, r3
    16de:	c4 04       	cpc	r12, r4
    16e0:	d5 04       	cpc	r13, r5
    16e2:	48 f0       	brcs	.+18     	; 0x16f6 <__umoddi3+0x530>
    16e4:	a2 16       	cp	r10, r18
    16e6:	b3 06       	cpc	r11, r19
    16e8:	c4 06       	cpc	r12, r20
    16ea:	d5 06       	cpc	r13, r21
    16ec:	20 f4       	brcc	.+8      	; 0x16f6 <__umoddi3+0x530>
    16ee:	a2 0c       	add	r10, r2
    16f0:	b3 1c       	adc	r11, r3
    16f2:	c4 1c       	adc	r12, r4
    16f4:	d5 1c       	adc	r13, r5
    16f6:	6c 96       	adiw	r28, 0x1c	; 28
    16f8:	ec ac       	ldd	r14, Y+60	; 0x3c
    16fa:	fd ac       	ldd	r15, Y+61	; 0x3d
    16fc:	0e ad       	ldd	r16, Y+62	; 0x3e
    16fe:	1f ad       	ldd	r17, Y+63	; 0x3f
    1700:	6c 97       	sbiw	r28, 0x1c	; 28
    1702:	68 96       	adiw	r28, 0x18	; 24
    1704:	0f ac       	ldd	r0, Y+63	; 0x3f
    1706:	68 97       	sbiw	r28, 0x18	; 24
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <__umoddi3+0x54c>
    170a:	ee 0c       	add	r14, r14
    170c:	ff 1c       	adc	r15, r15
    170e:	00 1f       	adc	r16, r16
    1710:	11 1f       	adc	r17, r17
    1712:	0a 94       	dec	r0
    1714:	d2 f7       	brpl	.-12     	; 0x170a <__umoddi3+0x544>
    1716:	e9 aa       	std	Y+49, r14	; 0x31
    1718:	fa aa       	std	Y+50, r15	; 0x32
    171a:	0b ab       	std	Y+51, r16	; 0x33
    171c:	1c ab       	std	Y+52, r17	; 0x34
    171e:	a2 1a       	sub	r10, r18
    1720:	b3 0a       	sbc	r11, r19
    1722:	c4 0a       	sbc	r12, r20
    1724:	d5 0a       	sbc	r13, r21
    1726:	32 01       	movw	r6, r4
    1728:	88 24       	eor	r8, r8
    172a:	99 24       	eor	r9, r9
    172c:	b2 01       	movw	r22, r4
    172e:	a1 01       	movw	r20, r2
    1730:	60 70       	andi	r22, 0x00	; 0
    1732:	70 70       	andi	r23, 0x00	; 0
    1734:	29 96       	adiw	r28, 0x09	; 9
    1736:	4c af       	std	Y+60, r20	; 0x3c
    1738:	5d af       	std	Y+61, r21	; 0x3d
    173a:	6e af       	std	Y+62, r22	; 0x3e
    173c:	7f af       	std	Y+63, r23	; 0x3f
    173e:	29 97       	sbiw	r28, 0x09	; 9
    1740:	c6 01       	movw	r24, r12
    1742:	b5 01       	movw	r22, r10
    1744:	a4 01       	movw	r20, r8
    1746:	93 01       	movw	r18, r6
    1748:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    174c:	7b 01       	movw	r14, r22
    174e:	8c 01       	movw	r16, r24
    1750:	c6 01       	movw	r24, r12
    1752:	b5 01       	movw	r22, r10
    1754:	a4 01       	movw	r20, r8
    1756:	93 01       	movw	r18, r6
    1758:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    175c:	ca 01       	movw	r24, r20
    175e:	b9 01       	movw	r22, r18
    1760:	29 96       	adiw	r28, 0x09	; 9
    1762:	2c ad       	ldd	r18, Y+60	; 0x3c
    1764:	3d ad       	ldd	r19, Y+61	; 0x3d
    1766:	4e ad       	ldd	r20, Y+62	; 0x3e
    1768:	5f ad       	ldd	r21, Y+63	; 0x3f
    176a:	29 97       	sbiw	r28, 0x09	; 9
    176c:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	87 01       	movw	r16, r14
    1776:	ff 24       	eor	r15, r15
    1778:	ee 24       	eor	r14, r14
    177a:	a9 a8       	ldd	r10, Y+49	; 0x31
    177c:	ba a8       	ldd	r11, Y+50	; 0x32
    177e:	cb a8       	ldd	r12, Y+51	; 0x33
    1780:	dc a8       	ldd	r13, Y+52	; 0x34
    1782:	c6 01       	movw	r24, r12
    1784:	aa 27       	eor	r26, r26
    1786:	bb 27       	eor	r27, r27
    1788:	57 01       	movw	r10, r14
    178a:	68 01       	movw	r12, r16
    178c:	a8 2a       	or	r10, r24
    178e:	b9 2a       	or	r11, r25
    1790:	ca 2a       	or	r12, r26
    1792:	db 2a       	or	r13, r27
    1794:	a2 16       	cp	r10, r18
    1796:	b3 06       	cpc	r11, r19
    1798:	c4 06       	cpc	r12, r20
    179a:	d5 06       	cpc	r13, r21
    179c:	90 f4       	brcc	.+36     	; 0x17c2 <__umoddi3+0x5fc>
    179e:	a2 0c       	add	r10, r2
    17a0:	b3 1c       	adc	r11, r3
    17a2:	c4 1c       	adc	r12, r4
    17a4:	d5 1c       	adc	r13, r5
    17a6:	a2 14       	cp	r10, r2
    17a8:	b3 04       	cpc	r11, r3
    17aa:	c4 04       	cpc	r12, r4
    17ac:	d5 04       	cpc	r13, r5
    17ae:	48 f0       	brcs	.+18     	; 0x17c2 <__umoddi3+0x5fc>
    17b0:	a2 16       	cp	r10, r18
    17b2:	b3 06       	cpc	r11, r19
    17b4:	c4 06       	cpc	r12, r20
    17b6:	d5 06       	cpc	r13, r21
    17b8:	20 f4       	brcc	.+8      	; 0x17c2 <__umoddi3+0x5fc>
    17ba:	a2 0c       	add	r10, r2
    17bc:	b3 1c       	adc	r11, r3
    17be:	c4 1c       	adc	r12, r4
    17c0:	d5 1c       	adc	r13, r5
    17c2:	a2 1a       	sub	r10, r18
    17c4:	b3 0a       	sbc	r11, r19
    17c6:	c4 0a       	sbc	r12, r20
    17c8:	d5 0a       	sbc	r13, r21
    17ca:	c6 01       	movw	r24, r12
    17cc:	b5 01       	movw	r22, r10
    17ce:	a4 01       	movw	r20, r8
    17d0:	93 01       	movw	r18, r6
    17d2:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    17d6:	7b 01       	movw	r14, r22
    17d8:	8c 01       	movw	r16, r24
    17da:	c6 01       	movw	r24, r12
    17dc:	b5 01       	movw	r22, r10
    17de:	a4 01       	movw	r20, r8
    17e0:	93 01       	movw	r18, r6
    17e2:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    17e6:	ca 01       	movw	r24, r20
    17e8:	b9 01       	movw	r22, r18
    17ea:	29 96       	adiw	r28, 0x09	; 9
    17ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    17ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    17f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    17f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    17f4:	29 97       	sbiw	r28, 0x09	; 9
    17f6:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	87 01       	movw	r16, r14
    1800:	ff 24       	eor	r15, r15
    1802:	ee 24       	eor	r14, r14
    1804:	89 a9       	ldd	r24, Y+49	; 0x31
    1806:	9a a9       	ldd	r25, Y+50	; 0x32
    1808:	ab a9       	ldd	r26, Y+51	; 0x33
    180a:	bc a9       	ldd	r27, Y+52	; 0x34
    180c:	a0 70       	andi	r26, 0x00	; 0
    180e:	b0 70       	andi	r27, 0x00	; 0
    1810:	e8 2a       	or	r14, r24
    1812:	f9 2a       	or	r15, r25
    1814:	0a 2b       	or	r16, r26
    1816:	1b 2b       	or	r17, r27
    1818:	e2 16       	cp	r14, r18
    181a:	f3 06       	cpc	r15, r19
    181c:	04 07       	cpc	r16, r20
    181e:	15 07       	cpc	r17, r21
    1820:	90 f4       	brcc	.+36     	; 0x1846 <__umoddi3+0x680>
    1822:	e2 0c       	add	r14, r2
    1824:	f3 1c       	adc	r15, r3
    1826:	04 1d       	adc	r16, r4
    1828:	15 1d       	adc	r17, r5
    182a:	e2 14       	cp	r14, r2
    182c:	f3 04       	cpc	r15, r3
    182e:	04 05       	cpc	r16, r4
    1830:	15 05       	cpc	r17, r5
    1832:	48 f0       	brcs	.+18     	; 0x1846 <__umoddi3+0x680>
    1834:	e2 16       	cp	r14, r18
    1836:	f3 06       	cpc	r15, r19
    1838:	04 07       	cpc	r16, r20
    183a:	15 07       	cpc	r17, r21
    183c:	20 f4       	brcc	.+8      	; 0x1846 <__umoddi3+0x680>
    183e:	e2 0c       	add	r14, r2
    1840:	f3 1c       	adc	r15, r3
    1842:	04 1d       	adc	r16, r4
    1844:	15 1d       	adc	r17, r5
    1846:	e2 1a       	sub	r14, r18
    1848:	f3 0a       	sbc	r15, r19
    184a:	04 0b       	sbc	r16, r20
    184c:	15 0b       	sbc	r17, r21
    184e:	d8 01       	movw	r26, r16
    1850:	c7 01       	movw	r24, r14
    1852:	09 ac       	ldd	r0, Y+57	; 0x39
    1854:	04 c0       	rjmp	.+8      	; 0x185e <__umoddi3+0x698>
    1856:	b6 95       	lsr	r27
    1858:	a7 95       	ror	r26
    185a:	97 95       	ror	r25
    185c:	87 95       	ror	r24
    185e:	0a 94       	dec	r0
    1860:	d2 f7       	brpl	.-12     	; 0x1856 <__umoddi3+0x690>
    1862:	89 8b       	std	Y+17, r24	; 0x11
    1864:	9a 8b       	std	Y+18, r25	; 0x12
    1866:	ab 8b       	std	Y+19, r26	; 0x13
    1868:	bc 8b       	std	Y+20, r27	; 0x14
    186a:	1d 8a       	std	Y+21, r1	; 0x15
    186c:	1e 8a       	std	Y+22, r1	; 0x16
    186e:	1f 8a       	std	Y+23, r1	; 0x17
    1870:	18 8e       	std	Y+24, r1	; 0x18
    1872:	28 2f       	mov	r18, r24
    1874:	3a 89       	ldd	r19, Y+18	; 0x12
    1876:	4b 89       	ldd	r20, Y+19	; 0x13
    1878:	5c 89       	ldd	r21, Y+20	; 0x14
    187a:	6d 89       	ldd	r22, Y+21	; 0x15
    187c:	0c c3       	rjmp	.+1560   	; 0x1e96 <__umoddi3+0xcd0>
    187e:	6a 14       	cp	r6, r10
    1880:	7b 04       	cpc	r7, r11
    1882:	8c 04       	cpc	r8, r12
    1884:	9d 04       	cpc	r9, r13
    1886:	08 f4       	brcc	.+2      	; 0x188a <__umoddi3+0x6c4>
    1888:	09 c3       	rjmp	.+1554   	; 0x1e9c <__umoddi3+0xcd6>
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	a0 16       	cp	r10, r16
    188e:	00 e0       	ldi	r16, 0x00	; 0
    1890:	b0 06       	cpc	r11, r16
    1892:	01 e0       	ldi	r16, 0x01	; 1
    1894:	c0 06       	cpc	r12, r16
    1896:	00 e0       	ldi	r16, 0x00	; 0
    1898:	d0 06       	cpc	r13, r16
    189a:	88 f4       	brcc	.+34     	; 0x18be <__umoddi3+0x6f8>
    189c:	1f ef       	ldi	r17, 0xFF	; 255
    189e:	a1 16       	cp	r10, r17
    18a0:	b1 04       	cpc	r11, r1
    18a2:	c1 04       	cpc	r12, r1
    18a4:	d1 04       	cpc	r13, r1
    18a6:	39 f0       	breq	.+14     	; 0x18b6 <__umoddi3+0x6f0>
    18a8:	30 f0       	brcs	.+12     	; 0x18b6 <__umoddi3+0x6f0>
    18aa:	28 e0       	ldi	r18, 0x08	; 8
    18ac:	e2 2e       	mov	r14, r18
    18ae:	f1 2c       	mov	r15, r1
    18b0:	01 2d       	mov	r16, r1
    18b2:	11 2d       	mov	r17, r1
    18b4:	18 c0       	rjmp	.+48     	; 0x18e6 <__umoddi3+0x720>
    18b6:	ee 24       	eor	r14, r14
    18b8:	ff 24       	eor	r15, r15
    18ba:	87 01       	movw	r16, r14
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <__umoddi3+0x720>
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	a4 16       	cp	r10, r20
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	b4 06       	cpc	r11, r20
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	c4 06       	cpc	r12, r20
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	d4 06       	cpc	r13, r20
    18ce:	30 f0       	brcs	.+12     	; 0x18dc <__umoddi3+0x716>
    18d0:	98 e1       	ldi	r25, 0x18	; 24
    18d2:	e9 2e       	mov	r14, r25
    18d4:	f1 2c       	mov	r15, r1
    18d6:	01 2d       	mov	r16, r1
    18d8:	11 2d       	mov	r17, r1
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <__umoddi3+0x720>
    18dc:	80 e1       	ldi	r24, 0x10	; 16
    18de:	e8 2e       	mov	r14, r24
    18e0:	f1 2c       	mov	r15, r1
    18e2:	01 2d       	mov	r16, r1
    18e4:	11 2d       	mov	r17, r1
    18e6:	d6 01       	movw	r26, r12
    18e8:	c5 01       	movw	r24, r10
    18ea:	0e 2c       	mov	r0, r14
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <__umoddi3+0x730>
    18ee:	b6 95       	lsr	r27
    18f0:	a7 95       	ror	r26
    18f2:	97 95       	ror	r25
    18f4:	87 95       	ror	r24
    18f6:	0a 94       	dec	r0
    18f8:	d2 f7       	brpl	.-12     	; 0x18ee <__umoddi3+0x728>
    18fa:	8d 56       	subi	r24, 0x6D	; 109
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	dc 01       	movw	r26, r24
    1900:	2c 91       	ld	r18, X
    1902:	80 e2       	ldi	r24, 0x20	; 32
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a0 e0       	ldi	r26, 0x00	; 0
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	8e 19       	sub	r24, r14
    190c:	9f 09       	sbc	r25, r15
    190e:	a0 0b       	sbc	r26, r16
    1910:	b1 0b       	sbc	r27, r17
    1912:	82 1b       	sub	r24, r18
    1914:	91 09       	sbc	r25, r1
    1916:	a1 09       	sbc	r26, r1
    1918:	b1 09       	sbc	r27, r1
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	a1 05       	cpc	r26, r1
    191e:	b1 05       	cpc	r27, r1
    1920:	09 f0       	breq	.+2      	; 0x1924 <__umoddi3+0x75e>
    1922:	4f c0       	rjmp	.+158    	; 0x19c2 <__umoddi3+0x7fc>
    1924:	a6 14       	cp	r10, r6
    1926:	b7 04       	cpc	r11, r7
    1928:	c8 04       	cpc	r12, r8
    192a:	d9 04       	cpc	r13, r9
    192c:	58 f0       	brcs	.+22     	; 0x1944 <__umoddi3+0x77e>
    192e:	6c 96       	adiw	r28, 0x1c	; 28
    1930:	ec ac       	ldd	r14, Y+60	; 0x3c
    1932:	fd ac       	ldd	r15, Y+61	; 0x3d
    1934:	0e ad       	ldd	r16, Y+62	; 0x3e
    1936:	1f ad       	ldd	r17, Y+63	; 0x3f
    1938:	6c 97       	sbiw	r28, 0x1c	; 28
    193a:	e2 14       	cp	r14, r2
    193c:	f3 04       	cpc	r15, r3
    193e:	04 05       	cpc	r16, r4
    1940:	15 05       	cpc	r17, r5
    1942:	68 f1       	brcs	.+90     	; 0x199e <__umoddi3+0x7d8>
    1944:	6c 96       	adiw	r28, 0x1c	; 28
    1946:	ec ac       	ldd	r14, Y+60	; 0x3c
    1948:	fd ac       	ldd	r15, Y+61	; 0x3d
    194a:	0e ad       	ldd	r16, Y+62	; 0x3e
    194c:	1f ad       	ldd	r17, Y+63	; 0x3f
    194e:	6c 97       	sbiw	r28, 0x1c	; 28
    1950:	e2 18       	sub	r14, r2
    1952:	f3 08       	sbc	r15, r3
    1954:	04 09       	sbc	r16, r4
    1956:	15 09       	sbc	r17, r5
    1958:	a4 01       	movw	r20, r8
    195a:	93 01       	movw	r18, r6
    195c:	2a 19       	sub	r18, r10
    195e:	3b 09       	sbc	r19, r11
    1960:	4c 09       	sbc	r20, r12
    1962:	5d 09       	sbc	r21, r13
    1964:	aa 24       	eor	r10, r10
    1966:	bb 24       	eor	r11, r11
    1968:	65 01       	movw	r12, r10
    196a:	6c 96       	adiw	r28, 0x1c	; 28
    196c:	6c ad       	ldd	r22, Y+60	; 0x3c
    196e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1970:	8e ad       	ldd	r24, Y+62	; 0x3e
    1972:	9f ad       	ldd	r25, Y+63	; 0x3f
    1974:	6c 97       	sbiw	r28, 0x1c	; 28
    1976:	6e 15       	cp	r22, r14
    1978:	7f 05       	cpc	r23, r15
    197a:	80 07       	cpc	r24, r16
    197c:	91 07       	cpc	r25, r17
    197e:	28 f4       	brcc	.+10     	; 0x198a <__umoddi3+0x7c4>
    1980:	b1 e0       	ldi	r27, 0x01	; 1
    1982:	ab 2e       	mov	r10, r27
    1984:	b1 2c       	mov	r11, r1
    1986:	c1 2c       	mov	r12, r1
    1988:	d1 2c       	mov	r13, r1
    198a:	da 01       	movw	r26, r20
    198c:	c9 01       	movw	r24, r18
    198e:	8a 19       	sub	r24, r10
    1990:	9b 09       	sbc	r25, r11
    1992:	ac 09       	sbc	r26, r12
    1994:	bd 09       	sbc	r27, r13
    1996:	8d ab       	std	Y+53, r24	; 0x35
    1998:	9e ab       	std	Y+54, r25	; 0x36
    199a:	af ab       	std	Y+55, r26	; 0x37
    199c:	b8 af       	std	Y+56, r27	; 0x38
    199e:	e9 8a       	std	Y+17, r14	; 0x11
    19a0:	fa 8a       	std	Y+18, r15	; 0x12
    19a2:	0b 8b       	std	Y+19, r16	; 0x13
    19a4:	1c 8b       	std	Y+20, r17	; 0x14
    19a6:	6d a8       	ldd	r6, Y+53	; 0x35
    19a8:	7e a8       	ldd	r7, Y+54	; 0x36
    19aa:	8f a8       	ldd	r8, Y+55	; 0x37
    19ac:	98 ac       	ldd	r9, Y+56	; 0x38
    19ae:	6d 8a       	std	Y+21, r6	; 0x15
    19b0:	7e 8a       	std	Y+22, r7	; 0x16
    19b2:	8f 8a       	std	Y+23, r8	; 0x17
    19b4:	98 8e       	std	Y+24, r9	; 0x18
    19b6:	2e 2d       	mov	r18, r14
    19b8:	3a 89       	ldd	r19, Y+18	; 0x12
    19ba:	4b 89       	ldd	r20, Y+19	; 0x13
    19bc:	5c 89       	ldd	r21, Y+20	; 0x14
    19be:	6d a9       	ldd	r22, Y+53	; 0x35
    19c0:	6a c2       	rjmp	.+1236   	; 0x1e96 <__umoddi3+0xcd0>
    19c2:	67 96       	adiw	r28, 0x17	; 23
    19c4:	8f af       	std	Y+63, r24	; 0x3f
    19c6:	67 97       	sbiw	r28, 0x17	; 23
    19c8:	a6 01       	movw	r20, r12
    19ca:	95 01       	movw	r18, r10
    19cc:	08 2e       	mov	r0, r24
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <__umoddi3+0x812>
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	44 1f       	adc	r20, r20
    19d6:	55 1f       	adc	r21, r21
    19d8:	0a 94       	dec	r0
    19da:	d2 f7       	brpl	.-12     	; 0x19d0 <__umoddi3+0x80a>
    19dc:	a0 e2       	ldi	r26, 0x20	; 32
    19de:	aa 2e       	mov	r10, r26
    19e0:	a8 1a       	sub	r10, r24
    19e2:	66 96       	adiw	r28, 0x16	; 22
    19e4:	af ae       	std	Y+63, r10	; 0x3f
    19e6:	66 97       	sbiw	r28, 0x16	; 22
    19e8:	d2 01       	movw	r26, r4
    19ea:	c1 01       	movw	r24, r2
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <__umoddi3+0x830>
    19ee:	b6 95       	lsr	r27
    19f0:	a7 95       	ror	r26
    19f2:	97 95       	ror	r25
    19f4:	87 95       	ror	r24
    19f6:	aa 94       	dec	r10
    19f8:	d2 f7       	brpl	.-12     	; 0x19ee <__umoddi3+0x828>
    19fa:	6c 01       	movw	r12, r24
    19fc:	7d 01       	movw	r14, r26
    19fe:	c2 2a       	or	r12, r18
    1a00:	d3 2a       	or	r13, r19
    1a02:	e4 2a       	or	r14, r20
    1a04:	f5 2a       	or	r15, r21
    1a06:	c9 a6       	std	Y+41, r12	; 0x29
    1a08:	da a6       	std	Y+42, r13	; 0x2a
    1a0a:	eb a6       	std	Y+43, r14	; 0x2b
    1a0c:	fc a6       	std	Y+44, r15	; 0x2c
    1a0e:	82 01       	movw	r16, r4
    1a10:	71 01       	movw	r14, r2
    1a12:	67 96       	adiw	r28, 0x17	; 23
    1a14:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a16:	67 97       	sbiw	r28, 0x17	; 23
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__umoddi3+0x85c>
    1a1a:	ee 0c       	add	r14, r14
    1a1c:	ff 1c       	adc	r15, r15
    1a1e:	00 1f       	adc	r16, r16
    1a20:	11 1f       	adc	r17, r17
    1a22:	0a 94       	dec	r0
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__umoddi3+0x854>
    1a26:	ed a2       	std	Y+37, r14	; 0x25
    1a28:	fe a2       	std	Y+38, r15	; 0x26
    1a2a:	0f a3       	std	Y+39, r16	; 0x27
    1a2c:	18 a7       	std	Y+40, r17	; 0x28
    1a2e:	64 01       	movw	r12, r8
    1a30:	53 01       	movw	r10, r6
    1a32:	66 96       	adiw	r28, 0x16	; 22
    1a34:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a36:	66 97       	sbiw	r28, 0x16	; 22
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <__umoddi3+0x87c>
    1a3a:	d6 94       	lsr	r13
    1a3c:	c7 94       	ror	r12
    1a3e:	b7 94       	ror	r11
    1a40:	a7 94       	ror	r10
    1a42:	0a 94       	dec	r0
    1a44:	d2 f7       	brpl	.-12     	; 0x1a3a <__umoddi3+0x874>
    1a46:	a4 01       	movw	r20, r8
    1a48:	93 01       	movw	r18, r6
    1a4a:	67 96       	adiw	r28, 0x17	; 23
    1a4c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a4e:	67 97       	sbiw	r28, 0x17	; 23
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <__umoddi3+0x894>
    1a52:	22 0f       	add	r18, r18
    1a54:	33 1f       	adc	r19, r19
    1a56:	44 1f       	adc	r20, r20
    1a58:	55 1f       	adc	r21, r21
    1a5a:	0a 94       	dec	r0
    1a5c:	d2 f7       	brpl	.-12     	; 0x1a52 <__umoddi3+0x88c>
    1a5e:	6c 96       	adiw	r28, 0x1c	; 28
    1a60:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a62:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a64:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a66:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a68:	6c 97       	sbiw	r28, 0x1c	; 28
    1a6a:	66 96       	adiw	r28, 0x16	; 22
    1a6c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a6e:	66 97       	sbiw	r28, 0x16	; 22
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <__umoddi3+0x8b4>
    1a72:	b6 95       	lsr	r27
    1a74:	a7 95       	ror	r26
    1a76:	97 95       	ror	r25
    1a78:	87 95       	ror	r24
    1a7a:	0a 94       	dec	r0
    1a7c:	d2 f7       	brpl	.-12     	; 0x1a72 <__umoddi3+0x8ac>
    1a7e:	3c 01       	movw	r6, r24
    1a80:	4d 01       	movw	r8, r26
    1a82:	62 2a       	or	r6, r18
    1a84:	73 2a       	or	r7, r19
    1a86:	84 2a       	or	r8, r20
    1a88:	95 2a       	or	r9, r21
    1a8a:	69 a2       	std	Y+33, r6	; 0x21
    1a8c:	7a a2       	std	Y+34, r7	; 0x22
    1a8e:	8b a2       	std	Y+35, r8	; 0x23
    1a90:	9c a2       	std	Y+36, r9	; 0x24
    1a92:	6c 96       	adiw	r28, 0x1c	; 28
    1a94:	ec ac       	ldd	r14, Y+60	; 0x3c
    1a96:	fd ac       	ldd	r15, Y+61	; 0x3d
    1a98:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a9a:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a9c:	6c 97       	sbiw	r28, 0x1c	; 28
    1a9e:	67 96       	adiw	r28, 0x17	; 23
    1aa0:	0f ac       	ldd	r0, Y+63	; 0x3f
    1aa2:	67 97       	sbiw	r28, 0x17	; 23
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <__umoddi3+0x8e8>
    1aa6:	ee 0c       	add	r14, r14
    1aa8:	ff 1c       	adc	r15, r15
    1aaa:	00 1f       	adc	r16, r16
    1aac:	11 1f       	adc	r17, r17
    1aae:	0a 94       	dec	r0
    1ab0:	d2 f7       	brpl	.-12     	; 0x1aa6 <__umoddi3+0x8e0>
    1ab2:	ed 8e       	std	Y+29, r14	; 0x1d
    1ab4:	fe 8e       	std	Y+30, r15	; 0x1e
    1ab6:	0f 8f       	std	Y+31, r16	; 0x1f
    1ab8:	18 a3       	std	Y+32, r17	; 0x20
    1aba:	49 a5       	ldd	r20, Y+41	; 0x29
    1abc:	5a a5       	ldd	r21, Y+42	; 0x2a
    1abe:	6b a5       	ldd	r22, Y+43	; 0x2b
    1ac0:	7c a5       	ldd	r23, Y+44	; 0x2c
    1ac2:	3b 01       	movw	r6, r22
    1ac4:	88 24       	eor	r8, r8
    1ac6:	99 24       	eor	r9, r9
    1ac8:	60 70       	andi	r22, 0x00	; 0
    1aca:	70 70       	andi	r23, 0x00	; 0
    1acc:	2d 96       	adiw	r28, 0x0d	; 13
    1ace:	4c af       	std	Y+60, r20	; 0x3c
    1ad0:	5d af       	std	Y+61, r21	; 0x3d
    1ad2:	6e af       	std	Y+62, r22	; 0x3e
    1ad4:	7f af       	std	Y+63, r23	; 0x3f
    1ad6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ad8:	c6 01       	movw	r24, r12
    1ada:	b5 01       	movw	r22, r10
    1adc:	a4 01       	movw	r20, r8
    1ade:	93 01       	movw	r18, r6
    1ae0:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1ae4:	7b 01       	movw	r14, r22
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	c6 01       	movw	r24, r12
    1aea:	b5 01       	movw	r22, r10
    1aec:	a4 01       	movw	r20, r8
    1aee:	93 01       	movw	r18, r6
    1af0:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1af4:	c9 01       	movw	r24, r18
    1af6:	da 01       	movw	r26, r20
    1af8:	1c 01       	movw	r2, r24
    1afa:	2d 01       	movw	r4, r26
    1afc:	c2 01       	movw	r24, r4
    1afe:	b1 01       	movw	r22, r2
    1b00:	2d 96       	adiw	r28, 0x0d	; 13
    1b02:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b04:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b06:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b08:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b0a:	2d 97       	sbiw	r28, 0x0d	; 13
    1b0c:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1b10:	9b 01       	movw	r18, r22
    1b12:	ac 01       	movw	r20, r24
    1b14:	87 01       	movw	r16, r14
    1b16:	ff 24       	eor	r15, r15
    1b18:	ee 24       	eor	r14, r14
    1b1a:	a9 a0       	ldd	r10, Y+33	; 0x21
    1b1c:	ba a0       	ldd	r11, Y+34	; 0x22
    1b1e:	cb a0       	ldd	r12, Y+35	; 0x23
    1b20:	dc a0       	ldd	r13, Y+36	; 0x24
    1b22:	c6 01       	movw	r24, r12
    1b24:	aa 27       	eor	r26, r26
    1b26:	bb 27       	eor	r27, r27
    1b28:	57 01       	movw	r10, r14
    1b2a:	68 01       	movw	r12, r16
    1b2c:	a8 2a       	or	r10, r24
    1b2e:	b9 2a       	or	r11, r25
    1b30:	ca 2a       	or	r12, r26
    1b32:	db 2a       	or	r13, r27
    1b34:	a2 16       	cp	r10, r18
    1b36:	b3 06       	cpc	r11, r19
    1b38:	c4 06       	cpc	r12, r20
    1b3a:	d5 06       	cpc	r13, r21
    1b3c:	00 f5       	brcc	.+64     	; 0x1b7e <__umoddi3+0x9b8>
    1b3e:	08 94       	sec
    1b40:	21 08       	sbc	r2, r1
    1b42:	31 08       	sbc	r3, r1
    1b44:	41 08       	sbc	r4, r1
    1b46:	51 08       	sbc	r5, r1
    1b48:	e9 a4       	ldd	r14, Y+41	; 0x29
    1b4a:	fa a4       	ldd	r15, Y+42	; 0x2a
    1b4c:	0b a5       	ldd	r16, Y+43	; 0x2b
    1b4e:	1c a5       	ldd	r17, Y+44	; 0x2c
    1b50:	ae 0c       	add	r10, r14
    1b52:	bf 1c       	adc	r11, r15
    1b54:	c0 1e       	adc	r12, r16
    1b56:	d1 1e       	adc	r13, r17
    1b58:	ae 14       	cp	r10, r14
    1b5a:	bf 04       	cpc	r11, r15
    1b5c:	c0 06       	cpc	r12, r16
    1b5e:	d1 06       	cpc	r13, r17
    1b60:	70 f0       	brcs	.+28     	; 0x1b7e <__umoddi3+0x9b8>
    1b62:	a2 16       	cp	r10, r18
    1b64:	b3 06       	cpc	r11, r19
    1b66:	c4 06       	cpc	r12, r20
    1b68:	d5 06       	cpc	r13, r21
    1b6a:	48 f4       	brcc	.+18     	; 0x1b7e <__umoddi3+0x9b8>
    1b6c:	08 94       	sec
    1b6e:	21 08       	sbc	r2, r1
    1b70:	31 08       	sbc	r3, r1
    1b72:	41 08       	sbc	r4, r1
    1b74:	51 08       	sbc	r5, r1
    1b76:	ae 0c       	add	r10, r14
    1b78:	bf 1c       	adc	r11, r15
    1b7a:	c0 1e       	adc	r12, r16
    1b7c:	d1 1e       	adc	r13, r17
    1b7e:	a2 1a       	sub	r10, r18
    1b80:	b3 0a       	sbc	r11, r19
    1b82:	c4 0a       	sbc	r12, r20
    1b84:	d5 0a       	sbc	r13, r21
    1b86:	c6 01       	movw	r24, r12
    1b88:	b5 01       	movw	r22, r10
    1b8a:	a4 01       	movw	r20, r8
    1b8c:	93 01       	movw	r18, r6
    1b8e:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1b92:	7b 01       	movw	r14, r22
    1b94:	8c 01       	movw	r16, r24
    1b96:	c6 01       	movw	r24, r12
    1b98:	b5 01       	movw	r22, r10
    1b9a:	a4 01       	movw	r20, r8
    1b9c:	93 01       	movw	r18, r6
    1b9e:	0e 94 25 3a 	call	0x744a	; 0x744a <__udivmodsi4>
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	da 01       	movw	r26, r20
    1ba6:	3c 01       	movw	r6, r24
    1ba8:	4d 01       	movw	r8, r26
    1baa:	c4 01       	movw	r24, r8
    1bac:	b3 01       	movw	r22, r6
    1bae:	2d 96       	adiw	r28, 0x0d	; 13
    1bb0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bb2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bb4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bb6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bb8:	2d 97       	sbiw	r28, 0x0d	; 13
    1bba:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1bbe:	9b 01       	movw	r18, r22
    1bc0:	ac 01       	movw	r20, r24
    1bc2:	87 01       	movw	r16, r14
    1bc4:	ff 24       	eor	r15, r15
    1bc6:	ee 24       	eor	r14, r14
    1bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bca:	9a a1       	ldd	r25, Y+34	; 0x22
    1bcc:	ab a1       	ldd	r26, Y+35	; 0x23
    1bce:	bc a1       	ldd	r27, Y+36	; 0x24
    1bd0:	a0 70       	andi	r26, 0x00	; 0
    1bd2:	b0 70       	andi	r27, 0x00	; 0
    1bd4:	57 01       	movw	r10, r14
    1bd6:	68 01       	movw	r12, r16
    1bd8:	a8 2a       	or	r10, r24
    1bda:	b9 2a       	or	r11, r25
    1bdc:	ca 2a       	or	r12, r26
    1bde:	db 2a       	or	r13, r27
    1be0:	a2 16       	cp	r10, r18
    1be2:	b3 06       	cpc	r11, r19
    1be4:	c4 06       	cpc	r12, r20
    1be6:	d5 06       	cpc	r13, r21
    1be8:	00 f5       	brcc	.+64     	; 0x1c2a <__umoddi3+0xa64>
    1bea:	08 94       	sec
    1bec:	61 08       	sbc	r6, r1
    1bee:	71 08       	sbc	r7, r1
    1bf0:	81 08       	sbc	r8, r1
    1bf2:	91 08       	sbc	r9, r1
    1bf4:	69 a5       	ldd	r22, Y+41	; 0x29
    1bf6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfc:	a6 0e       	add	r10, r22
    1bfe:	b7 1e       	adc	r11, r23
    1c00:	c8 1e       	adc	r12, r24
    1c02:	d9 1e       	adc	r13, r25
    1c04:	a6 16       	cp	r10, r22
    1c06:	b7 06       	cpc	r11, r23
    1c08:	c8 06       	cpc	r12, r24
    1c0a:	d9 06       	cpc	r13, r25
    1c0c:	70 f0       	brcs	.+28     	; 0x1c2a <__umoddi3+0xa64>
    1c0e:	a2 16       	cp	r10, r18
    1c10:	b3 06       	cpc	r11, r19
    1c12:	c4 06       	cpc	r12, r20
    1c14:	d5 06       	cpc	r13, r21
    1c16:	48 f4       	brcc	.+18     	; 0x1c2a <__umoddi3+0xa64>
    1c18:	08 94       	sec
    1c1a:	61 08       	sbc	r6, r1
    1c1c:	71 08       	sbc	r7, r1
    1c1e:	81 08       	sbc	r8, r1
    1c20:	91 08       	sbc	r9, r1
    1c22:	a6 0e       	add	r10, r22
    1c24:	b7 1e       	adc	r11, r23
    1c26:	c8 1e       	adc	r12, r24
    1c28:	d9 1e       	adc	r13, r25
    1c2a:	d6 01       	movw	r26, r12
    1c2c:	c5 01       	movw	r24, r10
    1c2e:	82 1b       	sub	r24, r18
    1c30:	93 0b       	sbc	r25, r19
    1c32:	a4 0b       	sbc	r26, r20
    1c34:	b5 0b       	sbc	r27, r21
    1c36:	89 8f       	std	Y+25, r24	; 0x19
    1c38:	9a 8f       	std	Y+26, r25	; 0x1a
    1c3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3c:	bc 8f       	std	Y+28, r27	; 0x1c
    1c3e:	d1 01       	movw	r26, r2
    1c40:	99 27       	eor	r25, r25
    1c42:	88 27       	eor	r24, r24
    1c44:	84 01       	movw	r16, r8
    1c46:	73 01       	movw	r14, r6
    1c48:	e8 2a       	or	r14, r24
    1c4a:	f9 2a       	or	r15, r25
    1c4c:	0a 2b       	or	r16, r26
    1c4e:	1b 2b       	or	r17, r27
    1c50:	4f ef       	ldi	r20, 0xFF	; 255
    1c52:	a4 2e       	mov	r10, r20
    1c54:	4f ef       	ldi	r20, 0xFF	; 255
    1c56:	b4 2e       	mov	r11, r20
    1c58:	c1 2c       	mov	r12, r1
    1c5a:	d1 2c       	mov	r13, r1
    1c5c:	ae 20       	and	r10, r14
    1c5e:	bf 20       	and	r11, r15
    1c60:	c0 22       	and	r12, r16
    1c62:	d1 22       	and	r13, r17
    1c64:	78 01       	movw	r14, r16
    1c66:	00 27       	eor	r16, r16
    1c68:	11 27       	eor	r17, r17
    1c6a:	6d a0       	ldd	r6, Y+37	; 0x25
    1c6c:	7e a0       	ldd	r7, Y+38	; 0x26
    1c6e:	8f a0       	ldd	r8, Y+39	; 0x27
    1c70:	98 a4       	ldd	r9, Y+40	; 0x28
    1c72:	4f ef       	ldi	r20, 0xFF	; 255
    1c74:	5f ef       	ldi	r21, 0xFF	; 255
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	64 22       	and	r6, r20
    1c7c:	75 22       	and	r7, r21
    1c7e:	86 22       	and	r8, r22
    1c80:	97 22       	and	r9, r23
    1c82:	8d a1       	ldd	r24, Y+37	; 0x25
    1c84:	9e a1       	ldd	r25, Y+38	; 0x26
    1c86:	af a1       	ldd	r26, Y+39	; 0x27
    1c88:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c8a:	bd 01       	movw	r22, r26
    1c8c:	88 27       	eor	r24, r24
    1c8e:	99 27       	eor	r25, r25
    1c90:	65 96       	adiw	r28, 0x15	; 21
    1c92:	6c af       	std	Y+60, r22	; 0x3c
    1c94:	7d af       	std	Y+61, r23	; 0x3d
    1c96:	8e af       	std	Y+62, r24	; 0x3e
    1c98:	9f af       	std	Y+63, r25	; 0x3f
    1c9a:	65 97       	sbiw	r28, 0x15	; 21
    1c9c:	c6 01       	movw	r24, r12
    1c9e:	b5 01       	movw	r22, r10
    1ca0:	a4 01       	movw	r20, r8
    1ca2:	93 01       	movw	r18, r6
    1ca4:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1ca8:	61 96       	adiw	r28, 0x11	; 17
    1caa:	6c af       	std	Y+60, r22	; 0x3c
    1cac:	7d af       	std	Y+61, r23	; 0x3d
    1cae:	8e af       	std	Y+62, r24	; 0x3e
    1cb0:	9f af       	std	Y+63, r25	; 0x3f
    1cb2:	61 97       	sbiw	r28, 0x11	; 17
    1cb4:	c6 01       	movw	r24, r12
    1cb6:	b5 01       	movw	r22, r10
    1cb8:	65 96       	adiw	r28, 0x15	; 21
    1cba:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cc2:	65 97       	sbiw	r28, 0x15	; 21
    1cc4:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1cc8:	1b 01       	movw	r2, r22
    1cca:	2c 01       	movw	r4, r24
    1ccc:	c8 01       	movw	r24, r16
    1cce:	b7 01       	movw	r22, r14
    1cd0:	a4 01       	movw	r20, r8
    1cd2:	93 01       	movw	r18, r6
    1cd4:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1cd8:	5b 01       	movw	r10, r22
    1cda:	6c 01       	movw	r12, r24
    1cdc:	c8 01       	movw	r24, r16
    1cde:	b7 01       	movw	r22, r14
    1ce0:	65 96       	adiw	r28, 0x15	; 21
    1ce2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ce4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ce6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ce8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cea:	65 97       	sbiw	r28, 0x15	; 21
    1cec:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    1cf0:	7b 01       	movw	r14, r22
    1cf2:	8c 01       	movw	r16, r24
    1cf4:	a6 01       	movw	r20, r12
    1cf6:	95 01       	movw	r18, r10
    1cf8:	22 0d       	add	r18, r2
    1cfa:	33 1d       	adc	r19, r3
    1cfc:	44 1d       	adc	r20, r4
    1cfe:	55 1d       	adc	r21, r5
    1d00:	61 96       	adiw	r28, 0x11	; 17
    1d02:	6c ac       	ldd	r6, Y+60	; 0x3c
    1d04:	7d ac       	ldd	r7, Y+61	; 0x3d
    1d06:	8e ac       	ldd	r8, Y+62	; 0x3e
    1d08:	9f ac       	ldd	r9, Y+63	; 0x3f
    1d0a:	61 97       	sbiw	r28, 0x11	; 17
    1d0c:	c4 01       	movw	r24, r8
    1d0e:	aa 27       	eor	r26, r26
    1d10:	bb 27       	eor	r27, r27
    1d12:	28 0f       	add	r18, r24
    1d14:	39 1f       	adc	r19, r25
    1d16:	4a 1f       	adc	r20, r26
    1d18:	5b 1f       	adc	r21, r27
    1d1a:	2a 15       	cp	r18, r10
    1d1c:	3b 05       	cpc	r19, r11
    1d1e:	4c 05       	cpc	r20, r12
    1d20:	5d 05       	cpc	r21, r13
    1d22:	48 f4       	brcc	.+18     	; 0x1d36 <__umoddi3+0xb70>
    1d24:	81 2c       	mov	r8, r1
    1d26:	91 2c       	mov	r9, r1
    1d28:	e1 e0       	ldi	r30, 0x01	; 1
    1d2a:	ae 2e       	mov	r10, r30
    1d2c:	b1 2c       	mov	r11, r1
    1d2e:	e8 0c       	add	r14, r8
    1d30:	f9 1c       	adc	r15, r9
    1d32:	0a 1d       	adc	r16, r10
    1d34:	1b 1d       	adc	r17, r11
    1d36:	ca 01       	movw	r24, r20
    1d38:	aa 27       	eor	r26, r26
    1d3a:	bb 27       	eor	r27, r27
    1d3c:	57 01       	movw	r10, r14
    1d3e:	68 01       	movw	r12, r16
    1d40:	a8 0e       	add	r10, r24
    1d42:	b9 1e       	adc	r11, r25
    1d44:	ca 1e       	adc	r12, r26
    1d46:	db 1e       	adc	r13, r27
    1d48:	a9 01       	movw	r20, r18
    1d4a:	33 27       	eor	r19, r19
    1d4c:	22 27       	eor	r18, r18
    1d4e:	61 96       	adiw	r28, 0x11	; 17
    1d50:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d52:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d54:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d56:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d58:	61 97       	sbiw	r28, 0x11	; 17
    1d5a:	a0 70       	andi	r26, 0x00	; 0
    1d5c:	b0 70       	andi	r27, 0x00	; 0
    1d5e:	28 0f       	add	r18, r24
    1d60:	39 1f       	adc	r19, r25
    1d62:	4a 1f       	adc	r20, r26
    1d64:	5b 1f       	adc	r21, r27
    1d66:	e9 8c       	ldd	r14, Y+25	; 0x19
    1d68:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1d6a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d6c:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1d6e:	ea 14       	cp	r14, r10
    1d70:	fb 04       	cpc	r15, r11
    1d72:	0c 05       	cpc	r16, r12
    1d74:	1d 05       	cpc	r17, r13
    1d76:	70 f0       	brcs	.+28     	; 0x1d94 <__umoddi3+0xbce>
    1d78:	ae 14       	cp	r10, r14
    1d7a:	bf 04       	cpc	r11, r15
    1d7c:	c0 06       	cpc	r12, r16
    1d7e:	d1 06       	cpc	r13, r17
    1d80:	69 f5       	brne	.+90     	; 0x1ddc <__umoddi3+0xc16>
    1d82:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d84:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d88:	98 a1       	ldd	r25, Y+32	; 0x20
    1d8a:	62 17       	cp	r22, r18
    1d8c:	73 07       	cpc	r23, r19
    1d8e:	84 07       	cpc	r24, r20
    1d90:	95 07       	cpc	r25, r21
    1d92:	20 f5       	brcc	.+72     	; 0x1ddc <__umoddi3+0xc16>
    1d94:	da 01       	movw	r26, r20
    1d96:	c9 01       	movw	r24, r18
    1d98:	6d a0       	ldd	r6, Y+37	; 0x25
    1d9a:	7e a0       	ldd	r7, Y+38	; 0x26
    1d9c:	8f a0       	ldd	r8, Y+39	; 0x27
    1d9e:	98 a4       	ldd	r9, Y+40	; 0x28
    1da0:	86 19       	sub	r24, r6
    1da2:	97 09       	sbc	r25, r7
    1da4:	a8 09       	sbc	r26, r8
    1da6:	b9 09       	sbc	r27, r9
    1da8:	e9 a4       	ldd	r14, Y+41	; 0x29
    1daa:	fa a4       	ldd	r15, Y+42	; 0x2a
    1dac:	0b a5       	ldd	r16, Y+43	; 0x2b
    1dae:	1c a5       	ldd	r17, Y+44	; 0x2c
    1db0:	ae 18       	sub	r10, r14
    1db2:	bf 08       	sbc	r11, r15
    1db4:	c0 0a       	sbc	r12, r16
    1db6:	d1 0a       	sbc	r13, r17
    1db8:	ee 24       	eor	r14, r14
    1dba:	ff 24       	eor	r15, r15
    1dbc:	87 01       	movw	r16, r14
    1dbe:	28 17       	cp	r18, r24
    1dc0:	39 07       	cpc	r19, r25
    1dc2:	4a 07       	cpc	r20, r26
    1dc4:	5b 07       	cpc	r21, r27
    1dc6:	28 f4       	brcc	.+10     	; 0x1dd2 <__umoddi3+0xc0c>
    1dc8:	21 e0       	ldi	r18, 0x01	; 1
    1dca:	e2 2e       	mov	r14, r18
    1dcc:	f1 2c       	mov	r15, r1
    1dce:	01 2d       	mov	r16, r1
    1dd0:	11 2d       	mov	r17, r1
    1dd2:	ae 18       	sub	r10, r14
    1dd4:	bf 08       	sbc	r11, r15
    1dd6:	c0 0a       	sbc	r12, r16
    1dd8:	d1 0a       	sbc	r13, r17
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <__umoddi3+0xc1a>
    1ddc:	da 01       	movw	r26, r20
    1dde:	c9 01       	movw	r24, r18
    1de0:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1de2:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1de4:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1de6:	98 a0       	ldd	r9, Y+32	; 0x20
    1de8:	68 1a       	sub	r6, r24
    1dea:	79 0a       	sbc	r7, r25
    1dec:	8a 0a       	sbc	r8, r26
    1dee:	9b 0a       	sbc	r9, r27
    1df0:	49 8d       	ldd	r20, Y+25	; 0x19
    1df2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1df4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1df6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1df8:	4a 19       	sub	r20, r10
    1dfa:	5b 09       	sbc	r21, r11
    1dfc:	6c 09       	sbc	r22, r12
    1dfe:	7d 09       	sbc	r23, r13
    1e00:	5a 01       	movw	r10, r20
    1e02:	6b 01       	movw	r12, r22
    1e04:	22 24       	eor	r2, r2
    1e06:	33 24       	eor	r3, r3
    1e08:	21 01       	movw	r4, r2
    1e0a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e0c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e10:	98 a1       	ldd	r25, Y+32	; 0x20
    1e12:	66 15       	cp	r22, r6
    1e14:	77 05       	cpc	r23, r7
    1e16:	88 05       	cpc	r24, r8
    1e18:	99 05       	cpc	r25, r9
    1e1a:	28 f4       	brcc	.+10     	; 0x1e26 <__umoddi3+0xc60>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	28 2e       	mov	r2, r24
    1e20:	31 2c       	mov	r3, r1
    1e22:	41 2c       	mov	r4, r1
    1e24:	51 2c       	mov	r5, r1
    1e26:	86 01       	movw	r16, r12
    1e28:	75 01       	movw	r14, r10
    1e2a:	e2 18       	sub	r14, r2
    1e2c:	f3 08       	sbc	r15, r3
    1e2e:	04 09       	sbc	r16, r4
    1e30:	15 09       	sbc	r17, r5
    1e32:	a8 01       	movw	r20, r16
    1e34:	97 01       	movw	r18, r14
    1e36:	66 96       	adiw	r28, 0x16	; 22
    1e38:	0f ac       	ldd	r0, Y+63	; 0x3f
    1e3a:	66 97       	sbiw	r28, 0x16	; 22
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <__umoddi3+0xc80>
    1e3e:	22 0f       	add	r18, r18
    1e40:	33 1f       	adc	r19, r19
    1e42:	44 1f       	adc	r20, r20
    1e44:	55 1f       	adc	r21, r21
    1e46:	0a 94       	dec	r0
    1e48:	d2 f7       	brpl	.-12     	; 0x1e3e <__umoddi3+0xc78>
    1e4a:	d4 01       	movw	r26, r8
    1e4c:	c3 01       	movw	r24, r6
    1e4e:	67 96       	adiw	r28, 0x17	; 23
    1e50:	0f ac       	ldd	r0, Y+63	; 0x3f
    1e52:	67 97       	sbiw	r28, 0x17	; 23
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__umoddi3+0xc98>
    1e56:	b6 95       	lsr	r27
    1e58:	a7 95       	ror	r26
    1e5a:	97 95       	ror	r25
    1e5c:	87 95       	ror	r24
    1e5e:	0a 94       	dec	r0
    1e60:	d2 f7       	brpl	.-12     	; 0x1e56 <__umoddi3+0xc90>
    1e62:	28 2b       	or	r18, r24
    1e64:	39 2b       	or	r19, r25
    1e66:	4a 2b       	or	r20, r26
    1e68:	5b 2b       	or	r21, r27
    1e6a:	29 8b       	std	Y+17, r18	; 0x11
    1e6c:	3a 8b       	std	Y+18, r19	; 0x12
    1e6e:	4b 8b       	std	Y+19, r20	; 0x13
    1e70:	5c 8b       	std	Y+20, r21	; 0x14
    1e72:	67 96       	adiw	r28, 0x17	; 23
    1e74:	0f ac       	ldd	r0, Y+63	; 0x3f
    1e76:	67 97       	sbiw	r28, 0x17	; 23
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <__umoddi3+0xcbc>
    1e7a:	16 95       	lsr	r17
    1e7c:	07 95       	ror	r16
    1e7e:	f7 94       	ror	r15
    1e80:	e7 94       	ror	r14
    1e82:	0a 94       	dec	r0
    1e84:	d2 f7       	brpl	.-12     	; 0x1e7a <__umoddi3+0xcb4>
    1e86:	ed 8a       	std	Y+21, r14	; 0x15
    1e88:	fe 8a       	std	Y+22, r15	; 0x16
    1e8a:	0f 8b       	std	Y+23, r16	; 0x17
    1e8c:	18 8f       	std	Y+24, r17	; 0x18
    1e8e:	3a 89       	ldd	r19, Y+18	; 0x12
    1e90:	4b 89       	ldd	r20, Y+19	; 0x13
    1e92:	5c 89       	ldd	r21, Y+20	; 0x14
    1e94:	6e 2d       	mov	r22, r14
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	c5 5a       	subi	r28, 0xA5	; 165
    1e9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ea0:	e2 e1       	ldi	r30, 0x12	; 18
    1ea2:	0c 94 63 3a 	jmp	0x74c6	; 0x74c6 <__epilogue_restores__>

00001ea6 <_fpadd_parts>:
    1ea6:	a0 e0       	ldi	r26, 0x00	; 0
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e9 e5       	ldi	r30, 0x59	; 89
    1eac:	ff e0       	ldi	r31, 0x0F	; 15
    1eae:	0c 94 47 3a 	jmp	0x748e	; 0x748e <__prologue_saves__>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	2b 01       	movw	r4, r22
    1eb6:	fa 01       	movw	r30, r20
    1eb8:	9c 91       	ld	r25, X
    1eba:	92 30       	cpi	r25, 0x02	; 2
    1ebc:	08 f4       	brcc	.+2      	; 0x1ec0 <_fpadd_parts+0x1a>
    1ebe:	39 c1       	rjmp	.+626    	; 0x2132 <_fpadd_parts+0x28c>
    1ec0:	eb 01       	movw	r28, r22
    1ec2:	88 81       	ld	r24, Y
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <_fpadd_parts+0x24>
    1ec8:	33 c1       	rjmp	.+614    	; 0x2130 <_fpadd_parts+0x28a>
    1eca:	94 30       	cpi	r25, 0x04	; 4
    1ecc:	69 f4       	brne	.+26     	; 0x1ee8 <_fpadd_parts+0x42>
    1ece:	84 30       	cpi	r24, 0x04	; 4
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <_fpadd_parts+0x2e>
    1ed2:	2f c1       	rjmp	.+606    	; 0x2132 <_fpadd_parts+0x28c>
    1ed4:	11 96       	adiw	r26, 0x01	; 1
    1ed6:	9c 91       	ld	r25, X
    1ed8:	11 97       	sbiw	r26, 0x01	; 1
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	98 17       	cp	r25, r24
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <_fpadd_parts+0x3c>
    1ee0:	28 c1       	rjmp	.+592    	; 0x2132 <_fpadd_parts+0x28c>
    1ee2:	ab e8       	ldi	r26, 0x8B	; 139
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	25 c1       	rjmp	.+586    	; 0x2132 <_fpadd_parts+0x28c>
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	09 f4       	brne	.+2      	; 0x1eee <_fpadd_parts+0x48>
    1eec:	21 c1       	rjmp	.+578    	; 0x2130 <_fpadd_parts+0x28a>
    1eee:	82 30       	cpi	r24, 0x02	; 2
    1ef0:	a9 f4       	brne	.+42     	; 0x1f1c <_fpadd_parts+0x76>
    1ef2:	92 30       	cpi	r25, 0x02	; 2
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <_fpadd_parts+0x52>
    1ef6:	1d c1       	rjmp	.+570    	; 0x2132 <_fpadd_parts+0x28c>
    1ef8:	9a 01       	movw	r18, r20
    1efa:	ad 01       	movw	r20, r26
    1efc:	88 e0       	ldi	r24, 0x08	; 8
    1efe:	ea 01       	movw	r28, r20
    1f00:	09 90       	ld	r0, Y+
    1f02:	ae 01       	movw	r20, r28
    1f04:	e9 01       	movw	r28, r18
    1f06:	09 92       	st	Y+, r0
    1f08:	9e 01       	movw	r18, r28
    1f0a:	81 50       	subi	r24, 0x01	; 1
    1f0c:	c1 f7       	brne	.-16     	; 0x1efe <_fpadd_parts+0x58>
    1f0e:	e2 01       	movw	r28, r4
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	11 96       	adiw	r26, 0x01	; 1
    1f14:	9c 91       	ld	r25, X
    1f16:	89 23       	and	r24, r25
    1f18:	81 83       	std	Z+1, r24	; 0x01
    1f1a:	08 c1       	rjmp	.+528    	; 0x212c <_fpadd_parts+0x286>
    1f1c:	92 30       	cpi	r25, 0x02	; 2
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <_fpadd_parts+0x7c>
    1f20:	07 c1       	rjmp	.+526    	; 0x2130 <_fpadd_parts+0x28a>
    1f22:	12 96       	adiw	r26, 0x02	; 2
    1f24:	2d 90       	ld	r2, X+
    1f26:	3c 90       	ld	r3, X
    1f28:	13 97       	sbiw	r26, 0x03	; 3
    1f2a:	eb 01       	movw	r28, r22
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f30:	14 96       	adiw	r26, 0x04	; 4
    1f32:	ad 90       	ld	r10, X+
    1f34:	bd 90       	ld	r11, X+
    1f36:	cd 90       	ld	r12, X+
    1f38:	dc 90       	ld	r13, X
    1f3a:	17 97       	sbiw	r26, 0x07	; 7
    1f3c:	ec 80       	ldd	r14, Y+4	; 0x04
    1f3e:	fd 80       	ldd	r15, Y+5	; 0x05
    1f40:	0e 81       	ldd	r16, Y+6	; 0x06
    1f42:	1f 81       	ldd	r17, Y+7	; 0x07
    1f44:	91 01       	movw	r18, r2
    1f46:	28 1b       	sub	r18, r24
    1f48:	39 0b       	sbc	r19, r25
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	37 ff       	sbrs	r19, 7
    1f4e:	04 c0       	rjmp	.+8      	; 0x1f58 <_fpadd_parts+0xb2>
    1f50:	66 27       	eor	r22, r22
    1f52:	77 27       	eor	r23, r23
    1f54:	62 1b       	sub	r22, r18
    1f56:	73 0b       	sbc	r23, r19
    1f58:	60 32       	cpi	r22, 0x20	; 32
    1f5a:	71 05       	cpc	r23, r1
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <_fpadd_parts+0xba>
    1f5e:	61 c0       	rjmp	.+194    	; 0x2022 <_fpadd_parts+0x17c>
    1f60:	12 16       	cp	r1, r18
    1f62:	13 06       	cpc	r1, r19
    1f64:	6c f5       	brge	.+90     	; 0x1fc0 <_fpadd_parts+0x11a>
    1f66:	37 01       	movw	r6, r14
    1f68:	48 01       	movw	r8, r16
    1f6a:	06 2e       	mov	r0, r22
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <_fpadd_parts+0xd0>
    1f6e:	96 94       	lsr	r9
    1f70:	87 94       	ror	r8
    1f72:	77 94       	ror	r7
    1f74:	67 94       	ror	r6
    1f76:	0a 94       	dec	r0
    1f78:	d2 f7       	brpl	.-12     	; 0x1f6e <_fpadd_parts+0xc8>
    1f7a:	21 e0       	ldi	r18, 0x01	; 1
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <_fpadd_parts+0xe6>
    1f84:	22 0f       	add	r18, r18
    1f86:	33 1f       	adc	r19, r19
    1f88:	44 1f       	adc	r20, r20
    1f8a:	55 1f       	adc	r21, r21
    1f8c:	6a 95       	dec	r22
    1f8e:	d2 f7       	brpl	.-12     	; 0x1f84 <_fpadd_parts+0xde>
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	30 40       	sbci	r19, 0x00	; 0
    1f94:	40 40       	sbci	r20, 0x00	; 0
    1f96:	50 40       	sbci	r21, 0x00	; 0
    1f98:	2e 21       	and	r18, r14
    1f9a:	3f 21       	and	r19, r15
    1f9c:	40 23       	and	r20, r16
    1f9e:	51 23       	and	r21, r17
    1fa0:	21 15       	cp	r18, r1
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	41 05       	cpc	r20, r1
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	21 f0       	breq	.+8      	; 0x1fb2 <_fpadd_parts+0x10c>
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	79 01       	movw	r14, r18
    1fb4:	8a 01       	movw	r16, r20
    1fb6:	e6 28       	or	r14, r6
    1fb8:	f7 28       	or	r15, r7
    1fba:	08 29       	or	r16, r8
    1fbc:	19 29       	or	r17, r9
    1fbe:	3c c0       	rjmp	.+120    	; 0x2038 <_fpadd_parts+0x192>
    1fc0:	23 2b       	or	r18, r19
    1fc2:	d1 f1       	breq	.+116    	; 0x2038 <_fpadd_parts+0x192>
    1fc4:	26 0e       	add	r2, r22
    1fc6:	37 1e       	adc	r3, r23
    1fc8:	35 01       	movw	r6, r10
    1fca:	46 01       	movw	r8, r12
    1fcc:	06 2e       	mov	r0, r22
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <_fpadd_parts+0x132>
    1fd0:	96 94       	lsr	r9
    1fd2:	87 94       	ror	r8
    1fd4:	77 94       	ror	r7
    1fd6:	67 94       	ror	r6
    1fd8:	0a 94       	dec	r0
    1fda:	d2 f7       	brpl	.-12     	; 0x1fd0 <_fpadd_parts+0x12a>
    1fdc:	21 e0       	ldi	r18, 0x01	; 1
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	04 c0       	rjmp	.+8      	; 0x1fee <_fpadd_parts+0x148>
    1fe6:	22 0f       	add	r18, r18
    1fe8:	33 1f       	adc	r19, r19
    1fea:	44 1f       	adc	r20, r20
    1fec:	55 1f       	adc	r21, r21
    1fee:	6a 95       	dec	r22
    1ff0:	d2 f7       	brpl	.-12     	; 0x1fe6 <_fpadd_parts+0x140>
    1ff2:	21 50       	subi	r18, 0x01	; 1
    1ff4:	30 40       	sbci	r19, 0x00	; 0
    1ff6:	40 40       	sbci	r20, 0x00	; 0
    1ff8:	50 40       	sbci	r21, 0x00	; 0
    1ffa:	2a 21       	and	r18, r10
    1ffc:	3b 21       	and	r19, r11
    1ffe:	4c 21       	and	r20, r12
    2000:	5d 21       	and	r21, r13
    2002:	21 15       	cp	r18, r1
    2004:	31 05       	cpc	r19, r1
    2006:	41 05       	cpc	r20, r1
    2008:	51 05       	cpc	r21, r1
    200a:	21 f0       	breq	.+8      	; 0x2014 <_fpadd_parts+0x16e>
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	59 01       	movw	r10, r18
    2016:	6a 01       	movw	r12, r20
    2018:	a6 28       	or	r10, r6
    201a:	b7 28       	or	r11, r7
    201c:	c8 28       	or	r12, r8
    201e:	d9 28       	or	r13, r9
    2020:	0b c0       	rjmp	.+22     	; 0x2038 <_fpadd_parts+0x192>
    2022:	82 15       	cp	r24, r2
    2024:	93 05       	cpc	r25, r3
    2026:	2c f0       	brlt	.+10     	; 0x2032 <_fpadd_parts+0x18c>
    2028:	1c 01       	movw	r2, r24
    202a:	aa 24       	eor	r10, r10
    202c:	bb 24       	eor	r11, r11
    202e:	65 01       	movw	r12, r10
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <_fpadd_parts+0x192>
    2032:	ee 24       	eor	r14, r14
    2034:	ff 24       	eor	r15, r15
    2036:	87 01       	movw	r16, r14
    2038:	11 96       	adiw	r26, 0x01	; 1
    203a:	9c 91       	ld	r25, X
    203c:	d2 01       	movw	r26, r4
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	8c 91       	ld	r24, X
    2042:	98 17       	cp	r25, r24
    2044:	09 f4       	brne	.+2      	; 0x2048 <_fpadd_parts+0x1a2>
    2046:	45 c0       	rjmp	.+138    	; 0x20d2 <_fpadd_parts+0x22c>
    2048:	99 23       	and	r25, r25
    204a:	39 f0       	breq	.+14     	; 0x205a <_fpadd_parts+0x1b4>
    204c:	a8 01       	movw	r20, r16
    204e:	97 01       	movw	r18, r14
    2050:	2a 19       	sub	r18, r10
    2052:	3b 09       	sbc	r19, r11
    2054:	4c 09       	sbc	r20, r12
    2056:	5d 09       	sbc	r21, r13
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <_fpadd_parts+0x1c0>
    205a:	a6 01       	movw	r20, r12
    205c:	95 01       	movw	r18, r10
    205e:	2e 19       	sub	r18, r14
    2060:	3f 09       	sbc	r19, r15
    2062:	40 0b       	sbc	r20, r16
    2064:	51 0b       	sbc	r21, r17
    2066:	57 fd       	sbrc	r21, 7
    2068:	08 c0       	rjmp	.+16     	; 0x207a <_fpadd_parts+0x1d4>
    206a:	11 82       	std	Z+1, r1	; 0x01
    206c:	33 82       	std	Z+3, r3	; 0x03
    206e:	22 82       	std	Z+2, r2	; 0x02
    2070:	24 83       	std	Z+4, r18	; 0x04
    2072:	35 83       	std	Z+5, r19	; 0x05
    2074:	46 83       	std	Z+6, r20	; 0x06
    2076:	57 83       	std	Z+7, r21	; 0x07
    2078:	1d c0       	rjmp	.+58     	; 0x20b4 <_fpadd_parts+0x20e>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	81 83       	std	Z+1, r24	; 0x01
    207e:	33 82       	std	Z+3, r3	; 0x03
    2080:	22 82       	std	Z+2, r2	; 0x02
    2082:	88 27       	eor	r24, r24
    2084:	99 27       	eor	r25, r25
    2086:	dc 01       	movw	r26, r24
    2088:	82 1b       	sub	r24, r18
    208a:	93 0b       	sbc	r25, r19
    208c:	a4 0b       	sbc	r26, r20
    208e:	b5 0b       	sbc	r27, r21
    2090:	84 83       	std	Z+4, r24	; 0x04
    2092:	95 83       	std	Z+5, r25	; 0x05
    2094:	a6 83       	std	Z+6, r26	; 0x06
    2096:	b7 83       	std	Z+7, r27	; 0x07
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <_fpadd_parts+0x20e>
    209a:	22 0f       	add	r18, r18
    209c:	33 1f       	adc	r19, r19
    209e:	44 1f       	adc	r20, r20
    20a0:	55 1f       	adc	r21, r21
    20a2:	24 83       	std	Z+4, r18	; 0x04
    20a4:	35 83       	std	Z+5, r19	; 0x05
    20a6:	46 83       	std	Z+6, r20	; 0x06
    20a8:	57 83       	std	Z+7, r21	; 0x07
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	93 83       	std	Z+3, r25	; 0x03
    20b2:	82 83       	std	Z+2, r24	; 0x02
    20b4:	24 81       	ldd	r18, Z+4	; 0x04
    20b6:	35 81       	ldd	r19, Z+5	; 0x05
    20b8:	46 81       	ldd	r20, Z+6	; 0x06
    20ba:	57 81       	ldd	r21, Z+7	; 0x07
    20bc:	da 01       	movw	r26, r20
    20be:	c9 01       	movw	r24, r18
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	a1 09       	sbc	r26, r1
    20c4:	b1 09       	sbc	r27, r1
    20c6:	8f 5f       	subi	r24, 0xFF	; 255
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	af 4f       	sbci	r26, 0xFF	; 255
    20cc:	bf 43       	sbci	r27, 0x3F	; 63
    20ce:	28 f3       	brcs	.-54     	; 0x209a <_fpadd_parts+0x1f4>
    20d0:	0b c0       	rjmp	.+22     	; 0x20e8 <_fpadd_parts+0x242>
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	33 82       	std	Z+3, r3	; 0x03
    20d6:	22 82       	std	Z+2, r2	; 0x02
    20d8:	ea 0c       	add	r14, r10
    20da:	fb 1c       	adc	r15, r11
    20dc:	0c 1d       	adc	r16, r12
    20de:	1d 1d       	adc	r17, r13
    20e0:	e4 82       	std	Z+4, r14	; 0x04
    20e2:	f5 82       	std	Z+5, r15	; 0x05
    20e4:	06 83       	std	Z+6, r16	; 0x06
    20e6:	17 83       	std	Z+7, r17	; 0x07
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	80 83       	st	Z, r24
    20ec:	24 81       	ldd	r18, Z+4	; 0x04
    20ee:	35 81       	ldd	r19, Z+5	; 0x05
    20f0:	46 81       	ldd	r20, Z+6	; 0x06
    20f2:	57 81       	ldd	r21, Z+7	; 0x07
    20f4:	57 ff       	sbrs	r21, 7
    20f6:	1a c0       	rjmp	.+52     	; 0x212c <_fpadd_parts+0x286>
    20f8:	c9 01       	movw	r24, r18
    20fa:	aa 27       	eor	r26, r26
    20fc:	97 fd       	sbrc	r25, 7
    20fe:	a0 95       	com	r26
    2100:	ba 2f       	mov	r27, r26
    2102:	81 70       	andi	r24, 0x01	; 1
    2104:	90 70       	andi	r25, 0x00	; 0
    2106:	a0 70       	andi	r26, 0x00	; 0
    2108:	b0 70       	andi	r27, 0x00	; 0
    210a:	56 95       	lsr	r21
    210c:	47 95       	ror	r20
    210e:	37 95       	ror	r19
    2110:	27 95       	ror	r18
    2112:	82 2b       	or	r24, r18
    2114:	93 2b       	or	r25, r19
    2116:	a4 2b       	or	r26, r20
    2118:	b5 2b       	or	r27, r21
    211a:	84 83       	std	Z+4, r24	; 0x04
    211c:	95 83       	std	Z+5, r25	; 0x05
    211e:	a6 83       	std	Z+6, r26	; 0x06
    2120:	b7 83       	std	Z+7, r27	; 0x07
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	93 83       	std	Z+3, r25	; 0x03
    212a:	82 83       	std	Z+2, r24	; 0x02
    212c:	df 01       	movw	r26, r30
    212e:	01 c0       	rjmp	.+2      	; 0x2132 <_fpadd_parts+0x28c>
    2130:	d2 01       	movw	r26, r4
    2132:	cd 01       	movw	r24, r26
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	e2 e1       	ldi	r30, 0x12	; 18
    213a:	0c 94 63 3a 	jmp	0x74c6	; 0x74c6 <__epilogue_restores__>

0000213e <__subsf3>:
    213e:	a0 e2       	ldi	r26, 0x20	; 32
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 ea       	ldi	r30, 0xA5	; 165
    2144:	f0 e1       	ldi	r31, 0x10	; 16
    2146:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <__prologue_saves__+0x18>
    214a:	69 83       	std	Y+1, r22	; 0x01
    214c:	7a 83       	std	Y+2, r23	; 0x02
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	2d 83       	std	Y+5, r18	; 0x05
    2154:	3e 83       	std	Y+6, r19	; 0x06
    2156:	4f 83       	std	Y+7, r20	; 0x07
    2158:	58 87       	std	Y+8, r21	; 0x08
    215a:	e9 e0       	ldi	r30, 0x09	; 9
    215c:	ee 2e       	mov	r14, r30
    215e:	f1 2c       	mov	r15, r1
    2160:	ec 0e       	add	r14, r28
    2162:	fd 1e       	adc	r15, r29
    2164:	ce 01       	movw	r24, r28
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	b7 01       	movw	r22, r14
    216a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    216e:	8e 01       	movw	r16, r28
    2170:	0f 5e       	subi	r16, 0xEF	; 239
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	ce 01       	movw	r24, r28
    2176:	05 96       	adiw	r24, 0x05	; 5
    2178:	b8 01       	movw	r22, r16
    217a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    217e:	8a 89       	ldd	r24, Y+18	; 0x12
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	89 27       	eor	r24, r25
    2184:	8a 8b       	std	Y+18, r24	; 0x12
    2186:	c7 01       	movw	r24, r14
    2188:	b8 01       	movw	r22, r16
    218a:	ae 01       	movw	r20, r28
    218c:	47 5e       	subi	r20, 0xE7	; 231
    218e:	5f 4f       	sbci	r21, 0xFF	; 255
    2190:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_fpadd_parts>
    2194:	0e 94 4f 14 	call	0x289e	; 0x289e <__pack_f>
    2198:	a0 96       	adiw	r28, 0x20	; 32
    219a:	e6 e0       	ldi	r30, 0x06	; 6
    219c:	0c 94 6f 3a 	jmp	0x74de	; 0x74de <__epilogue_restores__+0x18>

000021a0 <__addsf3>:
    21a0:	a0 e2       	ldi	r26, 0x20	; 32
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 ed       	ldi	r30, 0xD6	; 214
    21a6:	f0 e1       	ldi	r31, 0x10	; 16
    21a8:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <__prologue_saves__+0x18>
    21ac:	69 83       	std	Y+1, r22	; 0x01
    21ae:	7a 83       	std	Y+2, r23	; 0x02
    21b0:	8b 83       	std	Y+3, r24	; 0x03
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	2d 83       	std	Y+5, r18	; 0x05
    21b6:	3e 83       	std	Y+6, r19	; 0x06
    21b8:	4f 83       	std	Y+7, r20	; 0x07
    21ba:	58 87       	std	Y+8, r21	; 0x08
    21bc:	f9 e0       	ldi	r31, 0x09	; 9
    21be:	ef 2e       	mov	r14, r31
    21c0:	f1 2c       	mov	r15, r1
    21c2:	ec 0e       	add	r14, r28
    21c4:	fd 1e       	adc	r15, r29
    21c6:	ce 01       	movw	r24, r28
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	b7 01       	movw	r22, r14
    21cc:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    21d0:	8e 01       	movw	r16, r28
    21d2:	0f 5e       	subi	r16, 0xEF	; 239
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	ce 01       	movw	r24, r28
    21d8:	05 96       	adiw	r24, 0x05	; 5
    21da:	b8 01       	movw	r22, r16
    21dc:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    21e0:	c7 01       	movw	r24, r14
    21e2:	b8 01       	movw	r22, r16
    21e4:	ae 01       	movw	r20, r28
    21e6:	47 5e       	subi	r20, 0xE7	; 231
    21e8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ea:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_fpadd_parts>
    21ee:	0e 94 4f 14 	call	0x289e	; 0x289e <__pack_f>
    21f2:	a0 96       	adiw	r28, 0x20	; 32
    21f4:	e6 e0       	ldi	r30, 0x06	; 6
    21f6:	0c 94 6f 3a 	jmp	0x74de	; 0x74de <__epilogue_restores__+0x18>

000021fa <__mulsf3>:
    21fa:	a0 e2       	ldi	r26, 0x20	; 32
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e3 e0       	ldi	r30, 0x03	; 3
    2200:	f1 e1       	ldi	r31, 0x11	; 17
    2202:	0c 94 47 3a 	jmp	0x748e	; 0x748e <__prologue_saves__>
    2206:	69 83       	std	Y+1, r22	; 0x01
    2208:	7a 83       	std	Y+2, r23	; 0x02
    220a:	8b 83       	std	Y+3, r24	; 0x03
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	2d 83       	std	Y+5, r18	; 0x05
    2210:	3e 83       	std	Y+6, r19	; 0x06
    2212:	4f 83       	std	Y+7, r20	; 0x07
    2214:	58 87       	std	Y+8, r21	; 0x08
    2216:	ce 01       	movw	r24, r28
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	be 01       	movw	r22, r28
    221c:	67 5f       	subi	r22, 0xF7	; 247
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    2224:	ce 01       	movw	r24, r28
    2226:	05 96       	adiw	r24, 0x05	; 5
    2228:	be 01       	movw	r22, r28
    222a:	6f 5e       	subi	r22, 0xEF	; 239
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    2232:	99 85       	ldd	r25, Y+9	; 0x09
    2234:	92 30       	cpi	r25, 0x02	; 2
    2236:	88 f0       	brcs	.+34     	; 0x225a <__mulsf3+0x60>
    2238:	89 89       	ldd	r24, Y+17	; 0x11
    223a:	82 30       	cpi	r24, 0x02	; 2
    223c:	c8 f0       	brcs	.+50     	; 0x2270 <__mulsf3+0x76>
    223e:	94 30       	cpi	r25, 0x04	; 4
    2240:	19 f4       	brne	.+6      	; 0x2248 <__mulsf3+0x4e>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	51 f4       	brne	.+20     	; 0x225a <__mulsf3+0x60>
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <__mulsf3+0x56>
    2248:	84 30       	cpi	r24, 0x04	; 4
    224a:	29 f4       	brne	.+10     	; 0x2256 <__mulsf3+0x5c>
    224c:	92 30       	cpi	r25, 0x02	; 2
    224e:	81 f4       	brne	.+32     	; 0x2270 <__mulsf3+0x76>
    2250:	8b e8       	ldi	r24, 0x8B	; 139
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	c6 c0       	rjmp	.+396    	; 0x23e2 <__mulsf3+0x1e8>
    2256:	92 30       	cpi	r25, 0x02	; 2
    2258:	49 f4       	brne	.+18     	; 0x226c <__mulsf3+0x72>
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	8a 89       	ldd	r24, Y+18	; 0x12
    2260:	98 13       	cpse	r25, r24
    2262:	21 e0       	ldi	r18, 0x01	; 1
    2264:	2a 87       	std	Y+10, r18	; 0x0a
    2266:	ce 01       	movw	r24, r28
    2268:	09 96       	adiw	r24, 0x09	; 9
    226a:	bb c0       	rjmp	.+374    	; 0x23e2 <__mulsf3+0x1e8>
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	49 f4       	brne	.+18     	; 0x2282 <__mulsf3+0x88>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	8a 89       	ldd	r24, Y+18	; 0x12
    2276:	98 13       	cpse	r25, r24
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	2a 8b       	std	Y+18, r18	; 0x12
    227c:	ce 01       	movw	r24, r28
    227e:	41 96       	adiw	r24, 0x11	; 17
    2280:	b0 c0       	rjmp	.+352    	; 0x23e2 <__mulsf3+0x1e8>
    2282:	2d 84       	ldd	r2, Y+13	; 0x0d
    2284:	3e 84       	ldd	r3, Y+14	; 0x0e
    2286:	4f 84       	ldd	r4, Y+15	; 0x0f
    2288:	58 88       	ldd	r5, Y+16	; 0x10
    228a:	6d 88       	ldd	r6, Y+21	; 0x15
    228c:	7e 88       	ldd	r7, Y+22	; 0x16
    228e:	8f 88       	ldd	r8, Y+23	; 0x17
    2290:	98 8c       	ldd	r9, Y+24	; 0x18
    2292:	ee 24       	eor	r14, r14
    2294:	ff 24       	eor	r15, r15
    2296:	87 01       	movw	r16, r14
    2298:	aa 24       	eor	r10, r10
    229a:	bb 24       	eor	r11, r11
    229c:	65 01       	movw	r12, r10
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	e0 e0       	ldi	r30, 0x00	; 0
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	c1 01       	movw	r24, r2
    22ac:	81 70       	andi	r24, 0x01	; 1
    22ae:	90 70       	andi	r25, 0x00	; 0
    22b0:	89 2b       	or	r24, r25
    22b2:	e9 f0       	breq	.+58     	; 0x22ee <__mulsf3+0xf4>
    22b4:	e6 0c       	add	r14, r6
    22b6:	f7 1c       	adc	r15, r7
    22b8:	08 1d       	adc	r16, r8
    22ba:	19 1d       	adc	r17, r9
    22bc:	9a 01       	movw	r18, r20
    22be:	ab 01       	movw	r20, r22
    22c0:	2a 0d       	add	r18, r10
    22c2:	3b 1d       	adc	r19, r11
    22c4:	4c 1d       	adc	r20, r12
    22c6:	5d 1d       	adc	r21, r13
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e0       	ldi	r26, 0x00	; 0
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e6 14       	cp	r14, r6
    22d2:	f7 04       	cpc	r15, r7
    22d4:	08 05       	cpc	r16, r8
    22d6:	19 05       	cpc	r17, r9
    22d8:	20 f4       	brcc	.+8      	; 0x22e2 <__mulsf3+0xe8>
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	ba 01       	movw	r22, r20
    22e4:	a9 01       	movw	r20, r18
    22e6:	48 0f       	add	r20, r24
    22e8:	59 1f       	adc	r21, r25
    22ea:	6a 1f       	adc	r22, r26
    22ec:	7b 1f       	adc	r23, r27
    22ee:	aa 0c       	add	r10, r10
    22f0:	bb 1c       	adc	r11, r11
    22f2:	cc 1c       	adc	r12, r12
    22f4:	dd 1c       	adc	r13, r13
    22f6:	97 fe       	sbrs	r9, 7
    22f8:	08 c0       	rjmp	.+16     	; 0x230a <__mulsf3+0x110>
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e0       	ldi	r26, 0x00	; 0
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	a8 2a       	or	r10, r24
    2304:	b9 2a       	or	r11, r25
    2306:	ca 2a       	or	r12, r26
    2308:	db 2a       	or	r13, r27
    230a:	31 96       	adiw	r30, 0x01	; 1
    230c:	e0 32       	cpi	r30, 0x20	; 32
    230e:	f1 05       	cpc	r31, r1
    2310:	49 f0       	breq	.+18     	; 0x2324 <__mulsf3+0x12a>
    2312:	66 0c       	add	r6, r6
    2314:	77 1c       	adc	r7, r7
    2316:	88 1c       	adc	r8, r8
    2318:	99 1c       	adc	r9, r9
    231a:	56 94       	lsr	r5
    231c:	47 94       	ror	r4
    231e:	37 94       	ror	r3
    2320:	27 94       	ror	r2
    2322:	c3 cf       	rjmp	.-122    	; 0x22aa <__mulsf3+0xb0>
    2324:	fa 85       	ldd	r31, Y+10	; 0x0a
    2326:	ea 89       	ldd	r30, Y+18	; 0x12
    2328:	2b 89       	ldd	r18, Y+19	; 0x13
    232a:	3c 89       	ldd	r19, Y+20	; 0x14
    232c:	8b 85       	ldd	r24, Y+11	; 0x0b
    232e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2330:	28 0f       	add	r18, r24
    2332:	39 1f       	adc	r19, r25
    2334:	2e 5f       	subi	r18, 0xFE	; 254
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	17 c0       	rjmp	.+46     	; 0x2368 <__mulsf3+0x16e>
    233a:	ca 01       	movw	r24, r20
    233c:	81 70       	andi	r24, 0x01	; 1
    233e:	90 70       	andi	r25, 0x00	; 0
    2340:	89 2b       	or	r24, r25
    2342:	61 f0       	breq	.+24     	; 0x235c <__mulsf3+0x162>
    2344:	16 95       	lsr	r17
    2346:	07 95       	ror	r16
    2348:	f7 94       	ror	r15
    234a:	e7 94       	ror	r14
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e8       	ldi	r27, 0x80	; 128
    2354:	e8 2a       	or	r14, r24
    2356:	f9 2a       	or	r15, r25
    2358:	0a 2b       	or	r16, r26
    235a:	1b 2b       	or	r17, r27
    235c:	76 95       	lsr	r23
    235e:	67 95       	ror	r22
    2360:	57 95       	ror	r21
    2362:	47 95       	ror	r20
    2364:	2f 5f       	subi	r18, 0xFF	; 255
    2366:	3f 4f       	sbci	r19, 0xFF	; 255
    2368:	77 fd       	sbrc	r23, 7
    236a:	e7 cf       	rjmp	.-50     	; 0x233a <__mulsf3+0x140>
    236c:	0c c0       	rjmp	.+24     	; 0x2386 <__mulsf3+0x18c>
    236e:	44 0f       	add	r20, r20
    2370:	55 1f       	adc	r21, r21
    2372:	66 1f       	adc	r22, r22
    2374:	77 1f       	adc	r23, r23
    2376:	17 fd       	sbrc	r17, 7
    2378:	41 60       	ori	r20, 0x01	; 1
    237a:	ee 0c       	add	r14, r14
    237c:	ff 1c       	adc	r15, r15
    237e:	00 1f       	adc	r16, r16
    2380:	11 1f       	adc	r17, r17
    2382:	21 50       	subi	r18, 0x01	; 1
    2384:	30 40       	sbci	r19, 0x00	; 0
    2386:	40 30       	cpi	r20, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	59 07       	cpc	r21, r25
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	69 07       	cpc	r22, r25
    2390:	90 e4       	ldi	r25, 0x40	; 64
    2392:	79 07       	cpc	r23, r25
    2394:	60 f3       	brcs	.-40     	; 0x236e <__mulsf3+0x174>
    2396:	2b 8f       	std	Y+27, r18	; 0x1b
    2398:	3c 8f       	std	Y+28, r19	; 0x1c
    239a:	db 01       	movw	r26, r22
    239c:	ca 01       	movw	r24, r20
    239e:	8f 77       	andi	r24, 0x7F	; 127
    23a0:	90 70       	andi	r25, 0x00	; 0
    23a2:	a0 70       	andi	r26, 0x00	; 0
    23a4:	b0 70       	andi	r27, 0x00	; 0
    23a6:	80 34       	cpi	r24, 0x40	; 64
    23a8:	91 05       	cpc	r25, r1
    23aa:	a1 05       	cpc	r26, r1
    23ac:	b1 05       	cpc	r27, r1
    23ae:	61 f4       	brne	.+24     	; 0x23c8 <__mulsf3+0x1ce>
    23b0:	47 fd       	sbrc	r20, 7
    23b2:	0a c0       	rjmp	.+20     	; 0x23c8 <__mulsf3+0x1ce>
    23b4:	e1 14       	cp	r14, r1
    23b6:	f1 04       	cpc	r15, r1
    23b8:	01 05       	cpc	r16, r1
    23ba:	11 05       	cpc	r17, r1
    23bc:	29 f0       	breq	.+10     	; 0x23c8 <__mulsf3+0x1ce>
    23be:	40 5c       	subi	r20, 0xC0	; 192
    23c0:	5f 4f       	sbci	r21, 0xFF	; 255
    23c2:	6f 4f       	sbci	r22, 0xFF	; 255
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	40 78       	andi	r20, 0x80	; 128
    23c8:	1a 8e       	std	Y+26, r1	; 0x1a
    23ca:	fe 17       	cp	r31, r30
    23cc:	11 f0       	breq	.+4      	; 0x23d2 <__mulsf3+0x1d8>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	8a 8f       	std	Y+26, r24	; 0x1a
    23d2:	4d 8f       	std	Y+29, r20	; 0x1d
    23d4:	5e 8f       	std	Y+30, r21	; 0x1e
    23d6:	6f 8f       	std	Y+31, r22	; 0x1f
    23d8:	78 a3       	std	Y+32, r23	; 0x20
    23da:	83 e0       	ldi	r24, 0x03	; 3
    23dc:	89 8f       	std	Y+25, r24	; 0x19
    23de:	ce 01       	movw	r24, r28
    23e0:	49 96       	adiw	r24, 0x19	; 25
    23e2:	0e 94 4f 14 	call	0x289e	; 0x289e <__pack_f>
    23e6:	a0 96       	adiw	r28, 0x20	; 32
    23e8:	e2 e1       	ldi	r30, 0x12	; 18
    23ea:	0c 94 63 3a 	jmp	0x74c6	; 0x74c6 <__epilogue_restores__>

000023ee <__divsf3>:
    23ee:	a8 e1       	ldi	r26, 0x18	; 24
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	ed ef       	ldi	r30, 0xFD	; 253
    23f4:	f1 e1       	ldi	r31, 0x11	; 17
    23f6:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__prologue_saves__+0x10>
    23fa:	69 83       	std	Y+1, r22	; 0x01
    23fc:	7a 83       	std	Y+2, r23	; 0x02
    23fe:	8b 83       	std	Y+3, r24	; 0x03
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	2d 83       	std	Y+5, r18	; 0x05
    2404:	3e 83       	std	Y+6, r19	; 0x06
    2406:	4f 83       	std	Y+7, r20	; 0x07
    2408:	58 87       	std	Y+8, r21	; 0x08
    240a:	b9 e0       	ldi	r27, 0x09	; 9
    240c:	eb 2e       	mov	r14, r27
    240e:	f1 2c       	mov	r15, r1
    2410:	ec 0e       	add	r14, r28
    2412:	fd 1e       	adc	r15, r29
    2414:	ce 01       	movw	r24, r28
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	b7 01       	movw	r22, r14
    241a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    241e:	8e 01       	movw	r16, r28
    2420:	0f 5e       	subi	r16, 0xEF	; 239
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	ce 01       	movw	r24, r28
    2426:	05 96       	adiw	r24, 0x05	; 5
    2428:	b8 01       	movw	r22, r16
    242a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    242e:	29 85       	ldd	r18, Y+9	; 0x09
    2430:	22 30       	cpi	r18, 0x02	; 2
    2432:	08 f4       	brcc	.+2      	; 0x2436 <__divsf3+0x48>
    2434:	7e c0       	rjmp	.+252    	; 0x2532 <__divsf3+0x144>
    2436:	39 89       	ldd	r19, Y+17	; 0x11
    2438:	32 30       	cpi	r19, 0x02	; 2
    243a:	10 f4       	brcc	.+4      	; 0x2440 <__divsf3+0x52>
    243c:	b8 01       	movw	r22, r16
    243e:	7c c0       	rjmp	.+248    	; 0x2538 <__divsf3+0x14a>
    2440:	8a 85       	ldd	r24, Y+10	; 0x0a
    2442:	9a 89       	ldd	r25, Y+18	; 0x12
    2444:	89 27       	eor	r24, r25
    2446:	8a 87       	std	Y+10, r24	; 0x0a
    2448:	24 30       	cpi	r18, 0x04	; 4
    244a:	11 f0       	breq	.+4      	; 0x2450 <__divsf3+0x62>
    244c:	22 30       	cpi	r18, 0x02	; 2
    244e:	31 f4       	brne	.+12     	; 0x245c <__divsf3+0x6e>
    2450:	23 17       	cp	r18, r19
    2452:	09 f0       	breq	.+2      	; 0x2456 <__divsf3+0x68>
    2454:	6e c0       	rjmp	.+220    	; 0x2532 <__divsf3+0x144>
    2456:	6b e8       	ldi	r22, 0x8B	; 139
    2458:	70 e0       	ldi	r23, 0x00	; 0
    245a:	6e c0       	rjmp	.+220    	; 0x2538 <__divsf3+0x14a>
    245c:	34 30       	cpi	r19, 0x04	; 4
    245e:	39 f4       	brne	.+14     	; 0x246e <__divsf3+0x80>
    2460:	1d 86       	std	Y+13, r1	; 0x0d
    2462:	1e 86       	std	Y+14, r1	; 0x0e
    2464:	1f 86       	std	Y+15, r1	; 0x0f
    2466:	18 8a       	std	Y+16, r1	; 0x10
    2468:	1c 86       	std	Y+12, r1	; 0x0c
    246a:	1b 86       	std	Y+11, r1	; 0x0b
    246c:	04 c0       	rjmp	.+8      	; 0x2476 <__divsf3+0x88>
    246e:	32 30       	cpi	r19, 0x02	; 2
    2470:	21 f4       	brne	.+8      	; 0x247a <__divsf3+0x8c>
    2472:	84 e0       	ldi	r24, 0x04	; 4
    2474:	89 87       	std	Y+9, r24	; 0x09
    2476:	b7 01       	movw	r22, r14
    2478:	5f c0       	rjmp	.+190    	; 0x2538 <__divsf3+0x14a>
    247a:	2b 85       	ldd	r18, Y+11	; 0x0b
    247c:	3c 85       	ldd	r19, Y+12	; 0x0c
    247e:	8b 89       	ldd	r24, Y+19	; 0x13
    2480:	9c 89       	ldd	r25, Y+20	; 0x14
    2482:	28 1b       	sub	r18, r24
    2484:	39 0b       	sbc	r19, r25
    2486:	3c 87       	std	Y+12, r19	; 0x0c
    2488:	2b 87       	std	Y+11, r18	; 0x0b
    248a:	ed 84       	ldd	r14, Y+13	; 0x0d
    248c:	fe 84       	ldd	r15, Y+14	; 0x0e
    248e:	0f 85       	ldd	r16, Y+15	; 0x0f
    2490:	18 89       	ldd	r17, Y+16	; 0x10
    2492:	ad 88       	ldd	r10, Y+21	; 0x15
    2494:	be 88       	ldd	r11, Y+22	; 0x16
    2496:	cf 88       	ldd	r12, Y+23	; 0x17
    2498:	d8 8c       	ldd	r13, Y+24	; 0x18
    249a:	ea 14       	cp	r14, r10
    249c:	fb 04       	cpc	r15, r11
    249e:	0c 05       	cpc	r16, r12
    24a0:	1d 05       	cpc	r17, r13
    24a2:	40 f4       	brcc	.+16     	; 0x24b4 <__divsf3+0xc6>
    24a4:	ee 0c       	add	r14, r14
    24a6:	ff 1c       	adc	r15, r15
    24a8:	00 1f       	adc	r16, r16
    24aa:	11 1f       	adc	r17, r17
    24ac:	21 50       	subi	r18, 0x01	; 1
    24ae:	30 40       	sbci	r19, 0x00	; 0
    24b0:	3c 87       	std	Y+12, r19	; 0x0c
    24b2:	2b 87       	std	Y+11, r18	; 0x0b
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a0 e0       	ldi	r26, 0x00	; 0
    24c2:	b0 e4       	ldi	r27, 0x40	; 64
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	ea 14       	cp	r14, r10
    24ca:	fb 04       	cpc	r15, r11
    24cc:	0c 05       	cpc	r16, r12
    24ce:	1d 05       	cpc	r17, r13
    24d0:	40 f0       	brcs	.+16     	; 0x24e2 <__divsf3+0xf4>
    24d2:	28 2b       	or	r18, r24
    24d4:	39 2b       	or	r19, r25
    24d6:	4a 2b       	or	r20, r26
    24d8:	5b 2b       	or	r21, r27
    24da:	ea 18       	sub	r14, r10
    24dc:	fb 08       	sbc	r15, r11
    24de:	0c 09       	sbc	r16, r12
    24e0:	1d 09       	sbc	r17, r13
    24e2:	b6 95       	lsr	r27
    24e4:	a7 95       	ror	r26
    24e6:	97 95       	ror	r25
    24e8:	87 95       	ror	r24
    24ea:	ee 0c       	add	r14, r14
    24ec:	ff 1c       	adc	r15, r15
    24ee:	00 1f       	adc	r16, r16
    24f0:	11 1f       	adc	r17, r17
    24f2:	6f 5f       	subi	r22, 0xFF	; 255
    24f4:	7f 4f       	sbci	r23, 0xFF	; 255
    24f6:	6f 31       	cpi	r22, 0x1F	; 31
    24f8:	71 05       	cpc	r23, r1
    24fa:	31 f7       	brne	.-52     	; 0x24c8 <__divsf3+0xda>
    24fc:	da 01       	movw	r26, r20
    24fe:	c9 01       	movw	r24, r18
    2500:	8f 77       	andi	r24, 0x7F	; 127
    2502:	90 70       	andi	r25, 0x00	; 0
    2504:	a0 70       	andi	r26, 0x00	; 0
    2506:	b0 70       	andi	r27, 0x00	; 0
    2508:	80 34       	cpi	r24, 0x40	; 64
    250a:	91 05       	cpc	r25, r1
    250c:	a1 05       	cpc	r26, r1
    250e:	b1 05       	cpc	r27, r1
    2510:	61 f4       	brne	.+24     	; 0x252a <__divsf3+0x13c>
    2512:	27 fd       	sbrc	r18, 7
    2514:	0a c0       	rjmp	.+20     	; 0x252a <__divsf3+0x13c>
    2516:	e1 14       	cp	r14, r1
    2518:	f1 04       	cpc	r15, r1
    251a:	01 05       	cpc	r16, r1
    251c:	11 05       	cpc	r17, r1
    251e:	29 f0       	breq	.+10     	; 0x252a <__divsf3+0x13c>
    2520:	20 5c       	subi	r18, 0xC0	; 192
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	4f 4f       	sbci	r20, 0xFF	; 255
    2526:	5f 4f       	sbci	r21, 0xFF	; 255
    2528:	20 78       	andi	r18, 0x80	; 128
    252a:	2d 87       	std	Y+13, r18	; 0x0d
    252c:	3e 87       	std	Y+14, r19	; 0x0e
    252e:	4f 87       	std	Y+15, r20	; 0x0f
    2530:	58 8b       	std	Y+16, r21	; 0x10
    2532:	be 01       	movw	r22, r28
    2534:	67 5f       	subi	r22, 0xF7	; 247
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	cb 01       	movw	r24, r22
    253a:	0e 94 4f 14 	call	0x289e	; 0x289e <__pack_f>
    253e:	68 96       	adiw	r28, 0x18	; 24
    2540:	ea e0       	ldi	r30, 0x0A	; 10
    2542:	0c 94 6b 3a 	jmp	0x74d6	; 0x74d6 <__epilogue_restores__+0x10>

00002546 <__gtsf2>:
    2546:	a8 e1       	ldi	r26, 0x18	; 24
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e9 ea       	ldi	r30, 0xA9	; 169
    254c:	f2 e1       	ldi	r31, 0x12	; 18
    254e:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <__prologue_saves__+0x18>
    2552:	69 83       	std	Y+1, r22	; 0x01
    2554:	7a 83       	std	Y+2, r23	; 0x02
    2556:	8b 83       	std	Y+3, r24	; 0x03
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	2d 83       	std	Y+5, r18	; 0x05
    255c:	3e 83       	std	Y+6, r19	; 0x06
    255e:	4f 83       	std	Y+7, r20	; 0x07
    2560:	58 87       	std	Y+8, r21	; 0x08
    2562:	89 e0       	ldi	r24, 0x09	; 9
    2564:	e8 2e       	mov	r14, r24
    2566:	f1 2c       	mov	r15, r1
    2568:	ec 0e       	add	r14, r28
    256a:	fd 1e       	adc	r15, r29
    256c:	ce 01       	movw	r24, r28
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	b7 01       	movw	r22, r14
    2572:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    2576:	8e 01       	movw	r16, r28
    2578:	0f 5e       	subi	r16, 0xEF	; 239
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	ce 01       	movw	r24, r28
    257e:	05 96       	adiw	r24, 0x05	; 5
    2580:	b8 01       	movw	r22, r16
    2582:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	82 30       	cpi	r24, 0x02	; 2
    258a:	40 f0       	brcs	.+16     	; 0x259c <__gtsf2+0x56>
    258c:	89 89       	ldd	r24, Y+17	; 0x11
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	28 f0       	brcs	.+10     	; 0x259c <__gtsf2+0x56>
    2592:	c7 01       	movw	r24, r14
    2594:	b8 01       	movw	r22, r16
    2596:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__fpcmp_parts_f>
    259a:	01 c0       	rjmp	.+2      	; 0x259e <__gtsf2+0x58>
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	68 96       	adiw	r28, 0x18	; 24
    25a0:	e6 e0       	ldi	r30, 0x06	; 6
    25a2:	0c 94 6f 3a 	jmp	0x74de	; 0x74de <__epilogue_restores__+0x18>

000025a6 <__gesf2>:
    25a6:	a8 e1       	ldi	r26, 0x18	; 24
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e9 ed       	ldi	r30, 0xD9	; 217
    25ac:	f2 e1       	ldi	r31, 0x12	; 18
    25ae:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <__prologue_saves__+0x18>
    25b2:	69 83       	std	Y+1, r22	; 0x01
    25b4:	7a 83       	std	Y+2, r23	; 0x02
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    25b8:	9c 83       	std	Y+4, r25	; 0x04
    25ba:	2d 83       	std	Y+5, r18	; 0x05
    25bc:	3e 83       	std	Y+6, r19	; 0x06
    25be:	4f 83       	std	Y+7, r20	; 0x07
    25c0:	58 87       	std	Y+8, r21	; 0x08
    25c2:	89 e0       	ldi	r24, 0x09	; 9
    25c4:	e8 2e       	mov	r14, r24
    25c6:	f1 2c       	mov	r15, r1
    25c8:	ec 0e       	add	r14, r28
    25ca:	fd 1e       	adc	r15, r29
    25cc:	ce 01       	movw	r24, r28
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	b7 01       	movw	r22, r14
    25d2:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    25d6:	8e 01       	movw	r16, r28
    25d8:	0f 5e       	subi	r16, 0xEF	; 239
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	ce 01       	movw	r24, r28
    25de:	05 96       	adiw	r24, 0x05	; 5
    25e0:	b8 01       	movw	r22, r16
    25e2:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	82 30       	cpi	r24, 0x02	; 2
    25ea:	40 f0       	brcs	.+16     	; 0x25fc <__gesf2+0x56>
    25ec:	89 89       	ldd	r24, Y+17	; 0x11
    25ee:	82 30       	cpi	r24, 0x02	; 2
    25f0:	28 f0       	brcs	.+10     	; 0x25fc <__gesf2+0x56>
    25f2:	c7 01       	movw	r24, r14
    25f4:	b8 01       	movw	r22, r16
    25f6:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__fpcmp_parts_f>
    25fa:	01 c0       	rjmp	.+2      	; 0x25fe <__gesf2+0x58>
    25fc:	8f ef       	ldi	r24, 0xFF	; 255
    25fe:	68 96       	adiw	r28, 0x18	; 24
    2600:	e6 e0       	ldi	r30, 0x06	; 6
    2602:	0c 94 6f 3a 	jmp	0x74de	; 0x74de <__epilogue_restores__+0x18>

00002606 <__ltsf2>:
    2606:	a8 e1       	ldi	r26, 0x18	; 24
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e9 e0       	ldi	r30, 0x09	; 9
    260c:	f3 e1       	ldi	r31, 0x13	; 19
    260e:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <__prologue_saves__+0x18>
    2612:	69 83       	std	Y+1, r22	; 0x01
    2614:	7a 83       	std	Y+2, r23	; 0x02
    2616:	8b 83       	std	Y+3, r24	; 0x03
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	2d 83       	std	Y+5, r18	; 0x05
    261c:	3e 83       	std	Y+6, r19	; 0x06
    261e:	4f 83       	std	Y+7, r20	; 0x07
    2620:	58 87       	std	Y+8, r21	; 0x08
    2622:	89 e0       	ldi	r24, 0x09	; 9
    2624:	e8 2e       	mov	r14, r24
    2626:	f1 2c       	mov	r15, r1
    2628:	ec 0e       	add	r14, r28
    262a:	fd 1e       	adc	r15, r29
    262c:	ce 01       	movw	r24, r28
    262e:	01 96       	adiw	r24, 0x01	; 1
    2630:	b7 01       	movw	r22, r14
    2632:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    2636:	8e 01       	movw	r16, r28
    2638:	0f 5e       	subi	r16, 0xEF	; 239
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	ce 01       	movw	r24, r28
    263e:	05 96       	adiw	r24, 0x05	; 5
    2640:	b8 01       	movw	r22, r16
    2642:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	40 f0       	brcs	.+16     	; 0x265c <__ltsf2+0x56>
    264c:	89 89       	ldd	r24, Y+17	; 0x11
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	28 f0       	brcs	.+10     	; 0x265c <__ltsf2+0x56>
    2652:	c7 01       	movw	r24, r14
    2654:	b8 01       	movw	r22, r16
    2656:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__fpcmp_parts_f>
    265a:	01 c0       	rjmp	.+2      	; 0x265e <__ltsf2+0x58>
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	68 96       	adiw	r28, 0x18	; 24
    2660:	e6 e0       	ldi	r30, 0x06	; 6
    2662:	0c 94 6f 3a 	jmp	0x74de	; 0x74de <__epilogue_restores__+0x18>

00002666 <__fixsfsi>:
    2666:	ac e0       	ldi	r26, 0x0C	; 12
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e9 e3       	ldi	r30, 0x39	; 57
    266c:	f3 e1       	ldi	r31, 0x13	; 19
    266e:	0c 94 57 3a 	jmp	0x74ae	; 0x74ae <__prologue_saves__+0x20>
    2672:	69 83       	std	Y+1, r22	; 0x01
    2674:	7a 83       	std	Y+2, r23	; 0x02
    2676:	8b 83       	std	Y+3, r24	; 0x03
    2678:	9c 83       	std	Y+4, r25	; 0x04
    267a:	ce 01       	movw	r24, r28
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	be 01       	movw	r22, r28
    2680:	6b 5f       	subi	r22, 0xFB	; 251
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__unpack_f>
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	61 f1       	breq	.+88     	; 0x26e6 <__fixsfsi+0x80>
    268e:	82 30       	cpi	r24, 0x02	; 2
    2690:	50 f1       	brcs	.+84     	; 0x26e6 <__fixsfsi+0x80>
    2692:	84 30       	cpi	r24, 0x04	; 4
    2694:	21 f4       	brne	.+8      	; 0x269e <__fixsfsi+0x38>
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	88 23       	and	r24, r24
    269a:	51 f1       	breq	.+84     	; 0x26f0 <__fixsfsi+0x8a>
    269c:	2e c0       	rjmp	.+92     	; 0x26fa <__fixsfsi+0x94>
    269e:	2f 81       	ldd	r18, Y+7	; 0x07
    26a0:	38 85       	ldd	r19, Y+8	; 0x08
    26a2:	37 fd       	sbrc	r19, 7
    26a4:	20 c0       	rjmp	.+64     	; 0x26e6 <__fixsfsi+0x80>
    26a6:	6e 81       	ldd	r22, Y+6	; 0x06
    26a8:	2f 31       	cpi	r18, 0x1F	; 31
    26aa:	31 05       	cpc	r19, r1
    26ac:	1c f0       	brlt	.+6      	; 0x26b4 <__fixsfsi+0x4e>
    26ae:	66 23       	and	r22, r22
    26b0:	f9 f0       	breq	.+62     	; 0x26f0 <__fixsfsi+0x8a>
    26b2:	23 c0       	rjmp	.+70     	; 0x26fa <__fixsfsi+0x94>
    26b4:	8e e1       	ldi	r24, 0x1E	; 30
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	82 1b       	sub	r24, r18
    26ba:	93 0b       	sbc	r25, r19
    26bc:	29 85       	ldd	r18, Y+9	; 0x09
    26be:	3a 85       	ldd	r19, Y+10	; 0x0a
    26c0:	4b 85       	ldd	r20, Y+11	; 0x0b
    26c2:	5c 85       	ldd	r21, Y+12	; 0x0c
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <__fixsfsi+0x68>
    26c6:	56 95       	lsr	r21
    26c8:	47 95       	ror	r20
    26ca:	37 95       	ror	r19
    26cc:	27 95       	ror	r18
    26ce:	8a 95       	dec	r24
    26d0:	d2 f7       	brpl	.-12     	; 0x26c6 <__fixsfsi+0x60>
    26d2:	66 23       	and	r22, r22
    26d4:	b1 f0       	breq	.+44     	; 0x2702 <__fixsfsi+0x9c>
    26d6:	50 95       	com	r21
    26d8:	40 95       	com	r20
    26da:	30 95       	com	r19
    26dc:	21 95       	neg	r18
    26de:	3f 4f       	sbci	r19, 0xFF	; 255
    26e0:	4f 4f       	sbci	r20, 0xFF	; 255
    26e2:	5f 4f       	sbci	r21, 0xFF	; 255
    26e4:	0e c0       	rjmp	.+28     	; 0x2702 <__fixsfsi+0x9c>
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	09 c0       	rjmp	.+18     	; 0x2702 <__fixsfsi+0x9c>
    26f0:	2f ef       	ldi	r18, 0xFF	; 255
    26f2:	3f ef       	ldi	r19, 0xFF	; 255
    26f4:	4f ef       	ldi	r20, 0xFF	; 255
    26f6:	5f e7       	ldi	r21, 0x7F	; 127
    26f8:	04 c0       	rjmp	.+8      	; 0x2702 <__fixsfsi+0x9c>
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	50 e8       	ldi	r21, 0x80	; 128
    2702:	b9 01       	movw	r22, r18
    2704:	ca 01       	movw	r24, r20
    2706:	2c 96       	adiw	r28, 0x0c	; 12
    2708:	e2 e0       	ldi	r30, 0x02	; 2
    270a:	0c 94 73 3a 	jmp	0x74e6	; 0x74e6 <__epilogue_restores__+0x20>

0000270e <__floatunsisf>:
    270e:	a8 e0       	ldi	r26, 0x08	; 8
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	ed e8       	ldi	r30, 0x8D	; 141
    2714:	f3 e1       	ldi	r31, 0x13	; 19
    2716:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__prologue_saves__+0x10>
    271a:	7b 01       	movw	r14, r22
    271c:	8c 01       	movw	r16, r24
    271e:	61 15       	cp	r22, r1
    2720:	71 05       	cpc	r23, r1
    2722:	81 05       	cpc	r24, r1
    2724:	91 05       	cpc	r25, r1
    2726:	19 f4       	brne	.+6      	; 0x272e <__floatunsisf+0x20>
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	60 c0       	rjmp	.+192    	; 0x27ee <__floatunsisf+0xe0>
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	89 83       	std	Y+1, r24	; 0x01
    2732:	8e e1       	ldi	r24, 0x1E	; 30
    2734:	c8 2e       	mov	r12, r24
    2736:	d1 2c       	mov	r13, r1
    2738:	dc 82       	std	Y+4, r13	; 0x04
    273a:	cb 82       	std	Y+3, r12	; 0x03
    273c:	ed 82       	std	Y+5, r14	; 0x05
    273e:	fe 82       	std	Y+6, r15	; 0x06
    2740:	0f 83       	std	Y+7, r16	; 0x07
    2742:	18 87       	std	Y+8, r17	; 0x08
    2744:	c8 01       	movw	r24, r16
    2746:	b7 01       	movw	r22, r14
    2748:	0e 94 00 14 	call	0x2800	; 0x2800 <__clzsi2>
    274c:	fc 01       	movw	r30, r24
    274e:	31 97       	sbiw	r30, 0x01	; 1
    2750:	f7 ff       	sbrs	r31, 7
    2752:	3b c0       	rjmp	.+118    	; 0x27ca <__floatunsisf+0xbc>
    2754:	22 27       	eor	r18, r18
    2756:	33 27       	eor	r19, r19
    2758:	2e 1b       	sub	r18, r30
    275a:	3f 0b       	sbc	r19, r31
    275c:	57 01       	movw	r10, r14
    275e:	68 01       	movw	r12, r16
    2760:	02 2e       	mov	r0, r18
    2762:	04 c0       	rjmp	.+8      	; 0x276c <__floatunsisf+0x5e>
    2764:	d6 94       	lsr	r13
    2766:	c7 94       	ror	r12
    2768:	b7 94       	ror	r11
    276a:	a7 94       	ror	r10
    276c:	0a 94       	dec	r0
    276e:	d2 f7       	brpl	.-12     	; 0x2764 <__floatunsisf+0x56>
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a0 e0       	ldi	r26, 0x00	; 0
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	04 c0       	rjmp	.+8      	; 0x278a <__floatunsisf+0x7c>
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	aa 1f       	adc	r26, r26
    2788:	bb 1f       	adc	r27, r27
    278a:	2a 95       	dec	r18
    278c:	d2 f7       	brpl	.-12     	; 0x2782 <__floatunsisf+0x74>
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	a1 09       	sbc	r26, r1
    2792:	b1 09       	sbc	r27, r1
    2794:	8e 21       	and	r24, r14
    2796:	9f 21       	and	r25, r15
    2798:	a0 23       	and	r26, r16
    279a:	b1 23       	and	r27, r17
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	a1 05       	cpc	r26, r1
    27a0:	b1 05       	cpc	r27, r1
    27a2:	21 f0       	breq	.+8      	; 0x27ac <__floatunsisf+0x9e>
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	70 e0       	ldi	r23, 0x00	; 0
    27ac:	4a 29       	or	r20, r10
    27ae:	5b 29       	or	r21, r11
    27b0:	6c 29       	or	r22, r12
    27b2:	7d 29       	or	r23, r13
    27b4:	4d 83       	std	Y+5, r20	; 0x05
    27b6:	5e 83       	std	Y+6, r21	; 0x06
    27b8:	6f 83       	std	Y+7, r22	; 0x07
    27ba:	78 87       	std	Y+8, r23	; 0x08
    27bc:	8e e1       	ldi	r24, 0x1E	; 30
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	8e 1b       	sub	r24, r30
    27c2:	9f 0b       	sbc	r25, r31
    27c4:	9c 83       	std	Y+4, r25	; 0x04
    27c6:	8b 83       	std	Y+3, r24	; 0x03
    27c8:	12 c0       	rjmp	.+36     	; 0x27ee <__floatunsisf+0xe0>
    27ca:	30 97       	sbiw	r30, 0x00	; 0
    27cc:	81 f0       	breq	.+32     	; 0x27ee <__floatunsisf+0xe0>
    27ce:	0e 2e       	mov	r0, r30
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <__floatunsisf+0xcc>
    27d2:	ee 0c       	add	r14, r14
    27d4:	ff 1c       	adc	r15, r15
    27d6:	00 1f       	adc	r16, r16
    27d8:	11 1f       	adc	r17, r17
    27da:	0a 94       	dec	r0
    27dc:	d2 f7       	brpl	.-12     	; 0x27d2 <__floatunsisf+0xc4>
    27de:	ed 82       	std	Y+5, r14	; 0x05
    27e0:	fe 82       	std	Y+6, r15	; 0x06
    27e2:	0f 83       	std	Y+7, r16	; 0x07
    27e4:	18 87       	std	Y+8, r17	; 0x08
    27e6:	ce 1a       	sub	r12, r30
    27e8:	df 0a       	sbc	r13, r31
    27ea:	dc 82       	std	Y+4, r13	; 0x04
    27ec:	cb 82       	std	Y+3, r12	; 0x03
    27ee:	1a 82       	std	Y+2, r1	; 0x02
    27f0:	ce 01       	movw	r24, r28
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	0e 94 4f 14 	call	0x289e	; 0x289e <__pack_f>
    27f8:	28 96       	adiw	r28, 0x08	; 8
    27fa:	ea e0       	ldi	r30, 0x0A	; 10
    27fc:	0c 94 6b 3a 	jmp	0x74d6	; 0x74d6 <__epilogue_restores__+0x10>

00002800 <__clzsi2>:
    2800:	ef 92       	push	r14
    2802:	ff 92       	push	r15
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	7b 01       	movw	r14, r22
    280a:	8c 01       	movw	r16, r24
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	e8 16       	cp	r14, r24
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	f8 06       	cpc	r15, r24
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	08 07       	cpc	r16, r24
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	18 07       	cpc	r17, r24
    281c:	88 f4       	brcc	.+34     	; 0x2840 <__clzsi2+0x40>
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	e8 16       	cp	r14, r24
    2822:	f1 04       	cpc	r15, r1
    2824:	01 05       	cpc	r16, r1
    2826:	11 05       	cpc	r17, r1
    2828:	31 f0       	breq	.+12     	; 0x2836 <__clzsi2+0x36>
    282a:	28 f0       	brcs	.+10     	; 0x2836 <__clzsi2+0x36>
    282c:	88 e0       	ldi	r24, 0x08	; 8
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a0 e0       	ldi	r26, 0x00	; 0
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	17 c0       	rjmp	.+46     	; 0x2864 <__clzsi2+0x64>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	12 c0       	rjmp	.+36     	; 0x2864 <__clzsi2+0x64>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	e8 16       	cp	r14, r24
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	f8 06       	cpc	r15, r24
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	08 07       	cpc	r16, r24
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	18 07       	cpc	r17, r24
    2850:	28 f0       	brcs	.+10     	; 0x285c <__clzsi2+0x5c>
    2852:	88 e1       	ldi	r24, 0x18	; 24
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <__clzsi2+0x64>
    285c:	80 e1       	ldi	r24, 0x10	; 16
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	a0 e0       	ldi	r26, 0x00	; 0
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	20 e2       	ldi	r18, 0x20	; 32
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	28 1b       	sub	r18, r24
    286e:	39 0b       	sbc	r19, r25
    2870:	4a 0b       	sbc	r20, r26
    2872:	5b 0b       	sbc	r21, r27
    2874:	04 c0       	rjmp	.+8      	; 0x287e <__clzsi2+0x7e>
    2876:	16 95       	lsr	r17
    2878:	07 95       	ror	r16
    287a:	f7 94       	ror	r15
    287c:	e7 94       	ror	r14
    287e:	8a 95       	dec	r24
    2880:	d2 f7       	brpl	.-12     	; 0x2876 <__clzsi2+0x76>
    2882:	f7 01       	movw	r30, r14
    2884:	ed 56       	subi	r30, 0x6D	; 109
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	28 1b       	sub	r18, r24
    288c:	31 09       	sbc	r19, r1
    288e:	41 09       	sbc	r20, r1
    2890:	51 09       	sbc	r21, r1
    2892:	c9 01       	movw	r24, r18
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	ff 90       	pop	r15
    289a:	ef 90       	pop	r14
    289c:	08 95       	ret

0000289e <__pack_f>:
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	fc 01       	movw	r30, r24
    28aa:	e4 80       	ldd	r14, Z+4	; 0x04
    28ac:	f5 80       	ldd	r15, Z+5	; 0x05
    28ae:	06 81       	ldd	r16, Z+6	; 0x06
    28b0:	17 81       	ldd	r17, Z+7	; 0x07
    28b2:	d1 80       	ldd	r13, Z+1	; 0x01
    28b4:	80 81       	ld	r24, Z
    28b6:	82 30       	cpi	r24, 0x02	; 2
    28b8:	48 f4       	brcc	.+18     	; 0x28cc <__pack_f+0x2e>
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a0 e1       	ldi	r26, 0x10	; 16
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e8 2a       	or	r14, r24
    28c4:	f9 2a       	or	r15, r25
    28c6:	0a 2b       	or	r16, r26
    28c8:	1b 2b       	or	r17, r27
    28ca:	a5 c0       	rjmp	.+330    	; 0x2a16 <__pack_f+0x178>
    28cc:	84 30       	cpi	r24, 0x04	; 4
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <__pack_f+0x34>
    28d0:	9f c0       	rjmp	.+318    	; 0x2a10 <__pack_f+0x172>
    28d2:	82 30       	cpi	r24, 0x02	; 2
    28d4:	21 f4       	brne	.+8      	; 0x28de <__pack_f+0x40>
    28d6:	ee 24       	eor	r14, r14
    28d8:	ff 24       	eor	r15, r15
    28da:	87 01       	movw	r16, r14
    28dc:	05 c0       	rjmp	.+10     	; 0x28e8 <__pack_f+0x4a>
    28de:	e1 14       	cp	r14, r1
    28e0:	f1 04       	cpc	r15, r1
    28e2:	01 05       	cpc	r16, r1
    28e4:	11 05       	cpc	r17, r1
    28e6:	19 f4       	brne	.+6      	; 0x28ee <__pack_f+0x50>
    28e8:	e0 e0       	ldi	r30, 0x00	; 0
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	96 c0       	rjmp	.+300    	; 0x2a1a <__pack_f+0x17c>
    28ee:	62 81       	ldd	r22, Z+2	; 0x02
    28f0:	73 81       	ldd	r23, Z+3	; 0x03
    28f2:	9f ef       	ldi	r25, 0xFF	; 255
    28f4:	62 38       	cpi	r22, 0x82	; 130
    28f6:	79 07       	cpc	r23, r25
    28f8:	0c f0       	brlt	.+2      	; 0x28fc <__pack_f+0x5e>
    28fa:	5b c0       	rjmp	.+182    	; 0x29b2 <__pack_f+0x114>
    28fc:	22 e8       	ldi	r18, 0x82	; 130
    28fe:	3f ef       	ldi	r19, 0xFF	; 255
    2900:	26 1b       	sub	r18, r22
    2902:	37 0b       	sbc	r19, r23
    2904:	2a 31       	cpi	r18, 0x1A	; 26
    2906:	31 05       	cpc	r19, r1
    2908:	2c f0       	brlt	.+10     	; 0x2914 <__pack_f+0x76>
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	2a c0       	rjmp	.+84     	; 0x2968 <__pack_f+0xca>
    2914:	b8 01       	movw	r22, r16
    2916:	a7 01       	movw	r20, r14
    2918:	02 2e       	mov	r0, r18
    291a:	04 c0       	rjmp	.+8      	; 0x2924 <__pack_f+0x86>
    291c:	76 95       	lsr	r23
    291e:	67 95       	ror	r22
    2920:	57 95       	ror	r21
    2922:	47 95       	ror	r20
    2924:	0a 94       	dec	r0
    2926:	d2 f7       	brpl	.-12     	; 0x291c <__pack_f+0x7e>
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a0 e0       	ldi	r26, 0x00	; 0
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	04 c0       	rjmp	.+8      	; 0x293a <__pack_f+0x9c>
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	aa 1f       	adc	r26, r26
    2938:	bb 1f       	adc	r27, r27
    293a:	2a 95       	dec	r18
    293c:	d2 f7       	brpl	.-12     	; 0x2932 <__pack_f+0x94>
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	a1 09       	sbc	r26, r1
    2942:	b1 09       	sbc	r27, r1
    2944:	8e 21       	and	r24, r14
    2946:	9f 21       	and	r25, r15
    2948:	a0 23       	and	r26, r16
    294a:	b1 23       	and	r27, r17
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	a1 05       	cpc	r26, r1
    2950:	b1 05       	cpc	r27, r1
    2952:	21 f0       	breq	.+8      	; 0x295c <__pack_f+0xbe>
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	a0 e0       	ldi	r26, 0x00	; 0
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	9a 01       	movw	r18, r20
    295e:	ab 01       	movw	r20, r22
    2960:	28 2b       	or	r18, r24
    2962:	39 2b       	or	r19, r25
    2964:	4a 2b       	or	r20, r26
    2966:	5b 2b       	or	r21, r27
    2968:	da 01       	movw	r26, r20
    296a:	c9 01       	movw	r24, r18
    296c:	8f 77       	andi	r24, 0x7F	; 127
    296e:	90 70       	andi	r25, 0x00	; 0
    2970:	a0 70       	andi	r26, 0x00	; 0
    2972:	b0 70       	andi	r27, 0x00	; 0
    2974:	80 34       	cpi	r24, 0x40	; 64
    2976:	91 05       	cpc	r25, r1
    2978:	a1 05       	cpc	r26, r1
    297a:	b1 05       	cpc	r27, r1
    297c:	39 f4       	brne	.+14     	; 0x298c <__pack_f+0xee>
    297e:	27 ff       	sbrs	r18, 7
    2980:	09 c0       	rjmp	.+18     	; 0x2994 <__pack_f+0xf6>
    2982:	20 5c       	subi	r18, 0xC0	; 192
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	4f 4f       	sbci	r20, 0xFF	; 255
    2988:	5f 4f       	sbci	r21, 0xFF	; 255
    298a:	04 c0       	rjmp	.+8      	; 0x2994 <__pack_f+0xf6>
    298c:	21 5c       	subi	r18, 0xC1	; 193
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
    2990:	4f 4f       	sbci	r20, 0xFF	; 255
    2992:	5f 4f       	sbci	r21, 0xFF	; 255
    2994:	e0 e0       	ldi	r30, 0x00	; 0
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	20 30       	cpi	r18, 0x00	; 0
    299a:	a0 e0       	ldi	r26, 0x00	; 0
    299c:	3a 07       	cpc	r19, r26
    299e:	a0 e0       	ldi	r26, 0x00	; 0
    29a0:	4a 07       	cpc	r20, r26
    29a2:	a0 e4       	ldi	r26, 0x40	; 64
    29a4:	5a 07       	cpc	r21, r26
    29a6:	10 f0       	brcs	.+4      	; 0x29ac <__pack_f+0x10e>
    29a8:	e1 e0       	ldi	r30, 0x01	; 1
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	79 01       	movw	r14, r18
    29ae:	8a 01       	movw	r16, r20
    29b0:	27 c0       	rjmp	.+78     	; 0x2a00 <__pack_f+0x162>
    29b2:	60 38       	cpi	r22, 0x80	; 128
    29b4:	71 05       	cpc	r23, r1
    29b6:	64 f5       	brge	.+88     	; 0x2a10 <__pack_f+0x172>
    29b8:	fb 01       	movw	r30, r22
    29ba:	e1 58       	subi	r30, 0x81	; 129
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	d8 01       	movw	r26, r16
    29c0:	c7 01       	movw	r24, r14
    29c2:	8f 77       	andi	r24, 0x7F	; 127
    29c4:	90 70       	andi	r25, 0x00	; 0
    29c6:	a0 70       	andi	r26, 0x00	; 0
    29c8:	b0 70       	andi	r27, 0x00	; 0
    29ca:	80 34       	cpi	r24, 0x40	; 64
    29cc:	91 05       	cpc	r25, r1
    29ce:	a1 05       	cpc	r26, r1
    29d0:	b1 05       	cpc	r27, r1
    29d2:	39 f4       	brne	.+14     	; 0x29e2 <__pack_f+0x144>
    29d4:	e7 fe       	sbrs	r14, 7
    29d6:	0d c0       	rjmp	.+26     	; 0x29f2 <__pack_f+0x154>
    29d8:	80 e4       	ldi	r24, 0x40	; 64
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	a0 e0       	ldi	r26, 0x00	; 0
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	04 c0       	rjmp	.+8      	; 0x29ea <__pack_f+0x14c>
    29e2:	8f e3       	ldi	r24, 0x3F	; 63
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	a0 e0       	ldi	r26, 0x00	; 0
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e8 0e       	add	r14, r24
    29ec:	f9 1e       	adc	r15, r25
    29ee:	0a 1f       	adc	r16, r26
    29f0:	1b 1f       	adc	r17, r27
    29f2:	17 ff       	sbrs	r17, 7
    29f4:	05 c0       	rjmp	.+10     	; 0x2a00 <__pack_f+0x162>
    29f6:	16 95       	lsr	r17
    29f8:	07 95       	ror	r16
    29fa:	f7 94       	ror	r15
    29fc:	e7 94       	ror	r14
    29fe:	31 96       	adiw	r30, 0x01	; 1
    2a00:	87 e0       	ldi	r24, 0x07	; 7
    2a02:	16 95       	lsr	r17
    2a04:	07 95       	ror	r16
    2a06:	f7 94       	ror	r15
    2a08:	e7 94       	ror	r14
    2a0a:	8a 95       	dec	r24
    2a0c:	d1 f7       	brne	.-12     	; 0x2a02 <__pack_f+0x164>
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <__pack_f+0x17c>
    2a10:	ee 24       	eor	r14, r14
    2a12:	ff 24       	eor	r15, r15
    2a14:	87 01       	movw	r16, r14
    2a16:	ef ef       	ldi	r30, 0xFF	; 255
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	6e 2f       	mov	r22, r30
    2a1c:	67 95       	ror	r22
    2a1e:	66 27       	eor	r22, r22
    2a20:	67 95       	ror	r22
    2a22:	90 2f       	mov	r25, r16
    2a24:	9f 77       	andi	r25, 0x7F	; 127
    2a26:	d7 94       	ror	r13
    2a28:	dd 24       	eor	r13, r13
    2a2a:	d7 94       	ror	r13
    2a2c:	8e 2f       	mov	r24, r30
    2a2e:	86 95       	lsr	r24
    2a30:	49 2f       	mov	r20, r25
    2a32:	46 2b       	or	r20, r22
    2a34:	58 2f       	mov	r21, r24
    2a36:	5d 29       	or	r21, r13
    2a38:	b7 01       	movw	r22, r14
    2a3a:	ca 01       	movw	r24, r20
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	ef 90       	pop	r14
    2a44:	df 90       	pop	r13
    2a46:	08 95       	ret

00002a48 <__unpack_f>:
    2a48:	fc 01       	movw	r30, r24
    2a4a:	db 01       	movw	r26, r22
    2a4c:	40 81       	ld	r20, Z
    2a4e:	51 81       	ldd	r21, Z+1	; 0x01
    2a50:	22 81       	ldd	r18, Z+2	; 0x02
    2a52:	62 2f       	mov	r22, r18
    2a54:	6f 77       	andi	r22, 0x7F	; 127
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	22 1f       	adc	r18, r18
    2a5a:	22 27       	eor	r18, r18
    2a5c:	22 1f       	adc	r18, r18
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	89 2f       	mov	r24, r25
    2a62:	88 0f       	add	r24, r24
    2a64:	82 2b       	or	r24, r18
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	99 27       	eor	r25, r25
    2a6e:	99 1f       	adc	r25, r25
    2a70:	11 96       	adiw	r26, 0x01	; 1
    2a72:	9c 93       	st	X, r25
    2a74:	11 97       	sbiw	r26, 0x01	; 1
    2a76:	21 15       	cp	r18, r1
    2a78:	31 05       	cpc	r19, r1
    2a7a:	a9 f5       	brne	.+106    	; 0x2ae6 <__unpack_f+0x9e>
    2a7c:	41 15       	cp	r20, r1
    2a7e:	51 05       	cpc	r21, r1
    2a80:	61 05       	cpc	r22, r1
    2a82:	71 05       	cpc	r23, r1
    2a84:	11 f4       	brne	.+4      	; 0x2a8a <__unpack_f+0x42>
    2a86:	82 e0       	ldi	r24, 0x02	; 2
    2a88:	37 c0       	rjmp	.+110    	; 0x2af8 <__unpack_f+0xb0>
    2a8a:	82 e8       	ldi	r24, 0x82	; 130
    2a8c:	9f ef       	ldi	r25, 0xFF	; 255
    2a8e:	13 96       	adiw	r26, 0x03	; 3
    2a90:	9c 93       	st	X, r25
    2a92:	8e 93       	st	-X, r24
    2a94:	12 97       	sbiw	r26, 0x02	; 2
    2a96:	9a 01       	movw	r18, r20
    2a98:	ab 01       	movw	r20, r22
    2a9a:	67 e0       	ldi	r22, 0x07	; 7
    2a9c:	22 0f       	add	r18, r18
    2a9e:	33 1f       	adc	r19, r19
    2aa0:	44 1f       	adc	r20, r20
    2aa2:	55 1f       	adc	r21, r21
    2aa4:	6a 95       	dec	r22
    2aa6:	d1 f7       	brne	.-12     	; 0x2a9c <__unpack_f+0x54>
    2aa8:	83 e0       	ldi	r24, 0x03	; 3
    2aaa:	8c 93       	st	X, r24
    2aac:	0d c0       	rjmp	.+26     	; 0x2ac8 <__unpack_f+0x80>
    2aae:	22 0f       	add	r18, r18
    2ab0:	33 1f       	adc	r19, r19
    2ab2:	44 1f       	adc	r20, r20
    2ab4:	55 1f       	adc	r21, r21
    2ab6:	12 96       	adiw	r26, 0x02	; 2
    2ab8:	8d 91       	ld	r24, X+
    2aba:	9c 91       	ld	r25, X
    2abc:	13 97       	sbiw	r26, 0x03	; 3
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	13 96       	adiw	r26, 0x03	; 3
    2ac2:	9c 93       	st	X, r25
    2ac4:	8e 93       	st	-X, r24
    2ac6:	12 97       	sbiw	r26, 0x02	; 2
    2ac8:	20 30       	cpi	r18, 0x00	; 0
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	38 07       	cpc	r19, r24
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	48 07       	cpc	r20, r24
    2ad2:	80 e4       	ldi	r24, 0x40	; 64
    2ad4:	58 07       	cpc	r21, r24
    2ad6:	58 f3       	brcs	.-42     	; 0x2aae <__unpack_f+0x66>
    2ad8:	14 96       	adiw	r26, 0x04	; 4
    2ada:	2d 93       	st	X+, r18
    2adc:	3d 93       	st	X+, r19
    2ade:	4d 93       	st	X+, r20
    2ae0:	5c 93       	st	X, r21
    2ae2:	17 97       	sbiw	r26, 0x07	; 7
    2ae4:	08 95       	ret
    2ae6:	2f 3f       	cpi	r18, 0xFF	; 255
    2ae8:	31 05       	cpc	r19, r1
    2aea:	79 f4       	brne	.+30     	; 0x2b0a <__unpack_f+0xc2>
    2aec:	41 15       	cp	r20, r1
    2aee:	51 05       	cpc	r21, r1
    2af0:	61 05       	cpc	r22, r1
    2af2:	71 05       	cpc	r23, r1
    2af4:	19 f4       	brne	.+6      	; 0x2afc <__unpack_f+0xb4>
    2af6:	84 e0       	ldi	r24, 0x04	; 4
    2af8:	8c 93       	st	X, r24
    2afa:	08 95       	ret
    2afc:	64 ff       	sbrs	r22, 4
    2afe:	03 c0       	rjmp	.+6      	; 0x2b06 <__unpack_f+0xbe>
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	8c 93       	st	X, r24
    2b04:	12 c0       	rjmp	.+36     	; 0x2b2a <__unpack_f+0xe2>
    2b06:	1c 92       	st	X, r1
    2b08:	10 c0       	rjmp	.+32     	; 0x2b2a <__unpack_f+0xe2>
    2b0a:	2f 57       	subi	r18, 0x7F	; 127
    2b0c:	30 40       	sbci	r19, 0x00	; 0
    2b0e:	13 96       	adiw	r26, 0x03	; 3
    2b10:	3c 93       	st	X, r19
    2b12:	2e 93       	st	-X, r18
    2b14:	12 97       	sbiw	r26, 0x02	; 2
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	8c 93       	st	X, r24
    2b1a:	87 e0       	ldi	r24, 0x07	; 7
    2b1c:	44 0f       	add	r20, r20
    2b1e:	55 1f       	adc	r21, r21
    2b20:	66 1f       	adc	r22, r22
    2b22:	77 1f       	adc	r23, r23
    2b24:	8a 95       	dec	r24
    2b26:	d1 f7       	brne	.-12     	; 0x2b1c <__unpack_f+0xd4>
    2b28:	70 64       	ori	r23, 0x40	; 64
    2b2a:	14 96       	adiw	r26, 0x04	; 4
    2b2c:	4d 93       	st	X+, r20
    2b2e:	5d 93       	st	X+, r21
    2b30:	6d 93       	st	X+, r22
    2b32:	7c 93       	st	X, r23
    2b34:	17 97       	sbiw	r26, 0x07	; 7
    2b36:	08 95       	ret

00002b38 <__fpcmp_parts_f>:
    2b38:	1f 93       	push	r17
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	fb 01       	movw	r30, r22
    2b3e:	9c 91       	ld	r25, X
    2b40:	92 30       	cpi	r25, 0x02	; 2
    2b42:	08 f4       	brcc	.+2      	; 0x2b46 <__fpcmp_parts_f+0xe>
    2b44:	47 c0       	rjmp	.+142    	; 0x2bd4 <__fpcmp_parts_f+0x9c>
    2b46:	80 81       	ld	r24, Z
    2b48:	82 30       	cpi	r24, 0x02	; 2
    2b4a:	08 f4       	brcc	.+2      	; 0x2b4e <__fpcmp_parts_f+0x16>
    2b4c:	43 c0       	rjmp	.+134    	; 0x2bd4 <__fpcmp_parts_f+0x9c>
    2b4e:	94 30       	cpi	r25, 0x04	; 4
    2b50:	51 f4       	brne	.+20     	; 0x2b66 <__fpcmp_parts_f+0x2e>
    2b52:	11 96       	adiw	r26, 0x01	; 1
    2b54:	1c 91       	ld	r17, X
    2b56:	84 30       	cpi	r24, 0x04	; 4
    2b58:	99 f5       	brne	.+102    	; 0x2bc0 <__fpcmp_parts_f+0x88>
    2b5a:	81 81       	ldd	r24, Z+1	; 0x01
    2b5c:	68 2f       	mov	r22, r24
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	61 1b       	sub	r22, r17
    2b62:	71 09       	sbc	r23, r1
    2b64:	3f c0       	rjmp	.+126    	; 0x2be4 <__fpcmp_parts_f+0xac>
    2b66:	84 30       	cpi	r24, 0x04	; 4
    2b68:	21 f0       	breq	.+8      	; 0x2b72 <__fpcmp_parts_f+0x3a>
    2b6a:	92 30       	cpi	r25, 0x02	; 2
    2b6c:	31 f4       	brne	.+12     	; 0x2b7a <__fpcmp_parts_f+0x42>
    2b6e:	82 30       	cpi	r24, 0x02	; 2
    2b70:	b9 f1       	breq	.+110    	; 0x2be0 <__fpcmp_parts_f+0xa8>
    2b72:	81 81       	ldd	r24, Z+1	; 0x01
    2b74:	88 23       	and	r24, r24
    2b76:	89 f1       	breq	.+98     	; 0x2bda <__fpcmp_parts_f+0xa2>
    2b78:	2d c0       	rjmp	.+90     	; 0x2bd4 <__fpcmp_parts_f+0x9c>
    2b7a:	11 96       	adiw	r26, 0x01	; 1
    2b7c:	1c 91       	ld	r17, X
    2b7e:	11 97       	sbiw	r26, 0x01	; 1
    2b80:	82 30       	cpi	r24, 0x02	; 2
    2b82:	f1 f0       	breq	.+60     	; 0x2bc0 <__fpcmp_parts_f+0x88>
    2b84:	81 81       	ldd	r24, Z+1	; 0x01
    2b86:	18 17       	cp	r17, r24
    2b88:	d9 f4       	brne	.+54     	; 0x2bc0 <__fpcmp_parts_f+0x88>
    2b8a:	12 96       	adiw	r26, 0x02	; 2
    2b8c:	2d 91       	ld	r18, X+
    2b8e:	3c 91       	ld	r19, X
    2b90:	13 97       	sbiw	r26, 0x03	; 3
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	93 81       	ldd	r25, Z+3	; 0x03
    2b96:	82 17       	cp	r24, r18
    2b98:	93 07       	cpc	r25, r19
    2b9a:	94 f0       	brlt	.+36     	; 0x2bc0 <__fpcmp_parts_f+0x88>
    2b9c:	28 17       	cp	r18, r24
    2b9e:	39 07       	cpc	r19, r25
    2ba0:	bc f0       	brlt	.+46     	; 0x2bd0 <__fpcmp_parts_f+0x98>
    2ba2:	14 96       	adiw	r26, 0x04	; 4
    2ba4:	8d 91       	ld	r24, X+
    2ba6:	9d 91       	ld	r25, X+
    2ba8:	0d 90       	ld	r0, X+
    2baa:	bc 91       	ld	r27, X
    2bac:	a0 2d       	mov	r26, r0
    2bae:	24 81       	ldd	r18, Z+4	; 0x04
    2bb0:	35 81       	ldd	r19, Z+5	; 0x05
    2bb2:	46 81       	ldd	r20, Z+6	; 0x06
    2bb4:	57 81       	ldd	r21, Z+7	; 0x07
    2bb6:	28 17       	cp	r18, r24
    2bb8:	39 07       	cpc	r19, r25
    2bba:	4a 07       	cpc	r20, r26
    2bbc:	5b 07       	cpc	r21, r27
    2bbe:	18 f4       	brcc	.+6      	; 0x2bc6 <__fpcmp_parts_f+0x8e>
    2bc0:	11 23       	and	r17, r17
    2bc2:	41 f0       	breq	.+16     	; 0x2bd4 <__fpcmp_parts_f+0x9c>
    2bc4:	0a c0       	rjmp	.+20     	; 0x2bda <__fpcmp_parts_f+0xa2>
    2bc6:	82 17       	cp	r24, r18
    2bc8:	93 07       	cpc	r25, r19
    2bca:	a4 07       	cpc	r26, r20
    2bcc:	b5 07       	cpc	r27, r21
    2bce:	40 f4       	brcc	.+16     	; 0x2be0 <__fpcmp_parts_f+0xa8>
    2bd0:	11 23       	and	r17, r17
    2bd2:	19 f0       	breq	.+6      	; 0x2bda <__fpcmp_parts_f+0xa2>
    2bd4:	61 e0       	ldi	r22, 0x01	; 1
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	05 c0       	rjmp	.+10     	; 0x2be4 <__fpcmp_parts_f+0xac>
    2bda:	6f ef       	ldi	r22, 0xFF	; 255
    2bdc:	7f ef       	ldi	r23, 0xFF	; 255
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <__fpcmp_parts_f+0xac>
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	cb 01       	movw	r24, r22
    2be6:	1f 91       	pop	r17
    2be8:	08 95       	ret

00002bea <ADC_VidInit>:
#include "INTERRUPT_Interface.h"
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_cfg.h"

void ADC_VidInit (void){
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62

#if VREF_USED == AVCC_5V
	ADMUX = 0x40 ;
    2bf2:	e7 e2       	ldi	r30, 0x27	; 39
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 e4       	ldi	r24, 0x40	; 64
    2bf8:	80 83       	st	Z, r24
#elif PRE_SCALAR ==   PRE_SCALAR_32
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0) ;
#elif PRE_SCALAR ==  PRE_SCALAR_64
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ;
#elif PRE_SCALAR == PRE_SCALAR_128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) ;
    2bfa:	e6 e2       	ldi	r30, 0x26	; 38
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	87 e8       	ldi	r24, 0x87	; 135
    2c00:	80 83       	st	Z, r24
#endif

#if ADJUSTED_USED == RIGHT_ADJEUSTED
	CLR_BIT(ADMUX,ADLAR);                             //CLEAR ADLAR , RIGHT_ADJEUSTED
    2c02:	a7 e2       	ldi	r26, 0x27	; 39
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e7 e2       	ldi	r30, 0x27	; 39
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	8f 7d       	andi	r24, 0xDF	; 223
    2c0e:	8c 93       	st	X, r24
#elif ADJUSTED_USED == LEFT_ADJUSTED
	SET_BIT(ADMUX,ADLAR);                             //SET ADLAR , LEFT_ADJUSTED
#endif

}
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <ADC_VidReadChannel>:

u16 ADC_VidReadChannel (u8 Copy_U8Channel){
    2c16:	2f 92       	push	r2
    2c18:	3f 92       	push	r3
    2c1a:	4f 92       	push	r4
    2c1c:	5f 92       	push	r5
    2c1e:	6f 92       	push	r6
    2c20:	7f 92       	push	r7
    2c22:	8f 92       	push	r8
    2c24:	9f 92       	push	r9
    2c26:	af 92       	push	r10
    2c28:	bf 92       	push	r11
    2c2a:	cf 92       	push	r12
    2c2c:	df 92       	push	r13
    2c2e:	ef 92       	push	r14
    2c30:	ff 92       	push	r15
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <ADC_VidReadChannel+0x26>
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0 ;                                   //to clear ADMUX
    2c42:	a7 e2       	ldi	r26, 0x27	; 39
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e7 e2       	ldi	r30, 0x27	; 39
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	80 7e       	andi	r24, 0xE0	; 224
    2c4e:	8c 93       	st	X, r24
	ADMUX |= ( 0x1F & Copy_U8Channel ) ;              //to check that the channel out of 8 pins
    2c50:	a7 e2       	ldi	r26, 0x27	; 39
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e7 e2       	ldi	r30, 0x27	; 39
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	98 2f       	mov	r25, r24
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	8f 71       	andi	r24, 0x1F	; 31
    2c60:	89 2b       	or	r24, r25
    2c62:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC) ;                            //to start conversion
    2c64:	a6 e2       	ldi	r26, 0x26	; 38
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e6 e2       	ldi	r30, 0x26	; 38
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	80 64       	ori	r24, 0x40	; 64
    2c70:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADATE) ;                           //to disable  Auto Trigger
    2c72:	a6 e2       	ldi	r26, 0x26	; 38
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e6 e2       	ldi	r30, 0x26	; 38
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 7d       	andi	r24, 0xDF	; 223
    2c7e:	8c 93       	st	X, r24
	while ( GET_BIT(ADCSRA,ADIF) == 0 ) ;             //to stac while conversion
    2c80:	e6 e2       	ldi	r30, 0x26	; 38
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    SET_BIT(ADCSRA,ADIF);                             //to clear flag
    2c86:	a6 e2       	ldi	r26, 0x26	; 38
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	e6 e2       	ldi	r30, 0x26	; 38
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	80 61       	ori	r24, 0x10	; 16
    2c92:	8c 93       	st	X, r24

#if ADJUSTED_USED == RIGHT_ADJEUSTED
    return ( (u64)ADC*VREF*1000)/MAX_DIGITAL ;        //to return Analog value in mv value
    2c94:	e4 e2       	ldi	r30, 0x24	; 36
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	5c 01       	movw	r10, r24
    2c9e:	cc 24       	eor	r12, r12
    2ca0:	dd 24       	eor	r13, r13
    2ca2:	ee 24       	eor	r14, r14
    2ca4:	ff 24       	eor	r15, r15
    2ca6:	87 01       	movw	r16, r14
    2ca8:	2a 2d       	mov	r18, r10
    2caa:	3b 2d       	mov	r19, r11
    2cac:	4c 2d       	mov	r20, r12
    2cae:	5d 2d       	mov	r21, r13
    2cb0:	6e 2d       	mov	r22, r14
    2cb2:	7f 2d       	mov	r23, r15
    2cb4:	80 2f       	mov	r24, r16
    2cb6:	91 2f       	mov	r25, r17
    2cb8:	0f 2e       	mov	r0, r31
    2cba:	f8 e8       	ldi	r31, 0x88	; 136
    2cbc:	af 2e       	mov	r10, r31
    2cbe:	f0 2d       	mov	r31, r0
    2cc0:	0f 2e       	mov	r0, r31
    2cc2:	f3 e1       	ldi	r31, 0x13	; 19
    2cc4:	bf 2e       	mov	r11, r31
    2cc6:	f0 2d       	mov	r31, r0
    2cc8:	cc 24       	eor	r12, r12
    2cca:	dd 24       	eor	r13, r13
    2ccc:	ee 24       	eor	r14, r14
    2cce:	ff 24       	eor	r15, r15
    2cd0:	00 e0       	ldi	r16, 0x00	; 0
    2cd2:	10 e0       	ldi	r17, 0x00	; 0
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    2cd8:	22 2e       	mov	r2, r18
    2cda:	33 2e       	mov	r3, r19
    2cdc:	44 2e       	mov	r4, r20
    2cde:	55 2e       	mov	r5, r21
    2ce0:	66 2e       	mov	r6, r22
    2ce2:	77 2e       	mov	r7, r23
    2ce4:	88 2e       	mov	r8, r24
    2ce6:	99 2e       	mov	r9, r25
    2ce8:	a2 2c       	mov	r10, r2
    2cea:	b3 2c       	mov	r11, r3
    2cec:	c4 2c       	mov	r12, r4
    2cee:	d5 2c       	mov	r13, r5
    2cf0:	e6 2c       	mov	r14, r6
    2cf2:	f7 2c       	mov	r15, r7
    2cf4:	08 2d       	mov	r16, r8
    2cf6:	19 2d       	mov	r17, r9
    2cf8:	2a 2d       	mov	r18, r10
    2cfa:	3b 2d       	mov	r19, r11
    2cfc:	4c 2d       	mov	r20, r12
    2cfe:	5d 2d       	mov	r21, r13
    2d00:	6e 2d       	mov	r22, r14
    2d02:	7f 2d       	mov	r23, r15
    2d04:	80 2f       	mov	r24, r16
    2d06:	91 2f       	mov	r25, r17
    2d08:	aa 24       	eor	r10, r10
    2d0a:	aa 94       	dec	r10
    2d0c:	0f 2e       	mov	r0, r31
    2d0e:	f3 e0       	ldi	r31, 0x03	; 3
    2d10:	bf 2e       	mov	r11, r31
    2d12:	f0 2d       	mov	r31, r0
    2d14:	cc 24       	eor	r12, r12
    2d16:	dd 24       	eor	r13, r13
    2d18:	ee 24       	eor	r14, r14
    2d1a:	ff 24       	eor	r15, r15
    2d1c:	00 e0       	ldi	r16, 0x00	; 0
    2d1e:	10 e0       	ldi	r17, 0x00	; 0
    2d20:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__udivdi3>
    2d24:	a2 2e       	mov	r10, r18
    2d26:	b3 2e       	mov	r11, r19
    2d28:	c4 2e       	mov	r12, r20
    2d2a:	d5 2e       	mov	r13, r21
    2d2c:	e6 2e       	mov	r14, r22
    2d2e:	f7 2e       	mov	r15, r23
    2d30:	08 2f       	mov	r16, r24
    2d32:	19 2f       	mov	r17, r25
    2d34:	2a 2d       	mov	r18, r10
    2d36:	3b 2d       	mov	r19, r11
    2d38:	4c 2d       	mov	r20, r12
    2d3a:	5d 2d       	mov	r21, r13
    2d3c:	6e 2d       	mov	r22, r14
    2d3e:	7f 2d       	mov	r23, r15
    2d40:	80 2f       	mov	r24, r16
    2d42:	91 2f       	mov	r25, r17
    2d44:	c9 01       	movw	r24, r18
#elif ADJUSTED_USED == LEFT_ADJUSTED
    ADCH = (ADCH<<2) ;
    return ( (u64)ADCH*VREF*1000)/MAX_DIGITAL ;        //to return Analog value in mv value
#endif
}
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	ff 90       	pop	r15
    2d54:	ef 90       	pop	r14
    2d56:	df 90       	pop	r13
    2d58:	cf 90       	pop	r12
    2d5a:	bf 90       	pop	r11
    2d5c:	af 90       	pop	r10
    2d5e:	9f 90       	pop	r9
    2d60:	8f 90       	pop	r8
    2d62:	7f 90       	pop	r7
    2d64:	6f 90       	pop	r6
    2d66:	5f 90       	pop	r5
    2d68:	4f 90       	pop	r4
    2d6a:	3f 90       	pop	r3
    2d6c:	2f 90       	pop	r2
    2d6e:	08 95       	ret

00002d70 <ADC_VidDeinit>:

void ADC_VidDeinit (void){
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADEN);                             //to disable ADC perpherial
    2d78:	a6 e2       	ldi	r26, 0x26	; 38
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e6 e2       	ldi	r30, 0x26	; 38
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	8f 77       	andi	r24, 0x7F	; 127
    2d84:	8c 93       	st	X, r24
    ADMUX = 0x00 ;                                    //to clear ADMUX
    2d86:	e7 e2       	ldi	r30, 0x27	; 39
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	10 82       	st	Z, r1
	/*to disable interrupt of ADC :
	 1) close global interrupt
	 2) clear ADIE
	  */
	GIE_VidDisable();
    2d8c:	0e 94 08 27 	call	0x4e10	; 0x4e10 <GIE_VidDisable>
	CLR_BIT(ADCSRA,ADIE);
    2d90:	a6 e2       	ldi	r26, 0x26	; 38
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e6 e2       	ldi	r30, 0x26	; 38
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	87 7f       	andi	r24, 0xF7	; 247
    2d9c:	8c 93       	st	X, r24
}
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <DIO_VidSetPinDirection>:
#include"STD_TYPES.h"
#include"bit_math.h"
#include"DIO_private.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	27 97       	sbiw	r28, 0x07	; 7
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	89 83       	std	Y+1, r24	; 0x01
    2dba:	6a 83       	std	Y+2, r22	; 0x02
    2dbc:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	81 30       	cpi	r24, 0x01	; 1
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <DIO_VidSetPinDirection+0x22>
    2dc4:	6f c0       	rjmp	.+222    	; 0x2ea4 <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	28 2f       	mov	r18, r24
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	3f 83       	std	Y+7, r19	; 0x07
    2dce:	2e 83       	std	Y+6, r18	; 0x06
    2dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd4:	81 30       	cpi	r24, 0x01	; 1
    2dd6:	91 05       	cpc	r25, r1
    2dd8:	49 f1       	breq	.+82     	; 0x2e2c <DIO_VidSetPinDirection+0x88>
    2dda:	2e 81       	ldd	r18, Y+6	; 0x06
    2ddc:	3f 81       	ldd	r19, Y+7	; 0x07
    2dde:	22 30       	cpi	r18, 0x02	; 2
    2de0:	31 05       	cpc	r19, r1
    2de2:	2c f4       	brge	.+10     	; 0x2dee <DIO_VidSetPinDirection+0x4a>
    2de4:	8e 81       	ldd	r24, Y+6	; 0x06
    2de6:	9f 81       	ldd	r25, Y+7	; 0x07
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	61 f0       	breq	.+24     	; 0x2e04 <DIO_VidSetPinDirection+0x60>
    2dec:	d2 c0       	rjmp	.+420    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
    2dee:	2e 81       	ldd	r18, Y+6	; 0x06
    2df0:	3f 81       	ldd	r19, Y+7	; 0x07
    2df2:	22 30       	cpi	r18, 0x02	; 2
    2df4:	31 05       	cpc	r19, r1
    2df6:	71 f1       	breq	.+92     	; 0x2e54 <DIO_VidSetPinDirection+0xb0>
    2df8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dfa:	9f 81       	ldd	r25, Y+7	; 0x07
    2dfc:	83 30       	cpi	r24, 0x03	; 3
    2dfe:	91 05       	cpc	r25, r1
    2e00:	e9 f1       	breq	.+122    	; 0x2e7c <DIO_VidSetPinDirection+0xd8>
    2e02:	c7 c0       	rjmp	.+398    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
    2e04:	aa e3       	ldi	r26, 0x3A	; 58
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	ea e3       	ldi	r30, 0x3A	; 58
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	48 2f       	mov	r20, r24
    2e10:	8a 81       	ldd	r24, Y+2	; 0x02
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	02 2e       	mov	r0, r18
    2e1c:	02 c0       	rjmp	.+4      	; 0x2e22 <DIO_VidSetPinDirection+0x7e>
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	0a 94       	dec	r0
    2e24:	e2 f7       	brpl	.-8      	; 0x2e1e <DIO_VidSetPinDirection+0x7a>
    2e26:	84 2b       	or	r24, r20
    2e28:	8c 93       	st	X, r24
    2e2a:	b3 c0       	rjmp	.+358    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
    2e2c:	a7 e3       	ldi	r26, 0x37	; 55
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	e7 e3       	ldi	r30, 0x37	; 55
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	48 2f       	mov	r20, r24
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	02 2e       	mov	r0, r18
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <DIO_VidSetPinDirection+0xa6>
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	0a 94       	dec	r0
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <DIO_VidSetPinDirection+0xa2>
    2e4e:	84 2b       	or	r24, r20
    2e50:	8c 93       	st	X, r24
    2e52:	9f c0       	rjmp	.+318    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
    2e54:	a4 e3       	ldi	r26, 0x34	; 52
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e4 e3       	ldi	r30, 0x34	; 52
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	48 2f       	mov	r20, r24
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	28 2f       	mov	r18, r24
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	02 2e       	mov	r0, r18
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <DIO_VidSetPinDirection+0xce>
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	0a 94       	dec	r0
    2e74:	e2 f7       	brpl	.-8      	; 0x2e6e <DIO_VidSetPinDirection+0xca>
    2e76:	84 2b       	or	r24, r20
    2e78:	8c 93       	st	X, r24
    2e7a:	8b c0       	rjmp	.+278    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
    2e7c:	a1 e3       	ldi	r26, 0x31	; 49
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	e1 e3       	ldi	r30, 0x31	; 49
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	48 2f       	mov	r20, r24
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	02 2e       	mov	r0, r18
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <DIO_VidSetPinDirection+0xf6>
    2e96:	88 0f       	add	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	0a 94       	dec	r0
    2e9c:	e2 f7       	brpl	.-8      	; 0x2e96 <DIO_VidSetPinDirection+0xf2>
    2e9e:	84 2b       	or	r24, r20
    2ea0:	8c 93       	st	X, r24
    2ea2:	77 c0       	rjmp	.+238    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	88 23       	and	r24, r24
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <DIO_VidSetPinDirection+0x108>
    2eaa:	73 c0       	rjmp	.+230    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	3d 83       	std	Y+5, r19	; 0x05
    2eb4:	2c 83       	std	Y+4, r18	; 0x04
    2eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	59 f1       	breq	.+86     	; 0x2f16 <DIO_VidSetPinDirection+0x172>
    2ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec4:	22 30       	cpi	r18, 0x02	; 2
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	2c f4       	brge	.+10     	; 0x2ed4 <DIO_VidSetPinDirection+0x130>
    2eca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	69 f0       	breq	.+26     	; 0x2eec <DIO_VidSetPinDirection+0x148>
    2ed2:	5f c0       	rjmp	.+190    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
    2ed4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ed6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ed8:	22 30       	cpi	r18, 0x02	; 2
    2eda:	31 05       	cpc	r19, r1
    2edc:	89 f1       	breq	.+98     	; 0x2f40 <DIO_VidSetPinDirection+0x19c>
    2ede:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee2:	83 30       	cpi	r24, 0x03	; 3
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <DIO_VidSetPinDirection+0x146>
    2ee8:	40 c0       	rjmp	.+128    	; 0x2f6a <DIO_VidSetPinDirection+0x1c6>
    2eea:	53 c0       	rjmp	.+166    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
    2eec:	aa e3       	ldi	r26, 0x3A	; 58
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	ea e3       	ldi	r30, 0x3A	; 58
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	48 2f       	mov	r20, r24
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	28 2f       	mov	r18, r24
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	02 2e       	mov	r0, r18
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <DIO_VidSetPinDirection+0x166>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	0a 94       	dec	r0
    2f0c:	e2 f7       	brpl	.-8      	; 0x2f06 <DIO_VidSetPinDirection+0x162>
    2f0e:	80 95       	com	r24
    2f10:	84 23       	and	r24, r20
    2f12:	8c 93       	st	X, r24
    2f14:	3e c0       	rjmp	.+124    	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
    2f16:	a7 e3       	ldi	r26, 0x37	; 55
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	e7 e3       	ldi	r30, 0x37	; 55
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	48 2f       	mov	r20, r24
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	02 2e       	mov	r0, r18
    2f2e:	02 c0       	rjmp	.+4      	; 0x2f34 <DIO_VidSetPinDirection+0x190>
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	0a 94       	dec	r0
    2f36:	e2 f7       	brpl	.-8      	; 0x2f30 <DIO_VidSetPinDirection+0x18c>
    2f38:	80 95       	com	r24
    2f3a:	84 23       	and	r24, r20
    2f3c:	8c 93       	st	X, r24
    2f3e:	29 c0       	rjmp	.+82     	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
    2f40:	a4 e3       	ldi	r26, 0x34	; 52
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	e4 e3       	ldi	r30, 0x34	; 52
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	48 2f       	mov	r20, r24
    2f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4e:	28 2f       	mov	r18, r24
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	02 2e       	mov	r0, r18
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <DIO_VidSetPinDirection+0x1ba>
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	0a 94       	dec	r0
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <DIO_VidSetPinDirection+0x1b6>
    2f62:	80 95       	com	r24
    2f64:	84 23       	and	r24, r20
    2f66:	8c 93       	st	X, r24
    2f68:	14 c0       	rjmp	.+40     	; 0x2f92 <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
    2f6a:	a1 e3       	ldi	r26, 0x31	; 49
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e1 e3       	ldi	r30, 0x31	; 49
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	48 2f       	mov	r20, r24
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	02 2e       	mov	r0, r18
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <DIO_VidSetPinDirection+0x1e4>
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	0a 94       	dec	r0
    2f8a:	e2 f7       	brpl	.-8      	; 0x2f84 <DIO_VidSetPinDirection+0x1e0>
    2f8c:	80 95       	com	r24
    2f8e:	84 23       	and	r24, r20
    2f90:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
    2f92:	27 96       	adiw	r28, 0x07	; 7
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <DIO_VidSetPortDirection+0x6>
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <DIO_VidSetPortDirection+0x8>
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	3c 83       	std	Y+4, r19	; 0x04
    2fbc:	2b 83       	std	Y+3, r18	; 0x03
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc2:	81 30       	cpi	r24, 0x01	; 1
    2fc4:	91 05       	cpc	r25, r1
    2fc6:	d1 f0       	breq	.+52     	; 0x2ffc <DIO_VidSetPortDirection+0x58>
    2fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fca:	3c 81       	ldd	r19, Y+4	; 0x04
    2fcc:	22 30       	cpi	r18, 0x02	; 2
    2fce:	31 05       	cpc	r19, r1
    2fd0:	2c f4       	brge	.+10     	; 0x2fdc <DIO_VidSetPortDirection+0x38>
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	61 f0       	breq	.+24     	; 0x2ff2 <DIO_VidSetPortDirection+0x4e>
    2fda:	1e c0       	rjmp	.+60     	; 0x3018 <DIO_VidSetPortDirection+0x74>
    2fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2fde:	3c 81       	ldd	r19, Y+4	; 0x04
    2fe0:	22 30       	cpi	r18, 0x02	; 2
    2fe2:	31 05       	cpc	r19, r1
    2fe4:	81 f0       	breq	.+32     	; 0x3006 <DIO_VidSetPortDirection+0x62>
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	83 30       	cpi	r24, 0x03	; 3
    2fec:	91 05       	cpc	r25, r1
    2fee:	81 f0       	breq	.+32     	; 0x3010 <DIO_VidSetPortDirection+0x6c>
    2ff0:	13 c0       	rjmp	.+38     	; 0x3018 <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
    2ff2:	ea e3       	ldi	r30, 0x3A	; 58
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	80 83       	st	Z, r24
    2ffa:	0e c0       	rjmp	.+28     	; 0x3018 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
    2ffc:	e7 e3       	ldi	r30, 0x37	; 55
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	80 83       	st	Z, r24
    3004:	09 c0       	rjmp	.+18     	; 0x3018 <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
    3006:	e4 e3       	ldi	r30, 0x34	; 52
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	80 83       	st	Z, r24
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
    3010:	e1 e3       	ldi	r30, 0x31	; 49
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	27 97       	sbiw	r28, 0x07	; 7
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	89 83       	std	Y+1, r24	; 0x01
    303c:	6a 83       	std	Y+2, r22	; 0x02
    303e:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	81 30       	cpi	r24, 0x01	; 1
    3044:	09 f0       	breq	.+2      	; 0x3048 <DIO_VidSetPinValue+0x22>
    3046:	6f c0       	rjmp	.+222    	; 0x3126 <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	3f 83       	std	Y+7, r19	; 0x07
    3050:	2e 83       	std	Y+6, r18	; 0x06
    3052:	8e 81       	ldd	r24, Y+6	; 0x06
    3054:	9f 81       	ldd	r25, Y+7	; 0x07
    3056:	81 30       	cpi	r24, 0x01	; 1
    3058:	91 05       	cpc	r25, r1
    305a:	49 f1       	breq	.+82     	; 0x30ae <DIO_VidSetPinValue+0x88>
    305c:	2e 81       	ldd	r18, Y+6	; 0x06
    305e:	3f 81       	ldd	r19, Y+7	; 0x07
    3060:	22 30       	cpi	r18, 0x02	; 2
    3062:	31 05       	cpc	r19, r1
    3064:	2c f4       	brge	.+10     	; 0x3070 <DIO_VidSetPinValue+0x4a>
    3066:	8e 81       	ldd	r24, Y+6	; 0x06
    3068:	9f 81       	ldd	r25, Y+7	; 0x07
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	61 f0       	breq	.+24     	; 0x3086 <DIO_VidSetPinValue+0x60>
    306e:	d2 c0       	rjmp	.+420    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
    3070:	2e 81       	ldd	r18, Y+6	; 0x06
    3072:	3f 81       	ldd	r19, Y+7	; 0x07
    3074:	22 30       	cpi	r18, 0x02	; 2
    3076:	31 05       	cpc	r19, r1
    3078:	71 f1       	breq	.+92     	; 0x30d6 <DIO_VidSetPinValue+0xb0>
    307a:	8e 81       	ldd	r24, Y+6	; 0x06
    307c:	9f 81       	ldd	r25, Y+7	; 0x07
    307e:	83 30       	cpi	r24, 0x03	; 3
    3080:	91 05       	cpc	r25, r1
    3082:	e9 f1       	breq	.+122    	; 0x30fe <DIO_VidSetPinValue+0xd8>
    3084:	c7 c0       	rjmp	.+398    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
    3086:	ab e3       	ldi	r26, 0x3B	; 59
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	eb e3       	ldi	r30, 0x3B	; 59
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	48 2f       	mov	r20, r24
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	02 2e       	mov	r0, r18
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <DIO_VidSetPinValue+0x7e>
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	0a 94       	dec	r0
    30a6:	e2 f7       	brpl	.-8      	; 0x30a0 <DIO_VidSetPinValue+0x7a>
    30a8:	84 2b       	or	r24, r20
    30aa:	8c 93       	st	X, r24
    30ac:	b3 c0       	rjmp	.+358    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
    30ae:	a8 e3       	ldi	r26, 0x38	; 56
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	e8 e3       	ldi	r30, 0x38	; 56
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	48 2f       	mov	r20, r24
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	28 2f       	mov	r18, r24
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	02 2e       	mov	r0, r18
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <DIO_VidSetPinValue+0xa6>
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	0a 94       	dec	r0
    30ce:	e2 f7       	brpl	.-8      	; 0x30c8 <DIO_VidSetPinValue+0xa2>
    30d0:	84 2b       	or	r24, r20
    30d2:	8c 93       	st	X, r24
    30d4:	9f c0       	rjmp	.+318    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
    30d6:	a5 e3       	ldi	r26, 0x35	; 53
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e5 e3       	ldi	r30, 0x35	; 53
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	48 2f       	mov	r20, r24
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	02 2e       	mov	r0, r18
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <DIO_VidSetPinValue+0xce>
    30f0:	88 0f       	add	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	0a 94       	dec	r0
    30f6:	e2 f7       	brpl	.-8      	; 0x30f0 <DIO_VidSetPinValue+0xca>
    30f8:	84 2b       	or	r24, r20
    30fa:	8c 93       	st	X, r24
    30fc:	8b c0       	rjmp	.+278    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
    30fe:	a2 e3       	ldi	r26, 0x32	; 50
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e2 e3       	ldi	r30, 0x32	; 50
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	48 2f       	mov	r20, r24
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	02 2e       	mov	r0, r18
    3116:	02 c0       	rjmp	.+4      	; 0x311c <DIO_VidSetPinValue+0xf6>
    3118:	88 0f       	add	r24, r24
    311a:	99 1f       	adc	r25, r25
    311c:	0a 94       	dec	r0
    311e:	e2 f7       	brpl	.-8      	; 0x3118 <DIO_VidSetPinValue+0xf2>
    3120:	84 2b       	or	r24, r20
    3122:	8c 93       	st	X, r24
    3124:	77 c0       	rjmp	.+238    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	88 23       	and	r24, r24
    312a:	09 f0       	breq	.+2      	; 0x312e <DIO_VidSetPinValue+0x108>
    312c:	73 c0       	rjmp	.+230    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	28 2f       	mov	r18, r24
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	3d 83       	std	Y+5, r19	; 0x05
    3136:	2c 83       	std	Y+4, r18	; 0x04
    3138:	8c 81       	ldd	r24, Y+4	; 0x04
    313a:	9d 81       	ldd	r25, Y+5	; 0x05
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	91 05       	cpc	r25, r1
    3140:	59 f1       	breq	.+86     	; 0x3198 <DIO_VidSetPinValue+0x172>
    3142:	2c 81       	ldd	r18, Y+4	; 0x04
    3144:	3d 81       	ldd	r19, Y+5	; 0x05
    3146:	22 30       	cpi	r18, 0x02	; 2
    3148:	31 05       	cpc	r19, r1
    314a:	2c f4       	brge	.+10     	; 0x3156 <DIO_VidSetPinValue+0x130>
    314c:	8c 81       	ldd	r24, Y+4	; 0x04
    314e:	9d 81       	ldd	r25, Y+5	; 0x05
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	69 f0       	breq	.+26     	; 0x316e <DIO_VidSetPinValue+0x148>
    3154:	5f c0       	rjmp	.+190    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
    3156:	2c 81       	ldd	r18, Y+4	; 0x04
    3158:	3d 81       	ldd	r19, Y+5	; 0x05
    315a:	22 30       	cpi	r18, 0x02	; 2
    315c:	31 05       	cpc	r19, r1
    315e:	89 f1       	breq	.+98     	; 0x31c2 <DIO_VidSetPinValue+0x19c>
    3160:	8c 81       	ldd	r24, Y+4	; 0x04
    3162:	9d 81       	ldd	r25, Y+5	; 0x05
    3164:	83 30       	cpi	r24, 0x03	; 3
    3166:	91 05       	cpc	r25, r1
    3168:	09 f4       	brne	.+2      	; 0x316c <DIO_VidSetPinValue+0x146>
    316a:	40 c0       	rjmp	.+128    	; 0x31ec <DIO_VidSetPinValue+0x1c6>
    316c:	53 c0       	rjmp	.+166    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    316e:	ab e3       	ldi	r26, 0x3B	; 59
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	eb e3       	ldi	r30, 0x3B	; 59
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	48 2f       	mov	r20, r24
    317a:	8a 81       	ldd	r24, Y+2	; 0x02
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	02 2e       	mov	r0, r18
    3186:	02 c0       	rjmp	.+4      	; 0x318c <DIO_VidSetPinValue+0x166>
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	0a 94       	dec	r0
    318e:	e2 f7       	brpl	.-8      	; 0x3188 <DIO_VidSetPinValue+0x162>
    3190:	80 95       	com	r24
    3192:	84 23       	and	r24, r20
    3194:	8c 93       	st	X, r24
    3196:	3e c0       	rjmp	.+124    	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    3198:	a8 e3       	ldi	r26, 0x38	; 56
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e8 e3       	ldi	r30, 0x38	; 56
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	48 2f       	mov	r20, r24
    31a4:	8a 81       	ldd	r24, Y+2	; 0x02
    31a6:	28 2f       	mov	r18, r24
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	02 2e       	mov	r0, r18
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <DIO_VidSetPinValue+0x190>
    31b2:	88 0f       	add	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	0a 94       	dec	r0
    31b8:	e2 f7       	brpl	.-8      	; 0x31b2 <DIO_VidSetPinValue+0x18c>
    31ba:	80 95       	com	r24
    31bc:	84 23       	and	r24, r20
    31be:	8c 93       	st	X, r24
    31c0:	29 c0       	rjmp	.+82     	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    31c2:	a5 e3       	ldi	r26, 0x35	; 53
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e5 e3       	ldi	r30, 0x35	; 53
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	48 2f       	mov	r20, r24
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	28 2f       	mov	r18, r24
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	02 2e       	mov	r0, r18
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <DIO_VidSetPinValue+0x1ba>
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	0a 94       	dec	r0
    31e2:	e2 f7       	brpl	.-8      	; 0x31dc <DIO_VidSetPinValue+0x1b6>
    31e4:	80 95       	com	r24
    31e6:	84 23       	and	r24, r20
    31e8:	8c 93       	st	X, r24
    31ea:	14 c0       	rjmp	.+40     	; 0x3214 <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    31ec:	a2 e3       	ldi	r26, 0x32	; 50
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e2 e3       	ldi	r30, 0x32	; 50
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	48 2f       	mov	r20, r24
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	28 2f       	mov	r18, r24
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	02 2e       	mov	r0, r18
    3204:	02 c0       	rjmp	.+4      	; 0x320a <DIO_VidSetPinValue+0x1e4>
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	0a 94       	dec	r0
    320c:	e2 f7       	brpl	.-8      	; 0x3206 <DIO_VidSetPinValue+0x1e0>
    320e:	80 95       	com	r24
    3210:	84 23       	and	r24, r20
    3212:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    3214:	27 96       	adiw	r28, 0x07	; 7
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	08 95       	ret

00003226 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    3226:	df 93       	push	r29
    3228:	cf 93       	push	r28
    322a:	00 d0       	rcall	.+0      	; 0x322c <DIO_VidSetPortValue+0x6>
    322c:	00 d0       	rcall	.+0      	; 0x322e <DIO_VidSetPortValue+0x8>
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	89 83       	std	Y+1, r24	; 0x01
    3234:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	3c 83       	std	Y+4, r19	; 0x04
    323e:	2b 83       	std	Y+3, r18	; 0x03
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	9c 81       	ldd	r25, Y+4	; 0x04
    3244:	81 30       	cpi	r24, 0x01	; 1
    3246:	91 05       	cpc	r25, r1
    3248:	d1 f0       	breq	.+52     	; 0x327e <DIO_VidSetPortValue+0x58>
    324a:	2b 81       	ldd	r18, Y+3	; 0x03
    324c:	3c 81       	ldd	r19, Y+4	; 0x04
    324e:	22 30       	cpi	r18, 0x02	; 2
    3250:	31 05       	cpc	r19, r1
    3252:	2c f4       	brge	.+10     	; 0x325e <DIO_VidSetPortValue+0x38>
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	9c 81       	ldd	r25, Y+4	; 0x04
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	61 f0       	breq	.+24     	; 0x3274 <DIO_VidSetPortValue+0x4e>
    325c:	1e c0       	rjmp	.+60     	; 0x329a <DIO_VidSetPortValue+0x74>
    325e:	2b 81       	ldd	r18, Y+3	; 0x03
    3260:	3c 81       	ldd	r19, Y+4	; 0x04
    3262:	22 30       	cpi	r18, 0x02	; 2
    3264:	31 05       	cpc	r19, r1
    3266:	81 f0       	breq	.+32     	; 0x3288 <DIO_VidSetPortValue+0x62>
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	83 30       	cpi	r24, 0x03	; 3
    326e:	91 05       	cpc	r25, r1
    3270:	81 f0       	breq	.+32     	; 0x3292 <DIO_VidSetPortValue+0x6c>
    3272:	13 c0       	rjmp	.+38     	; 0x329a <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    3274:	eb e3       	ldi	r30, 0x3B	; 59
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	80 83       	st	Z, r24
    327c:	0e c0       	rjmp	.+28     	; 0x329a <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    327e:	e8 e3       	ldi	r30, 0x38	; 56
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	80 83       	st	Z, r24
    3286:	09 c0       	rjmp	.+18     	; 0x329a <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    3288:	e5 e3       	ldi	r30, 0x35	; 53
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	80 83       	st	Z, r24
    3290:	04 c0       	rjmp	.+8      	; 0x329a <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    3292:	e2 e3       	ldi	r30, 0x32	; 50
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <DIO_VidTogglePinValue+0x6>
    32ae:	00 d0       	rcall	.+0      	; 0x32b0 <DIO_VidTogglePinValue+0x8>
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	89 83       	std	Y+1, r24	; 0x01
    32b6:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	3c 83       	std	Y+4, r19	; 0x04
    32c0:	2b 83       	std	Y+3, r18	; 0x03
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	9c 81       	ldd	r25, Y+4	; 0x04
    32c6:	81 30       	cpi	r24, 0x01	; 1
    32c8:	91 05       	cpc	r25, r1
    32ca:	49 f1       	breq	.+82     	; 0x331e <DIO_VidTogglePinValue+0x76>
    32cc:	2b 81       	ldd	r18, Y+3	; 0x03
    32ce:	3c 81       	ldd	r19, Y+4	; 0x04
    32d0:	22 30       	cpi	r18, 0x02	; 2
    32d2:	31 05       	cpc	r19, r1
    32d4:	2c f4       	brge	.+10     	; 0x32e0 <DIO_VidTogglePinValue+0x38>
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	61 f0       	breq	.+24     	; 0x32f6 <DIO_VidTogglePinValue+0x4e>
    32de:	5a c0       	rjmp	.+180    	; 0x3394 <DIO_VidTogglePinValue+0xec>
    32e0:	2b 81       	ldd	r18, Y+3	; 0x03
    32e2:	3c 81       	ldd	r19, Y+4	; 0x04
    32e4:	22 30       	cpi	r18, 0x02	; 2
    32e6:	31 05       	cpc	r19, r1
    32e8:	71 f1       	breq	.+92     	; 0x3346 <DIO_VidTogglePinValue+0x9e>
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	83 30       	cpi	r24, 0x03	; 3
    32f0:	91 05       	cpc	r25, r1
    32f2:	e9 f1       	breq	.+122    	; 0x336e <DIO_VidTogglePinValue+0xc6>
    32f4:	4f c0       	rjmp	.+158    	; 0x3394 <DIO_VidTogglePinValue+0xec>
		case 0 : 
			TOG_BIT( PORTA , Copy_U8Pin ) ;
    32f6:	ab e3       	ldi	r26, 0x3B	; 59
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	eb e3       	ldi	r30, 0x3B	; 59
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	48 2f       	mov	r20, r24
    3302:	8a 81       	ldd	r24, Y+2	; 0x02
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	02 2e       	mov	r0, r18
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <DIO_VidTogglePinValue+0x6c>
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	0a 94       	dec	r0
    3316:	e2 f7       	brpl	.-8      	; 0x3310 <DIO_VidTogglePinValue+0x68>
    3318:	84 27       	eor	r24, r20
    331a:	8c 93       	st	X, r24
    331c:	3b c0       	rjmp	.+118    	; 0x3394 <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOG_BIT( PORTB , Copy_U8Pin ) ;
    331e:	a8 e3       	ldi	r26, 0x38	; 56
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	e8 e3       	ldi	r30, 0x38	; 56
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 81       	ld	r24, Z
    3328:	48 2f       	mov	r20, r24
    332a:	8a 81       	ldd	r24, Y+2	; 0x02
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	02 2e       	mov	r0, r18
    3336:	02 c0       	rjmp	.+4      	; 0x333c <DIO_VidTogglePinValue+0x94>
    3338:	88 0f       	add	r24, r24
    333a:	99 1f       	adc	r25, r25
    333c:	0a 94       	dec	r0
    333e:	e2 f7       	brpl	.-8      	; 0x3338 <DIO_VidTogglePinValue+0x90>
    3340:	84 27       	eor	r24, r20
    3342:	8c 93       	st	X, r24
    3344:	27 c0       	rjmp	.+78     	; 0x3394 <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOG_BIT( PORTC , Copy_U8Pin ) ;
    3346:	a5 e3       	ldi	r26, 0x35	; 53
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e5 e3       	ldi	r30, 0x35	; 53
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	48 2f       	mov	r20, r24
    3352:	8a 81       	ldd	r24, Y+2	; 0x02
    3354:	28 2f       	mov	r18, r24
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	02 2e       	mov	r0, r18
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <DIO_VidTogglePinValue+0xbc>
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	0a 94       	dec	r0
    3366:	e2 f7       	brpl	.-8      	; 0x3360 <DIO_VidTogglePinValue+0xb8>
    3368:	84 27       	eor	r24, r20
    336a:	8c 93       	st	X, r24
    336c:	13 c0       	rjmp	.+38     	; 0x3394 <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOG_BIT( PORTD , Copy_U8Pin ) ;
    336e:	a2 e3       	ldi	r26, 0x32	; 50
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e2 e3       	ldi	r30, 0x32	; 50
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	48 2f       	mov	r20, r24
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	02 2e       	mov	r0, r18
    3386:	02 c0       	rjmp	.+4      	; 0x338c <DIO_VidTogglePinValue+0xe4>
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	0a 94       	dec	r0
    338e:	e2 f7       	brpl	.-8      	; 0x3388 <DIO_VidTogglePinValue+0xe0>
    3390:	84 27       	eor	r24, r20
    3392:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <DIO_U8GetPinValue+0x6>
    33a8:	00 d0       	rcall	.+0      	; 0x33aa <DIO_U8GetPinValue+0x8>
    33aa:	00 d0       	rcall	.+0      	; 0x33ac <DIO_U8GetPinValue+0xa>
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	89 83       	std	Y+1, r24	; 0x01
    33b2:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	28 2f       	mov	r18, r24
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	3d 83       	std	Y+5, r19	; 0x05
    33bc:	2c 83       	std	Y+4, r18	; 0x04
    33be:	4c 81       	ldd	r20, Y+4	; 0x04
    33c0:	5d 81       	ldd	r21, Y+5	; 0x05
    33c2:	41 30       	cpi	r20, 0x01	; 1
    33c4:	51 05       	cpc	r21, r1
    33c6:	49 f1       	breq	.+82     	; 0x341a <DIO_U8GetPinValue+0x78>
    33c8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ca:	9d 81       	ldd	r25, Y+5	; 0x05
    33cc:	82 30       	cpi	r24, 0x02	; 2
    33ce:	91 05       	cpc	r25, r1
    33d0:	34 f4       	brge	.+12     	; 0x33de <DIO_U8GetPinValue+0x3c>
    33d2:	2c 81       	ldd	r18, Y+4	; 0x04
    33d4:	3d 81       	ldd	r19, Y+5	; 0x05
    33d6:	21 15       	cp	r18, r1
    33d8:	31 05       	cpc	r19, r1
    33da:	61 f0       	breq	.+24     	; 0x33f4 <DIO_U8GetPinValue+0x52>
    33dc:	57 c0       	rjmp	.+174    	; 0x348c <DIO_U8GetPinValue+0xea>
    33de:	4c 81       	ldd	r20, Y+4	; 0x04
    33e0:	5d 81       	ldd	r21, Y+5	; 0x05
    33e2:	42 30       	cpi	r20, 0x02	; 2
    33e4:	51 05       	cpc	r21, r1
    33e6:	61 f1       	breq	.+88     	; 0x3440 <DIO_U8GetPinValue+0x9e>
    33e8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ea:	9d 81       	ldd	r25, Y+5	; 0x05
    33ec:	83 30       	cpi	r24, 0x03	; 3
    33ee:	91 05       	cpc	r25, r1
    33f0:	d1 f1       	breq	.+116    	; 0x3466 <DIO_U8GetPinValue+0xc4>
    33f2:	4c c0       	rjmp	.+152    	; 0x348c <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    33f4:	e9 e3       	ldi	r30, 0x39	; 57
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	88 2f       	mov	r24, r24
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	a9 01       	movw	r20, r18
    3406:	02 c0       	rjmp	.+4      	; 0x340c <DIO_U8GetPinValue+0x6a>
    3408:	55 95       	asr	r21
    340a:	47 95       	ror	r20
    340c:	8a 95       	dec	r24
    340e:	e2 f7       	brpl	.-8      	; 0x3408 <DIO_U8GetPinValue+0x66>
    3410:	ca 01       	movw	r24, r20
    3412:	58 2f       	mov	r21, r24
    3414:	51 70       	andi	r21, 0x01	; 1
    3416:	5b 83       	std	Y+3, r21	; 0x03
    3418:	3a c0       	rjmp	.+116    	; 0x348e <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    341a:	e6 e3       	ldi	r30, 0x36	; 54
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	80 81       	ld	r24, Z
    3420:	28 2f       	mov	r18, r24
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	a9 01       	movw	r20, r18
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <DIO_U8GetPinValue+0x90>
    342e:	55 95       	asr	r21
    3430:	47 95       	ror	r20
    3432:	8a 95       	dec	r24
    3434:	e2 f7       	brpl	.-8      	; 0x342e <DIO_U8GetPinValue+0x8c>
    3436:	ca 01       	movw	r24, r20
    3438:	58 2f       	mov	r21, r24
    343a:	51 70       	andi	r21, 0x01	; 1
    343c:	5b 83       	std	Y+3, r21	; 0x03
    343e:	27 c0       	rjmp	.+78     	; 0x348e <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    3440:	e3 e3       	ldi	r30, 0x33	; 51
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	88 2f       	mov	r24, r24
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	a9 01       	movw	r20, r18
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <DIO_U8GetPinValue+0xb6>
    3454:	55 95       	asr	r21
    3456:	47 95       	ror	r20
    3458:	8a 95       	dec	r24
    345a:	e2 f7       	brpl	.-8      	; 0x3454 <DIO_U8GetPinValue+0xb2>
    345c:	ca 01       	movw	r24, r20
    345e:	58 2f       	mov	r21, r24
    3460:	51 70       	andi	r21, 0x01	; 1
    3462:	5b 83       	std	Y+3, r21	; 0x03
    3464:	14 c0       	rjmp	.+40     	; 0x348e <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    3466:	e0 e3       	ldi	r30, 0x30	; 48
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	8a 81       	ldd	r24, Y+2	; 0x02
    3472:	88 2f       	mov	r24, r24
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	a9 01       	movw	r20, r18
    3478:	02 c0       	rjmp	.+4      	; 0x347e <DIO_U8GetPinValue+0xdc>
    347a:	55 95       	asr	r21
    347c:	47 95       	ror	r20
    347e:	8a 95       	dec	r24
    3480:	e2 f7       	brpl	.-8      	; 0x347a <DIO_U8GetPinValue+0xd8>
    3482:	ca 01       	movw	r24, r20
    3484:	58 2f       	mov	r21, r24
    3486:	51 70       	andi	r21, 0x01	; 1
    3488:	5b 83       	std	Y+3, r21	; 0x03
    348a:	01 c0       	rjmp	.+2      	; 0x348e <DIO_U8GetPinValue+0xec>
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <DIO_U8GetPinValue+0xf0>
	}//end switch
}//end FUNC DIO_VidU8PinValue
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	8e 83       	std	Y+6, r24	; 0x06
    3492:	8e 81       	ldd	r24, Y+6	; 0x06
    3494:	26 96       	adiw	r28, 0x06	; 6
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
    34a6:	af 92       	push	r10
    34a8:	bf 92       	push	r11
    34aa:	cf 92       	push	r12
    34ac:	df 92       	push	r13
    34ae:	ef 92       	push	r14
    34b0:	ff 92       	push	r15
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	60 97       	sbiw	r28, 0x10	; 16
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	69 83       	std	Y+1, r22	; 0x01
    34cc:	7a 83       	std	Y+2, r23	; 0x02
    34ce:	8b 83       	std	Y+3, r24	; 0x03
    34d0:	9c 83       	std	Y+4, r25	; 0x04
    34d2:	2d 83       	std	Y+5, r18	; 0x05
    34d4:	3e 83       	std	Y+6, r19	; 0x06
    34d6:	4f 83       	std	Y+7, r20	; 0x07
    34d8:	58 87       	std	Y+8, r21	; 0x08
    34da:	e9 86       	std	Y+9, r14	; 0x09
    34dc:	fa 86       	std	Y+10, r15	; 0x0a
    34de:	0b 87       	std	Y+11, r16	; 0x0b
    34e0:	1c 87       	std	Y+12, r17	; 0x0c
    34e2:	ad 86       	std	Y+13, r10	; 0x0d
    34e4:	be 86       	std	Y+14, r11	; 0x0e
    34e6:	cf 86       	std	Y+15, r12	; 0x0f
    34e8:	d8 8a       	std	Y+16, r13	; 0x10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    34ea:	29 81       	ldd	r18, Y+1	; 0x01
    34ec:	3a 81       	ldd	r19, Y+2	; 0x02
    34ee:	4b 81       	ldd	r20, Y+3	; 0x03
    34f0:	5c 81       	ldd	r21, Y+4	; 0x04
    34f2:	8d 81       	ldd	r24, Y+5	; 0x05
    34f4:	9e 81       	ldd	r25, Y+6	; 0x06
    34f6:	af 81       	ldd	r26, Y+7	; 0x07
    34f8:	b8 85       	ldd	r27, Y+8	; 0x08
    34fa:	79 01       	movw	r14, r18
    34fc:	8a 01       	movw	r16, r20
    34fe:	e8 1a       	sub	r14, r24
    3500:	f9 0a       	sbc	r15, r25
    3502:	0a 0b       	sbc	r16, r26
    3504:	1b 0b       	sbc	r17, r27
    3506:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3508:	3e 8d       	ldd	r19, Y+30	; 0x1e
    350a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    350c:	58 a1       	ldd	r21, Y+32	; 0x20
    350e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3510:	9e 85       	ldd	r25, Y+14	; 0x0e
    3512:	af 85       	ldd	r26, Y+15	; 0x0f
    3514:	b8 89       	ldd	r27, Y+16	; 0x10
    3516:	28 1b       	sub	r18, r24
    3518:	39 0b       	sbc	r19, r25
    351a:	4a 0b       	sbc	r20, r26
    351c:	5b 0b       	sbc	r21, r27
    351e:	c8 01       	movw	r24, r16
    3520:	b7 01       	movw	r22, r14
    3522:	0e 94 d7 39 	call	0x73ae	; 0x73ae <__mulsi3>
    3526:	7b 01       	movw	r14, r22
    3528:	8c 01       	movw	r16, r24
    352a:	29 85       	ldd	r18, Y+9	; 0x09
    352c:	3a 85       	ldd	r19, Y+10	; 0x0a
    352e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3530:	5c 85       	ldd	r21, Y+12	; 0x0c
    3532:	8d 81       	ldd	r24, Y+5	; 0x05
    3534:	9e 81       	ldd	r25, Y+6	; 0x06
    3536:	af 81       	ldd	r26, Y+7	; 0x07
    3538:	b8 85       	ldd	r27, Y+8	; 0x08
    353a:	28 1b       	sub	r18, r24
    353c:	39 0b       	sbc	r19, r25
    353e:	4a 0b       	sbc	r20, r26
    3540:	5b 0b       	sbc	r21, r27
    3542:	c8 01       	movw	r24, r16
    3544:	b7 01       	movw	r22, r14
    3546:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__divmodsi4>
    354a:	da 01       	movw	r26, r20
    354c:	c9 01       	movw	r24, r18
    354e:	9c 01       	movw	r18, r24
    3550:	ad 01       	movw	r20, r26
    3552:	8d 85       	ldd	r24, Y+13	; 0x0d
    3554:	9e 85       	ldd	r25, Y+14	; 0x0e
    3556:	af 85       	ldd	r26, Y+15	; 0x0f
    3558:	b8 89       	ldd	r27, Y+16	; 0x10
    355a:	82 0f       	add	r24, r18
    355c:	93 1f       	adc	r25, r19
    355e:	a4 1f       	adc	r26, r20
    3560:	b5 1f       	adc	r27, r21
}
    3562:	bc 01       	movw	r22, r24
    3564:	cd 01       	movw	r24, r26
    3566:	60 96       	adiw	r28, 0x10	; 16
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	ff 90       	pop	r15
    357c:	ef 90       	pop	r14
    357e:	df 90       	pop	r13
    3580:	cf 90       	pop	r12
    3582:	bf 90       	pop	r11
    3584:	af 90       	pop	r10
    3586:	08 95       	ret

00003588 <constrain>:

float constrain( float x,float a, float b) {
    3588:	ef 92       	push	r14
    358a:	ff 92       	push	r15
    358c:	0f 93       	push	r16
    358e:	1f 93       	push	r17
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	60 97       	sbiw	r28, 0x10	; 16
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	69 83       	std	Y+1, r22	; 0x01
    35a6:	7a 83       	std	Y+2, r23	; 0x02
    35a8:	8b 83       	std	Y+3, r24	; 0x03
    35aa:	9c 83       	std	Y+4, r25	; 0x04
    35ac:	2d 83       	std	Y+5, r18	; 0x05
    35ae:	3e 83       	std	Y+6, r19	; 0x06
    35b0:	4f 83       	std	Y+7, r20	; 0x07
    35b2:	58 87       	std	Y+8, r21	; 0x08
    35b4:	e9 86       	std	Y+9, r14	; 0x09
    35b6:	fa 86       	std	Y+10, r15	; 0x0a
    35b8:	0b 87       	std	Y+11, r16	; 0x0b
    35ba:	1c 87       	std	Y+12, r17	; 0x0c
    if(x < a) {
    35bc:	69 81       	ldd	r22, Y+1	; 0x01
    35be:	7a 81       	ldd	r23, Y+2	; 0x02
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	9c 81       	ldd	r25, Y+4	; 0x04
    35c4:	2d 81       	ldd	r18, Y+5	; 0x05
    35c6:	3e 81       	ldd	r19, Y+6	; 0x06
    35c8:	4f 81       	ldd	r20, Y+7	; 0x07
    35ca:	58 85       	ldd	r21, Y+8	; 0x08
    35cc:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	4c f4       	brge	.+18     	; 0x35e6 <constrain+0x5e>
        return a;
    35d4:	8d 81       	ldd	r24, Y+5	; 0x05
    35d6:	9e 81       	ldd	r25, Y+6	; 0x06
    35d8:	af 81       	ldd	r26, Y+7	; 0x07
    35da:	b8 85       	ldd	r27, Y+8	; 0x08
    35dc:	8d 87       	std	Y+13, r24	; 0x0d
    35de:	9e 87       	std	Y+14, r25	; 0x0e
    35e0:	af 87       	std	Y+15, r26	; 0x0f
    35e2:	b8 8b       	std	Y+16, r27	; 0x10
    35e4:	1d c0       	rjmp	.+58     	; 0x3620 <constrain+0x98>
    }
    else if(b < x) {
    35e6:	69 85       	ldd	r22, Y+9	; 0x09
    35e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    35ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    35ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    35ee:	29 81       	ldd	r18, Y+1	; 0x01
    35f0:	3a 81       	ldd	r19, Y+2	; 0x02
    35f2:	4b 81       	ldd	r20, Y+3	; 0x03
    35f4:	5c 81       	ldd	r21, Y+4	; 0x04
    35f6:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    35fa:	88 23       	and	r24, r24
    35fc:	4c f4       	brge	.+18     	; 0x3610 <constrain+0x88>
        return b;
    35fe:	89 85       	ldd	r24, Y+9	; 0x09
    3600:	9a 85       	ldd	r25, Y+10	; 0x0a
    3602:	ab 85       	ldd	r26, Y+11	; 0x0b
    3604:	bc 85       	ldd	r27, Y+12	; 0x0c
    3606:	8d 87       	std	Y+13, r24	; 0x0d
    3608:	9e 87       	std	Y+14, r25	; 0x0e
    360a:	af 87       	std	Y+15, r26	; 0x0f
    360c:	b8 8b       	std	Y+16, r27	; 0x10
    360e:	08 c0       	rjmp	.+16     	; 0x3620 <constrain+0x98>
    }
    else
        return x;
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	9a 81       	ldd	r25, Y+2	; 0x02
    3614:	ab 81       	ldd	r26, Y+3	; 0x03
    3616:	bc 81       	ldd	r27, Y+4	; 0x04
    3618:	8d 87       	std	Y+13, r24	; 0x0d
    361a:	9e 87       	std	Y+14, r25	; 0x0e
    361c:	af 87       	std	Y+15, r26	; 0x0f
    361e:	b8 8b       	std	Y+16, r27	; 0x10
    3620:	8d 85       	ldd	r24, Y+13	; 0x0d
    3622:	9e 85       	ldd	r25, Y+14	; 0x0e
    3624:	af 85       	ldd	r26, Y+15	; 0x0f
    3626:	b8 89       	ldd	r27, Y+16	; 0x10
}
    3628:	bc 01       	movw	r22, r24
    362a:	cd 01       	movw	r24, r26
    362c:	60 96       	adiw	r28, 0x10	; 16
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	cd bf       	out	0x3d, r28	; 61
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	ff 90       	pop	r15
    3642:	ef 90       	pop	r14
    3644:	08 95       	ret

00003646 <OneWireTemp>:





float OneWireTemp(){
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	28 97       	sbiw	r28, 0x08	; 8
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    OneWireReset(); // Reset Pulse 
    365a:	0e 94 aa 1b 	call	0x3754	; 0x3754 <OneWireReset>
    OneWireWriteByte(0xCC); // Issue skip ROM command (CCh)
    365e:	8c ec       	ldi	r24, 0xCC	; 204
    3660:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <OneWireWriteByte>
    OneWireWriteByte(0x44); // Convert T command (44h)
    3664:	84 e4       	ldi	r24, 0x44	; 68
    3666:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <OneWireWriteByte>
    while(!BUSIN); // DS will hold line low while making measurement
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <DIO_U8GetPinValue>
    3672:	88 23       	and	r24, r24
    3674:	d1 f3       	breq	.-12     	; 0x366a <OneWireTemp+0x24>
    OneWireReset(); // Start new command sequence 
    3676:	0e 94 aa 1b 	call	0x3754	; 0x3754 <OneWireReset>
    OneWireWriteByte(0xCC); // Issue skip ROM command 
    367a:	8c ec       	ldi	r24, 0xCC	; 204
    367c:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <OneWireWriteByte>
    OneWireWriteByte(0xBE); // Read Scratchpad (BEh) - 15 bits
    3680:	8e eb       	ldi	r24, 0xBE	; 190
    3682:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <OneWireWriteByte>
    unsigned char LSB = OneWireReadByte();
    3686:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <OneWireReadByte>
    368a:	88 87       	std	Y+8, r24	; 0x08
    unsigned char MSB = OneWireReadByte();
    368c:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <OneWireReadByte>
    3690:	8f 83       	std	Y+7, r24	; 0x07
    OneWireReset(); // Stop Reading 
    3692:	0e 94 aa 1b 	call	0x3754	; 0x3754 <OneWireReset>
    unsigned int data = MSB;
    3696:	8f 81       	ldd	r24, Y+7	; 0x07
    3698:	88 2f       	mov	r24, r24
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9e 83       	std	Y+6, r25	; 0x06
    369e:	8d 83       	std	Y+5, r24	; 0x05
    float temperature = (data << 8) | LSB;
    36a0:	8d 81       	ldd	r24, Y+5	; 0x05
    36a2:	9e 81       	ldd	r25, Y+6	; 0x06
    36a4:	38 2f       	mov	r19, r24
    36a6:	22 27       	eor	r18, r18
    36a8:	88 85       	ldd	r24, Y+8	; 0x08
    36aa:	88 2f       	mov	r24, r24
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	82 2b       	or	r24, r18
    36b0:	93 2b       	or	r25, r19
    36b2:	cc 01       	movw	r24, r24
    36b4:	a0 e0       	ldi	r26, 0x00	; 0
    36b6:	b0 e0       	ldi	r27, 0x00	; 0
    36b8:	bc 01       	movw	r22, r24
    36ba:	cd 01       	movw	r24, r26
    36bc:	0e 94 87 13 	call	0x270e	; 0x270e <__floatunsisf>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	89 83       	std	Y+1, r24	; 0x01
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	ab 83       	std	Y+3, r26	; 0x03
    36ca:	bc 83       	std	Y+4, r27	; 0x04
    return (temperature/16); 
    36cc:	69 81       	ldd	r22, Y+1	; 0x01
    36ce:	7a 81       	ldd	r23, Y+2	; 0x02
    36d0:	8b 81       	ldd	r24, Y+3	; 0x03
    36d2:	9c 81       	ldd	r25, Y+4	; 0x04
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	40 e8       	ldi	r20, 0x80	; 128
    36da:	51 e4       	ldi	r21, 0x41	; 65
    36dc:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
   
}
    36e4:	bc 01       	movw	r22, r24
    36e6:	cd 01       	movw	r24, r26
    36e8:	28 96       	adiw	r28, 0x08	; 8
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <OneWireHigh>:

void OneWireHigh(){
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    BUSDIR; // Set as output
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	41 e0       	ldi	r20, 0x01	; 1
    3708:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
    BUSOUT(1); // Set high
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	41 e0       	ldi	r20, 0x01	; 1
    3712:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
}
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	08 95       	ret

0000371c <OneWireRelease>:

void OneWireRelease(){
    371c:	df 93       	push	r29
    371e:	cf 93       	push	r28
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    BUSDIR; // Set as output
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	60 e0       	ldi	r22, 0x00	; 0
    3728:	41 e0       	ldi	r20, 0x01	; 1
    372a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
    BUSOUT(0); // Set low
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	40 e0       	ldi	r20, 0x00	; 0
    3734:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
}
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <OneWireRead>:

unsigned char OneWireRead(){
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    return BUSIN;
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <DIO_U8GetPinValue>
}
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	08 95       	ret

00003754 <OneWireReset>:

unsigned int OneWireReset(){
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	df 93       	push	r29
    375a:	cf 93       	push	r28
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	ca 57       	subi	r28, 0x7A	; 122
    3762:	d0 40       	sbci	r29, 0x00	; 0
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    OneWireRelease();
    376e:	0e 94 8e 1b 	call	0x371c	; 0x371c <OneWireRelease>
    3772:	fe 01       	movw	r30, r28
    3774:	eb 58       	subi	r30, 0x8B	; 139
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	a0 e7       	ldi	r26, 0x70	; 112
    377e:	b3 e4       	ldi	r27, 0x43	; 67
    3780:	80 83       	st	Z, r24
    3782:	91 83       	std	Z+1, r25	; 0x01
    3784:	a2 83       	std	Z+2, r26	; 0x02
    3786:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3788:	8e 01       	movw	r16, r28
    378a:	0f 58       	subi	r16, 0x8F	; 143
    378c:	1f 4f       	sbci	r17, 0xFF	; 255
    378e:	fe 01       	movw	r30, r28
    3790:	eb 58       	subi	r30, 0x8B	; 139
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	60 81       	ld	r22, Z
    3796:	71 81       	ldd	r23, Z+1	; 0x01
    3798:	82 81       	ldd	r24, Z+2	; 0x02
    379a:	93 81       	ldd	r25, Z+3	; 0x03
    379c:	2b ea       	ldi	r18, 0xAB	; 171
    379e:	3a ea       	ldi	r19, 0xAA	; 170
    37a0:	4a e2       	ldi	r20, 0x2A	; 42
    37a2:	50 e4       	ldi	r21, 0x40	; 64
    37a4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	f8 01       	movw	r30, r16
    37ae:	80 83       	st	Z, r24
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	a2 83       	std	Z+2, r26	; 0x02
    37b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37b6:	fe 01       	movw	r30, r28
    37b8:	ef 58       	subi	r30, 0x8F	; 143
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	60 81       	ld	r22, Z
    37be:	71 81       	ldd	r23, Z+1	; 0x01
    37c0:	82 81       	ldd	r24, Z+2	; 0x02
    37c2:	93 81       	ldd	r25, Z+3	; 0x03
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	40 e8       	ldi	r20, 0x80	; 128
    37ca:	5f e3       	ldi	r21, 0x3F	; 63
    37cc:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    37d0:	88 23       	and	r24, r24
    37d2:	34 f4       	brge	.+12     	; 0x37e0 <OneWireReset+0x8c>
		__ticks = 1;
    37d4:	fe 01       	movw	r30, r28
    37d6:	e0 59       	subi	r30, 0x90	; 144
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	80 83       	st	Z, r24
    37de:	e0 c0       	rjmp	.+448    	; 0x39a0 <OneWireReset+0x24c>
	else if (__tmp > 255)
    37e0:	fe 01       	movw	r30, r28
    37e2:	ef 58       	subi	r30, 0x8F	; 143
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	60 81       	ld	r22, Z
    37e8:	71 81       	ldd	r23, Z+1	; 0x01
    37ea:	82 81       	ldd	r24, Z+2	; 0x02
    37ec:	93 81       	ldd	r25, Z+3	; 0x03
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	4f e7       	ldi	r20, 0x7F	; 127
    37f4:	53 e4       	ldi	r21, 0x43	; 67
    37f6:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    37fa:	18 16       	cp	r1, r24
    37fc:	0c f0       	brlt	.+2      	; 0x3800 <OneWireReset+0xac>
    37fe:	c0 c0       	rjmp	.+384    	; 0x3980 <OneWireReset+0x22c>
	{
		_delay_ms(__us / 1000.0);
    3800:	fe 01       	movw	r30, r28
    3802:	eb 58       	subi	r30, 0x8B	; 139
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	4a e7       	ldi	r20, 0x7A	; 122
    3814:	54 e4       	ldi	r21, 0x44	; 68
    3816:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	fe 01       	movw	r30, r28
    3820:	e4 59       	subi	r30, 0x94	; 148
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	80 83       	st	Z, r24
    3826:	91 83       	std	Z+1, r25	; 0x01
    3828:	a2 83       	std	Z+2, r26	; 0x02
    382a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    382c:	8e 01       	movw	r16, r28
    382e:	08 59       	subi	r16, 0x98	; 152
    3830:	1f 4f       	sbci	r17, 0xFF	; 255
    3832:	fe 01       	movw	r30, r28
    3834:	e4 59       	subi	r30, 0x94	; 148
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	60 81       	ld	r22, Z
    383a:	71 81       	ldd	r23, Z+1	; 0x01
    383c:	82 81       	ldd	r24, Z+2	; 0x02
    383e:	93 81       	ldd	r25, Z+3	; 0x03
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	4a ef       	ldi	r20, 0xFA	; 250
    3846:	54 e4       	ldi	r21, 0x44	; 68
    3848:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	f8 01       	movw	r30, r16
    3852:	80 83       	st	Z, r24
    3854:	91 83       	std	Z+1, r25	; 0x01
    3856:	a2 83       	std	Z+2, r26	; 0x02
    3858:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    385a:	fe 01       	movw	r30, r28
    385c:	e8 59       	subi	r30, 0x98	; 152
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	60 81       	ld	r22, Z
    3862:	71 81       	ldd	r23, Z+1	; 0x01
    3864:	82 81       	ldd	r24, Z+2	; 0x02
    3866:	93 81       	ldd	r25, Z+3	; 0x03
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e8       	ldi	r20, 0x80	; 128
    386e:	5f e3       	ldi	r21, 0x3F	; 63
    3870:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    3874:	88 23       	and	r24, r24
    3876:	44 f4       	brge	.+16     	; 0x3888 <OneWireReset+0x134>
		__ticks = 1;
    3878:	fe 01       	movw	r30, r28
    387a:	ea 59       	subi	r30, 0x9A	; 154
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
    3886:	64 c0       	rjmp	.+200    	; 0x3950 <OneWireReset+0x1fc>
	else if (__tmp > 65535)
    3888:	fe 01       	movw	r30, r28
    388a:	e8 59       	subi	r30, 0x98	; 152
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	60 81       	ld	r22, Z
    3890:	71 81       	ldd	r23, Z+1	; 0x01
    3892:	82 81       	ldd	r24, Z+2	; 0x02
    3894:	93 81       	ldd	r25, Z+3	; 0x03
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	3f ef       	ldi	r19, 0xFF	; 255
    389a:	4f e7       	ldi	r20, 0x7F	; 127
    389c:	57 e4       	ldi	r21, 0x47	; 71
    389e:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    38a2:	18 16       	cp	r1, r24
    38a4:	0c f0       	brlt	.+2      	; 0x38a8 <OneWireReset+0x154>
    38a6:	43 c0       	rjmp	.+134    	; 0x392e <OneWireReset+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a8:	fe 01       	movw	r30, r28
    38aa:	e4 59       	subi	r30, 0x94	; 148
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	60 81       	ld	r22, Z
    38b0:	71 81       	ldd	r23, Z+1	; 0x01
    38b2:	82 81       	ldd	r24, Z+2	; 0x02
    38b4:	93 81       	ldd	r25, Z+3	; 0x03
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	8e 01       	movw	r16, r28
    38c8:	0a 59       	subi	r16, 0x9A	; 154
    38ca:	1f 4f       	sbci	r17, 0xFF	; 255
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	f8 01       	movw	r30, r16
    38da:	91 83       	std	Z+1, r25	; 0x01
    38dc:	80 83       	st	Z, r24
    38de:	1f c0       	rjmp	.+62     	; 0x391e <OneWireReset+0x1ca>
    38e0:	fe 01       	movw	r30, r28
    38e2:	ec 59       	subi	r30, 0x9C	; 156
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	88 ec       	ldi	r24, 0xC8	; 200
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38ee:	fe 01       	movw	r30, r28
    38f0:	ec 59       	subi	r30, 0x9C	; 156
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 81       	ld	r24, Z
    38f6:	91 81       	ldd	r25, Z+1	; 0x01
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	f1 f7       	brne	.-4      	; 0x38f8 <OneWireReset+0x1a4>
    38fc:	fe 01       	movw	r30, r28
    38fe:	ec 59       	subi	r30, 0x9C	; 156
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	91 83       	std	Z+1, r25	; 0x01
    3904:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3906:	de 01       	movw	r26, r28
    3908:	aa 59       	subi	r26, 0x9A	; 154
    390a:	bf 4f       	sbci	r27, 0xFF	; 255
    390c:	fe 01       	movw	r30, r28
    390e:	ea 59       	subi	r30, 0x9A	; 154
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	80 81       	ld	r24, Z
    3914:	91 81       	ldd	r25, Z+1	; 0x01
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	11 96       	adiw	r26, 0x01	; 1
    391a:	9c 93       	st	X, r25
    391c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    391e:	fe 01       	movw	r30, r28
    3920:	ea 59       	subi	r30, 0x9A	; 154
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	80 81       	ld	r24, Z
    3926:	91 81       	ldd	r25, Z+1	; 0x01
    3928:	00 97       	sbiw	r24, 0x00	; 0
    392a:	d1 f6       	brne	.-76     	; 0x38e0 <OneWireReset+0x18c>
    392c:	4b c0       	rjmp	.+150    	; 0x39c4 <OneWireReset+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    392e:	8e 01       	movw	r16, r28
    3930:	0a 59       	subi	r16, 0x9A	; 154
    3932:	1f 4f       	sbci	r17, 0xFF	; 255
    3934:	fe 01       	movw	r30, r28
    3936:	e8 59       	subi	r30, 0x98	; 152
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
    3942:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	f8 01       	movw	r30, r16
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	80 83       	st	Z, r24
    3950:	de 01       	movw	r26, r28
    3952:	ae 59       	subi	r26, 0x9E	; 158
    3954:	bf 4f       	sbci	r27, 0xFF	; 255
    3956:	fe 01       	movw	r30, r28
    3958:	ea 59       	subi	r30, 0x9A	; 154
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	80 81       	ld	r24, Z
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	11 96       	adiw	r26, 0x01	; 1
    3962:	9c 93       	st	X, r25
    3964:	8e 93       	st	-X, r24
    3966:	fe 01       	movw	r30, r28
    3968:	ee 59       	subi	r30, 0x9E	; 158
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	80 81       	ld	r24, Z
    396e:	91 81       	ldd	r25, Z+1	; 0x01
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <OneWireReset+0x21c>
    3974:	fe 01       	movw	r30, r28
    3976:	ee 59       	subi	r30, 0x9E	; 158
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
    397e:	22 c0       	rjmp	.+68     	; 0x39c4 <OneWireReset+0x270>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3980:	8e 01       	movw	r16, r28
    3982:	00 59       	subi	r16, 0x90	; 144
    3984:	1f 4f       	sbci	r17, 0xFF	; 255
    3986:	fe 01       	movw	r30, r28
    3988:	ef 58       	subi	r30, 0x8F	; 143
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	60 81       	ld	r22, Z
    398e:	71 81       	ldd	r23, Z+1	; 0x01
    3990:	82 81       	ldd	r24, Z+2	; 0x02
    3992:	93 81       	ldd	r25, Z+3	; 0x03
    3994:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	f8 01       	movw	r30, r16
    399e:	80 83       	st	Z, r24
    39a0:	de 01       	movw	r26, r28
    39a2:	af 59       	subi	r26, 0x9F	; 159
    39a4:	bf 4f       	sbci	r27, 0xFF	; 255
    39a6:	fe 01       	movw	r30, r28
    39a8:	e0 59       	subi	r30, 0x90	; 144
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	80 81       	ld	r24, Z
    39ae:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39b0:	fe 01       	movw	r30, r28
    39b2:	ef 59       	subi	r30, 0x9F	; 159
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	80 81       	ld	r24, Z
    39b8:	8a 95       	dec	r24
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <OneWireReset+0x264>
    39bc:	fe 01       	movw	r30, r28
    39be:	ef 59       	subi	r30, 0x9F	; 159
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	80 83       	st	Z, r24
    39c4:	fe 01       	movw	r30, r28
    39c6:	e3 5a       	subi	r30, 0xA3	; 163
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	a0 e7       	ldi	r26, 0x70	; 112
    39d0:	b3 e4       	ldi	r27, 0x43	; 67
    39d2:	80 83       	st	Z, r24
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	a2 83       	std	Z+2, r26	; 0x02
    39d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39da:	8e 01       	movw	r16, r28
    39dc:	07 5a       	subi	r16, 0xA7	; 167
    39de:	1f 4f       	sbci	r17, 0xFF	; 255
    39e0:	fe 01       	movw	r30, r28
    39e2:	e3 5a       	subi	r30, 0xA3	; 163
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	60 81       	ld	r22, Z
    39e8:	71 81       	ldd	r23, Z+1	; 0x01
    39ea:	82 81       	ldd	r24, Z+2	; 0x02
    39ec:	93 81       	ldd	r25, Z+3	; 0x03
    39ee:	2b ea       	ldi	r18, 0xAB	; 171
    39f0:	3a ea       	ldi	r19, 0xAA	; 170
    39f2:	4a e2       	ldi	r20, 0x2A	; 42
    39f4:	50 e4       	ldi	r21, 0x40	; 64
    39f6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	f8 01       	movw	r30, r16
    3a00:	80 83       	st	Z, r24
    3a02:	91 83       	std	Z+1, r25	; 0x01
    3a04:	a2 83       	std	Z+2, r26	; 0x02
    3a06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e7 5a       	subi	r30, 0xA7	; 167
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	60 81       	ld	r22, Z
    3a10:	71 81       	ldd	r23, Z+1	; 0x01
    3a12:	82 81       	ldd	r24, Z+2	; 0x02
    3a14:	93 81       	ldd	r25, Z+3	; 0x03
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	40 e8       	ldi	r20, 0x80	; 128
    3a1c:	5f e3       	ldi	r21, 0x3F	; 63
    3a1e:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    3a22:	88 23       	and	r24, r24
    3a24:	34 f4       	brge	.+12     	; 0x3a32 <OneWireReset+0x2de>
		__ticks = 1;
    3a26:	fe 01       	movw	r30, r28
    3a28:	e8 5a       	subi	r30, 0xA8	; 168
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	80 83       	st	Z, r24
    3a30:	e0 c0       	rjmp	.+448    	; 0x3bf2 <OneWireReset+0x49e>
	else if (__tmp > 255)
    3a32:	fe 01       	movw	r30, r28
    3a34:	e7 5a       	subi	r30, 0xA7	; 167
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	60 81       	ld	r22, Z
    3a3a:	71 81       	ldd	r23, Z+1	; 0x01
    3a3c:	82 81       	ldd	r24, Z+2	; 0x02
    3a3e:	93 81       	ldd	r25, Z+3	; 0x03
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	4f e7       	ldi	r20, 0x7F	; 127
    3a46:	53 e4       	ldi	r21, 0x43	; 67
    3a48:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    3a4c:	18 16       	cp	r1, r24
    3a4e:	0c f0       	brlt	.+2      	; 0x3a52 <OneWireReset+0x2fe>
    3a50:	c0 c0       	rjmp	.+384    	; 0x3bd2 <OneWireReset+0x47e>
	{
		_delay_ms(__us / 1000.0);
    3a52:	fe 01       	movw	r30, r28
    3a54:	e3 5a       	subi	r30, 0xA3	; 163
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	60 81       	ld	r22, Z
    3a5a:	71 81       	ldd	r23, Z+1	; 0x01
    3a5c:	82 81       	ldd	r24, Z+2	; 0x02
    3a5e:	93 81       	ldd	r25, Z+3	; 0x03
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	4a e7       	ldi	r20, 0x7A	; 122
    3a66:	54 e4       	ldi	r21, 0x44	; 68
    3a68:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	fe 01       	movw	r30, r28
    3a72:	ec 5a       	subi	r30, 0xAC	; 172
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 83       	st	Z, r24
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	a2 83       	std	Z+2, r26	; 0x02
    3a7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7e:	8e 01       	movw	r16, r28
    3a80:	00 5b       	subi	r16, 0xB0	; 176
    3a82:	1f 4f       	sbci	r17, 0xFF	; 255
    3a84:	fe 01       	movw	r30, r28
    3a86:	ec 5a       	subi	r30, 0xAC	; 172
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	60 81       	ld	r22, Z
    3a8c:	71 81       	ldd	r23, Z+1	; 0x01
    3a8e:	82 81       	ldd	r24, Z+2	; 0x02
    3a90:	93 81       	ldd	r25, Z+3	; 0x03
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	4a ef       	ldi	r20, 0xFA	; 250
    3a98:	54 e4       	ldi	r21, 0x44	; 68
    3a9a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	80 83       	st	Z, r24
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	a2 83       	std	Z+2, r26	; 0x02
    3aaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aac:	fe 01       	movw	r30, r28
    3aae:	e0 5b       	subi	r30, 0xB0	; 176
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	60 81       	ld	r22, Z
    3ab4:	71 81       	ldd	r23, Z+1	; 0x01
    3ab6:	82 81       	ldd	r24, Z+2	; 0x02
    3ab8:	93 81       	ldd	r25, Z+3	; 0x03
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e8       	ldi	r20, 0x80	; 128
    3ac0:	5f e3       	ldi	r21, 0x3F	; 63
    3ac2:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    3ac6:	88 23       	and	r24, r24
    3ac8:	44 f4       	brge	.+16     	; 0x3ada <OneWireReset+0x386>
		__ticks = 1;
    3aca:	fe 01       	movw	r30, r28
    3acc:	e2 5b       	subi	r30, 0xB2	; 178
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
    3ad8:	64 c0       	rjmp	.+200    	; 0x3ba2 <OneWireReset+0x44e>
	else if (__tmp > 65535)
    3ada:	fe 01       	movw	r30, r28
    3adc:	e0 5b       	subi	r30, 0xB0	; 176
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	3f ef       	ldi	r19, 0xFF	; 255
    3aec:	4f e7       	ldi	r20, 0x7F	; 127
    3aee:	57 e4       	ldi	r21, 0x47	; 71
    3af0:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    3af4:	18 16       	cp	r1, r24
    3af6:	0c f0       	brlt	.+2      	; 0x3afa <OneWireReset+0x3a6>
    3af8:	43 c0       	rjmp	.+134    	; 0x3b80 <OneWireReset+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afa:	fe 01       	movw	r30, r28
    3afc:	ec 5a       	subi	r30, 0xAC	; 172
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e2       	ldi	r20, 0x20	; 32
    3b0e:	51 e4       	ldi	r21, 0x41	; 65
    3b10:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	8e 01       	movw	r16, r28
    3b1a:	02 5b       	subi	r16, 0xB2	; 178
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	bc 01       	movw	r22, r24
    3b20:	cd 01       	movw	r24, r26
    3b22:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	f8 01       	movw	r30, r16
    3b2c:	91 83       	std	Z+1, r25	; 0x01
    3b2e:	80 83       	st	Z, r24
    3b30:	1f c0       	rjmp	.+62     	; 0x3b70 <OneWireReset+0x41c>
    3b32:	fe 01       	movw	r30, r28
    3b34:	e4 5b       	subi	r30, 0xB4	; 180
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	88 ec       	ldi	r24, 0xC8	; 200
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b40:	fe 01       	movw	r30, r28
    3b42:	e4 5b       	subi	r30, 0xB4	; 180
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	80 81       	ld	r24, Z
    3b48:	91 81       	ldd	r25, Z+1	; 0x01
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	f1 f7       	brne	.-4      	; 0x3b4a <OneWireReset+0x3f6>
    3b4e:	fe 01       	movw	r30, r28
    3b50:	e4 5b       	subi	r30, 0xB4	; 180
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	91 83       	std	Z+1, r25	; 0x01
    3b56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b58:	de 01       	movw	r26, r28
    3b5a:	a2 5b       	subi	r26, 0xB2	; 178
    3b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e2 5b       	subi	r30, 0xB2	; 178
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	11 96       	adiw	r26, 0x01	; 1
    3b6c:	9c 93       	st	X, r25
    3b6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b70:	fe 01       	movw	r30, r28
    3b72:	e2 5b       	subi	r30, 0xB2	; 178
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	80 81       	ld	r24, Z
    3b78:	91 81       	ldd	r25, Z+1	; 0x01
    3b7a:	00 97       	sbiw	r24, 0x00	; 0
    3b7c:	d1 f6       	brne	.-76     	; 0x3b32 <OneWireReset+0x3de>
    3b7e:	4b c0       	rjmp	.+150    	; 0x3c16 <OneWireReset+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b80:	8e 01       	movw	r16, r28
    3b82:	02 5b       	subi	r16, 0xB2	; 178
    3b84:	1f 4f       	sbci	r17, 0xFF	; 255
    3b86:	fe 01       	movw	r30, r28
    3b88:	e0 5b       	subi	r30, 0xB0	; 176
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	f8 01       	movw	r30, r16
    3b9e:	91 83       	std	Z+1, r25	; 0x01
    3ba0:	80 83       	st	Z, r24
    3ba2:	de 01       	movw	r26, r28
    3ba4:	a6 5b       	subi	r26, 0xB6	; 182
    3ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e2 5b       	subi	r30, 0xB2	; 178
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	80 81       	ld	r24, Z
    3bb0:	91 81       	ldd	r25, Z+1	; 0x01
    3bb2:	11 96       	adiw	r26, 0x01	; 1
    3bb4:	9c 93       	st	X, r25
    3bb6:	8e 93       	st	-X, r24
    3bb8:	fe 01       	movw	r30, r28
    3bba:	e6 5b       	subi	r30, 0xB6	; 182
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	80 81       	ld	r24, Z
    3bc0:	91 81       	ldd	r25, Z+1	; 0x01
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	f1 f7       	brne	.-4      	; 0x3bc2 <OneWireReset+0x46e>
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	e6 5b       	subi	r30, 0xB6	; 182
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	91 83       	std	Z+1, r25	; 0x01
    3bce:	80 83       	st	Z, r24
    3bd0:	22 c0       	rjmp	.+68     	; 0x3c16 <OneWireReset+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bd2:	8e 01       	movw	r16, r28
    3bd4:	08 5a       	subi	r16, 0xA8	; 168
    3bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e7 5a       	subi	r30, 0xA7	; 167
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	60 81       	ld	r22, Z
    3be0:	71 81       	ldd	r23, Z+1	; 0x01
    3be2:	82 81       	ldd	r24, Z+2	; 0x02
    3be4:	93 81       	ldd	r25, Z+3	; 0x03
    3be6:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	f8 01       	movw	r30, r16
    3bf0:	80 83       	st	Z, r24
    3bf2:	de 01       	movw	r26, r28
    3bf4:	a7 5b       	subi	r26, 0xB7	; 183
    3bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e8 5a       	subi	r30, 0xA8	; 168
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c02:	fe 01       	movw	r30, r28
    3c04:	e7 5b       	subi	r30, 0xB7	; 183
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	80 81       	ld	r24, Z
    3c0a:	8a 95       	dec	r24
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <OneWireReset+0x4b6>
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e7 5b       	subi	r30, 0xB7	; 183
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	80 83       	st	Z, r24
    _delay_us(240); // 480uS Delay
    _delay_us(240);
    OneWireHigh();
    3c16:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <OneWireHigh>
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	eb 5b       	subi	r30, 0xBB	; 187
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	ac e8       	ldi	r26, 0x8C	; 140
    3c26:	b2 e4       	ldi	r27, 0x42	; 66
    3c28:	80 83       	st	Z, r24
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	a2 83       	std	Z+2, r26	; 0x02
    3c2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c30:	8e 01       	movw	r16, r28
    3c32:	0f 5b       	subi	r16, 0xBF	; 191
    3c34:	1f 4f       	sbci	r17, 0xFF	; 255
    3c36:	fe 01       	movw	r30, r28
    3c38:	eb 5b       	subi	r30, 0xBB	; 187
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	2b ea       	ldi	r18, 0xAB	; 171
    3c46:	3a ea       	ldi	r19, 0xAA	; 170
    3c48:	4a e2       	ldi	r20, 0x2A	; 42
    3c4a:	50 e4       	ldi	r21, 0x40	; 64
    3c4c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	80 83       	st	Z, r24
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	a2 83       	std	Z+2, r26	; 0x02
    3c5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5e:	fe 01       	movw	r30, r28
    3c60:	ef 5b       	subi	r30, 0xBF	; 191
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	60 81       	ld	r22, Z
    3c66:	71 81       	ldd	r23, Z+1	; 0x01
    3c68:	82 81       	ldd	r24, Z+2	; 0x02
    3c6a:	93 81       	ldd	r25, Z+3	; 0x03
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e8       	ldi	r20, 0x80	; 128
    3c72:	5f e3       	ldi	r21, 0x3F	; 63
    3c74:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    3c78:	88 23       	and	r24, r24
    3c7a:	34 f4       	brge	.+12     	; 0x3c88 <OneWireReset+0x534>
		__ticks = 1;
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e0 5c       	subi	r30, 0xC0	; 192
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	80 83       	st	Z, r24
    3c86:	9d c0       	rjmp	.+314    	; 0x3dc2 <OneWireReset+0x66e>
	else if (__tmp > 255)
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ef 5b       	subi	r30, 0xBF	; 191
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	60 81       	ld	r22, Z
    3c90:	71 81       	ldd	r23, Z+1	; 0x01
    3c92:	82 81       	ldd	r24, Z+2	; 0x02
    3c94:	93 81       	ldd	r25, Z+3	; 0x03
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	4f e7       	ldi	r20, 0x7F	; 127
    3c9c:	53 e4       	ldi	r21, 0x43	; 67
    3c9e:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    3ca2:	18 16       	cp	r1, r24
    3ca4:	0c f0       	brlt	.+2      	; 0x3ca8 <OneWireReset+0x554>
    3ca6:	7e c0       	rjmp	.+252    	; 0x3da4 <OneWireReset+0x650>
	{
		_delay_ms(__us / 1000.0);
    3ca8:	fe 01       	movw	r30, r28
    3caa:	eb 5b       	subi	r30, 0xBB	; 187
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	60 81       	ld	r22, Z
    3cb0:	71 81       	ldd	r23, Z+1	; 0x01
    3cb2:	82 81       	ldd	r24, Z+2	; 0x02
    3cb4:	93 81       	ldd	r25, Z+3	; 0x03
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	4a e7       	ldi	r20, 0x7A	; 122
    3cbc:	54 e4       	ldi	r21, 0x44	; 68
    3cbe:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	8c af       	std	Y+60, r24	; 0x3c
    3cc8:	9d af       	std	Y+61, r25	; 0x3d
    3cca:	ae af       	std	Y+62, r26	; 0x3e
    3ccc:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cce:	6c ad       	ldd	r22, Y+60	; 0x3c
    3cd0:	7d ad       	ldd	r23, Y+61	; 0x3d
    3cd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	4a ef       	ldi	r20, 0xFA	; 250
    3cdc:	54 e4       	ldi	r21, 0x44	; 68
    3cde:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	88 af       	std	Y+56, r24	; 0x38
    3ce8:	99 af       	std	Y+57, r25	; 0x39
    3cea:	aa af       	std	Y+58, r26	; 0x3a
    3cec:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3cee:	68 ad       	ldd	r22, Y+56	; 0x38
    3cf0:	79 ad       	ldd	r23, Y+57	; 0x39
    3cf2:	8a ad       	ldd	r24, Y+58	; 0x3a
    3cf4:	9b ad       	ldd	r25, Y+59	; 0x3b
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	40 e8       	ldi	r20, 0x80	; 128
    3cfc:	5f e3       	ldi	r21, 0x3F	; 63
    3cfe:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    3d02:	88 23       	and	r24, r24
    3d04:	2c f4       	brge	.+10     	; 0x3d10 <OneWireReset+0x5bc>
		__ticks = 1;
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	9f ab       	std	Y+55, r25	; 0x37
    3d0c:	8e ab       	std	Y+54, r24	; 0x36
    3d0e:	3f c0       	rjmp	.+126    	; 0x3d8e <OneWireReset+0x63a>
	else if (__tmp > 65535)
    3d10:	68 ad       	ldd	r22, Y+56	; 0x38
    3d12:	79 ad       	ldd	r23, Y+57	; 0x39
    3d14:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d16:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	3f ef       	ldi	r19, 0xFF	; 255
    3d1c:	4f e7       	ldi	r20, 0x7F	; 127
    3d1e:	57 e4       	ldi	r21, 0x47	; 71
    3d20:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    3d24:	18 16       	cp	r1, r24
    3d26:	4c f5       	brge	.+82     	; 0x3d7a <OneWireReset+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d28:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d2a:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	40 e2       	ldi	r20, 0x20	; 32
    3d36:	51 e4       	ldi	r21, 0x41	; 65
    3d38:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	bc 01       	movw	r22, r24
    3d42:	cd 01       	movw	r24, r26
    3d44:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	9f ab       	std	Y+55, r25	; 0x37
    3d4e:	8e ab       	std	Y+54, r24	; 0x36
    3d50:	0f c0       	rjmp	.+30     	; 0x3d70 <OneWireReset+0x61c>
    3d52:	88 ec       	ldi	r24, 0xC8	; 200
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	9d ab       	std	Y+53, r25	; 0x35
    3d58:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d5a:	8c a9       	ldd	r24, Y+52	; 0x34
    3d5c:	9d a9       	ldd	r25, Y+53	; 0x35
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	f1 f7       	brne	.-4      	; 0x3d5e <OneWireReset+0x60a>
    3d62:	9d ab       	std	Y+53, r25	; 0x35
    3d64:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d66:	8e a9       	ldd	r24, Y+54	; 0x36
    3d68:	9f a9       	ldd	r25, Y+55	; 0x37
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	9f ab       	std	Y+55, r25	; 0x37
    3d6e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d70:	8e a9       	ldd	r24, Y+54	; 0x36
    3d72:	9f a9       	ldd	r25, Y+55	; 0x37
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	69 f7       	brne	.-38     	; 0x3d52 <OneWireReset+0x5fe>
    3d78:	2d c0       	rjmp	.+90     	; 0x3dd4 <OneWireReset+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d7a:	68 ad       	ldd	r22, Y+56	; 0x38
    3d7c:	79 ad       	ldd	r23, Y+57	; 0x39
    3d7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d80:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d82:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	9f ab       	std	Y+55, r25	; 0x37
    3d8c:	8e ab       	std	Y+54, r24	; 0x36
    3d8e:	8e a9       	ldd	r24, Y+54	; 0x36
    3d90:	9f a9       	ldd	r25, Y+55	; 0x37
    3d92:	9b ab       	std	Y+51, r25	; 0x33
    3d94:	8a ab       	std	Y+50, r24	; 0x32
    3d96:	8a a9       	ldd	r24, Y+50	; 0x32
    3d98:	9b a9       	ldd	r25, Y+51	; 0x33
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	f1 f7       	brne	.-4      	; 0x3d9a <OneWireReset+0x646>
    3d9e:	9b ab       	std	Y+51, r25	; 0x33
    3da0:	8a ab       	std	Y+50, r24	; 0x32
    3da2:	18 c0       	rjmp	.+48     	; 0x3dd4 <OneWireReset+0x680>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3da4:	fe 01       	movw	r30, r28
    3da6:	ef 5b       	subi	r30, 0xBF	; 191
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	60 81       	ld	r22, Z
    3dac:	71 81       	ldd	r23, Z+1	; 0x01
    3dae:	82 81       	ldd	r24, Z+2	; 0x02
    3db0:	93 81       	ldd	r25, Z+3	; 0x03
    3db2:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	fe 01       	movw	r30, r28
    3dbc:	e0 5c       	subi	r30, 0xC0	; 192
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 83       	st	Z, r24
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	e0 5c       	subi	r30, 0xC0	; 192
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	80 81       	ld	r24, Z
    3dca:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dcc:	89 a9       	ldd	r24, Y+49	; 0x31
    3dce:	8a 95       	dec	r24
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <OneWireReset+0x67a>
    3dd2:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(70); // wait 70 uS before reading
    unsigned int OW = OneWireRead(); // check for OneWire
    3dd4:	0e 94 9f 1b 	call	0x373e	; 0x373e <OneWireRead>
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e7 58       	subi	r30, 0x87	; 135
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	88 2f       	mov	r24, r24
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	91 83       	std	Z+1, r25	; 0x01
    3de4:	80 83       	st	Z, r24
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	ad e4       	ldi	r26, 0x4D	; 77
    3dec:	b3 e4       	ldi	r27, 0x43	; 67
    3dee:	8d a7       	std	Y+45, r24	; 0x2d
    3df0:	9e a7       	std	Y+46, r25	; 0x2e
    3df2:	af a7       	std	Y+47, r26	; 0x2f
    3df4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3df6:	6d a5       	ldd	r22, Y+45	; 0x2d
    3df8:	7e a5       	ldd	r23, Y+46	; 0x2e
    3dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dfc:	98 a9       	ldd	r25, Y+48	; 0x30
    3dfe:	2b ea       	ldi	r18, 0xAB	; 171
    3e00:	3a ea       	ldi	r19, 0xAA	; 170
    3e02:	4a e2       	ldi	r20, 0x2A	; 42
    3e04:	50 e4       	ldi	r21, 0x40	; 64
    3e06:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	89 a7       	std	Y+41, r24	; 0x29
    3e10:	9a a7       	std	Y+42, r25	; 0x2a
    3e12:	ab a7       	std	Y+43, r26	; 0x2b
    3e14:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3e16:	69 a5       	ldd	r22, Y+41	; 0x29
    3e18:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	40 e8       	ldi	r20, 0x80	; 128
    3e24:	5f e3       	ldi	r21, 0x3F	; 63
    3e26:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    3e2a:	88 23       	and	r24, r24
    3e2c:	1c f4       	brge	.+6      	; 0x3e34 <OneWireReset+0x6e0>
		__ticks = 1;
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	88 a7       	std	Y+40, r24	; 0x28
    3e32:	91 c0       	rjmp	.+290    	; 0x3f56 <OneWireReset+0x802>
	else if (__tmp > 255)
    3e34:	69 a5       	ldd	r22, Y+41	; 0x29
    3e36:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e38:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	4f e7       	ldi	r20, 0x7F	; 127
    3e42:	53 e4       	ldi	r21, 0x43	; 67
    3e44:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    3e48:	18 16       	cp	r1, r24
    3e4a:	0c f0       	brlt	.+2      	; 0x3e4e <OneWireReset+0x6fa>
    3e4c:	7b c0       	rjmp	.+246    	; 0x3f44 <OneWireReset+0x7f0>
	{
		_delay_ms(__us / 1000.0);
    3e4e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e50:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e52:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e54:	98 a9       	ldd	r25, Y+48	; 0x30
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	4a e7       	ldi	r20, 0x7A	; 122
    3e5c:	54 e4       	ldi	r21, 0x44	; 68
    3e5e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	8c a3       	std	Y+36, r24	; 0x24
    3e68:	9d a3       	std	Y+37, r25	; 0x25
    3e6a:	ae a3       	std	Y+38, r26	; 0x26
    3e6c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e6e:	6c a1       	ldd	r22, Y+36	; 0x24
    3e70:	7d a1       	ldd	r23, Y+37	; 0x25
    3e72:	8e a1       	ldd	r24, Y+38	; 0x26
    3e74:	9f a1       	ldd	r25, Y+39	; 0x27
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	4a ef       	ldi	r20, 0xFA	; 250
    3e7c:	54 e4       	ldi	r21, 0x44	; 68
    3e7e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	88 a3       	std	Y+32, r24	; 0x20
    3e88:	99 a3       	std	Y+33, r25	; 0x21
    3e8a:	aa a3       	std	Y+34, r26	; 0x22
    3e8c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3e8e:	68 a1       	ldd	r22, Y+32	; 0x20
    3e90:	79 a1       	ldd	r23, Y+33	; 0x21
    3e92:	8a a1       	ldd	r24, Y+34	; 0x22
    3e94:	9b a1       	ldd	r25, Y+35	; 0x23
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	40 e8       	ldi	r20, 0x80	; 128
    3e9c:	5f e3       	ldi	r21, 0x3F	; 63
    3e9e:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    3ea2:	88 23       	and	r24, r24
    3ea4:	2c f4       	brge	.+10     	; 0x3eb0 <OneWireReset+0x75c>
		__ticks = 1;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	9f 8f       	std	Y+31, r25	; 0x1f
    3eac:	8e 8f       	std	Y+30, r24	; 0x1e
    3eae:	3f c0       	rjmp	.+126    	; 0x3f2e <OneWireReset+0x7da>
	else if (__tmp > 65535)
    3eb0:	68 a1       	ldd	r22, Y+32	; 0x20
    3eb2:	79 a1       	ldd	r23, Y+33	; 0x21
    3eb4:	8a a1       	ldd	r24, Y+34	; 0x22
    3eb6:	9b a1       	ldd	r25, Y+35	; 0x23
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	3f ef       	ldi	r19, 0xFF	; 255
    3ebc:	4f e7       	ldi	r20, 0x7F	; 127
    3ebe:	57 e4       	ldi	r21, 0x47	; 71
    3ec0:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    3ec4:	18 16       	cp	r1, r24
    3ec6:	4c f5       	brge	.+82     	; 0x3f1a <OneWireReset+0x7c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec8:	6c a1       	ldd	r22, Y+36	; 0x24
    3eca:	7d a1       	ldd	r23, Y+37	; 0x25
    3ecc:	8e a1       	ldd	r24, Y+38	; 0x26
    3ece:	9f a1       	ldd	r25, Y+39	; 0x27
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	40 e2       	ldi	r20, 0x20	; 32
    3ed6:	51 e4       	ldi	r21, 0x41	; 65
    3ed8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	bc 01       	movw	r22, r24
    3ee2:	cd 01       	movw	r24, r26
    3ee4:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	9f 8f       	std	Y+31, r25	; 0x1f
    3eee:	8e 8f       	std	Y+30, r24	; 0x1e
    3ef0:	0f c0       	rjmp	.+30     	; 0x3f10 <OneWireReset+0x7bc>
    3ef2:	88 ec       	ldi	r24, 0xC8	; 200
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	9d 8f       	std	Y+29, r25	; 0x1d
    3ef8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3efa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3efc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <OneWireReset+0x7aa>
    3f02:	9d 8f       	std	Y+29, r25	; 0x1d
    3f04:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f08:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f0a:	01 97       	sbiw	r24, 0x01	; 1
    3f0c:	9f 8f       	std	Y+31, r25	; 0x1f
    3f0e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f12:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f14:	00 97       	sbiw	r24, 0x00	; 0
    3f16:	69 f7       	brne	.-38     	; 0x3ef2 <OneWireReset+0x79e>
    3f18:	24 c0       	rjmp	.+72     	; 0x3f62 <OneWireReset+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f1a:	68 a1       	ldd	r22, Y+32	; 0x20
    3f1c:	79 a1       	ldd	r23, Y+33	; 0x21
    3f1e:	8a a1       	ldd	r24, Y+34	; 0x22
    3f20:	9b a1       	ldd	r25, Y+35	; 0x23
    3f22:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	9f 8f       	std	Y+31, r25	; 0x1f
    3f2c:	8e 8f       	std	Y+30, r24	; 0x1e
    3f2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f30:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f32:	9b 8f       	std	Y+27, r25	; 0x1b
    3f34:	8a 8f       	std	Y+26, r24	; 0x1a
    3f36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	f1 f7       	brne	.-4      	; 0x3f3a <OneWireReset+0x7e6>
    3f3e:	9b 8f       	std	Y+27, r25	; 0x1b
    3f40:	8a 8f       	std	Y+26, r24	; 0x1a
    3f42:	0f c0       	rjmp	.+30     	; 0x3f62 <OneWireReset+0x80e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f44:	69 a5       	ldd	r22, Y+41	; 0x29
    3f46:	7a a5       	ldd	r23, Y+42	; 0x2a
    3f48:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f4c:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	88 a7       	std	Y+40, r24	; 0x28
    3f56:	88 a5       	ldd	r24, Y+40	; 0x28
    3f58:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f5a:	89 8d       	ldd	r24, Y+25	; 0x19
    3f5c:	8a 95       	dec	r24
    3f5e:	f1 f7       	brne	.-4      	; 0x3f5c <OneWireReset+0x808>
    3f60:	89 8f       	std	Y+25, r24	; 0x19
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	ad e4       	ldi	r26, 0x4D	; 77
    3f68:	b3 e4       	ldi	r27, 0x43	; 67
    3f6a:	8d 8b       	std	Y+21, r24	; 0x15
    3f6c:	9e 8b       	std	Y+22, r25	; 0x16
    3f6e:	af 8b       	std	Y+23, r26	; 0x17
    3f70:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f72:	6d 89       	ldd	r22, Y+21	; 0x15
    3f74:	7e 89       	ldd	r23, Y+22	; 0x16
    3f76:	8f 89       	ldd	r24, Y+23	; 0x17
    3f78:	98 8d       	ldd	r25, Y+24	; 0x18
    3f7a:	2b ea       	ldi	r18, 0xAB	; 171
    3f7c:	3a ea       	ldi	r19, 0xAA	; 170
    3f7e:	4a e2       	ldi	r20, 0x2A	; 42
    3f80:	50 e4       	ldi	r21, 0x40	; 64
    3f82:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	89 8b       	std	Y+17, r24	; 0x11
    3f8c:	9a 8b       	std	Y+18, r25	; 0x12
    3f8e:	ab 8b       	std	Y+19, r26	; 0x13
    3f90:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3f92:	69 89       	ldd	r22, Y+17	; 0x11
    3f94:	7a 89       	ldd	r23, Y+18	; 0x12
    3f96:	8b 89       	ldd	r24, Y+19	; 0x13
    3f98:	9c 89       	ldd	r25, Y+20	; 0x14
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	40 e8       	ldi	r20, 0x80	; 128
    3fa0:	5f e3       	ldi	r21, 0x3F	; 63
    3fa2:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    3fa6:	88 23       	and	r24, r24
    3fa8:	1c f4       	brge	.+6      	; 0x3fb0 <OneWireReset+0x85c>
		__ticks = 1;
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	88 8b       	std	Y+16, r24	; 0x10
    3fae:	91 c0       	rjmp	.+290    	; 0x40d2 <OneWireReset+0x97e>
	else if (__tmp > 255)
    3fb0:	69 89       	ldd	r22, Y+17	; 0x11
    3fb2:	7a 89       	ldd	r23, Y+18	; 0x12
    3fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    3fb6:	9c 89       	ldd	r25, Y+20	; 0x14
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	4f e7       	ldi	r20, 0x7F	; 127
    3fbe:	53 e4       	ldi	r21, 0x43	; 67
    3fc0:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    3fc4:	18 16       	cp	r1, r24
    3fc6:	0c f0       	brlt	.+2      	; 0x3fca <OneWireReset+0x876>
    3fc8:	7b c0       	rjmp	.+246    	; 0x40c0 <OneWireReset+0x96c>
	{
		_delay_ms(__us / 1000.0);
    3fca:	6d 89       	ldd	r22, Y+21	; 0x15
    3fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    3fce:	8f 89       	ldd	r24, Y+23	; 0x17
    3fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	4a e7       	ldi	r20, 0x7A	; 122
    3fd8:	54 e4       	ldi	r21, 0x44	; 68
    3fda:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	8c 87       	std	Y+12, r24	; 0x0c
    3fe4:	9d 87       	std	Y+13, r25	; 0x0d
    3fe6:	ae 87       	std	Y+14, r26	; 0x0e
    3fe8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fea:	6c 85       	ldd	r22, Y+12	; 0x0c
    3fec:	7d 85       	ldd	r23, Y+13	; 0x0d
    3fee:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ff0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	4a ef       	ldi	r20, 0xFA	; 250
    3ff8:	54 e4       	ldi	r21, 0x44	; 68
    3ffa:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	88 87       	std	Y+8, r24	; 0x08
    4004:	99 87       	std	Y+9, r25	; 0x09
    4006:	aa 87       	std	Y+10, r26	; 0x0a
    4008:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    400a:	68 85       	ldd	r22, Y+8	; 0x08
    400c:	79 85       	ldd	r23, Y+9	; 0x09
    400e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4010:	9b 85       	ldd	r25, Y+11	; 0x0b
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e8       	ldi	r20, 0x80	; 128
    4018:	5f e3       	ldi	r21, 0x3F	; 63
    401a:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    401e:	88 23       	and	r24, r24
    4020:	2c f4       	brge	.+10     	; 0x402c <OneWireReset+0x8d8>
		__ticks = 1;
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	9f 83       	std	Y+7, r25	; 0x07
    4028:	8e 83       	std	Y+6, r24	; 0x06
    402a:	3f c0       	rjmp	.+126    	; 0x40aa <OneWireReset+0x956>
	else if (__tmp > 65535)
    402c:	68 85       	ldd	r22, Y+8	; 0x08
    402e:	79 85       	ldd	r23, Y+9	; 0x09
    4030:	8a 85       	ldd	r24, Y+10	; 0x0a
    4032:	9b 85       	ldd	r25, Y+11	; 0x0b
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	3f ef       	ldi	r19, 0xFF	; 255
    4038:	4f e7       	ldi	r20, 0x7F	; 127
    403a:	57 e4       	ldi	r21, 0x47	; 71
    403c:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4040:	18 16       	cp	r1, r24
    4042:	4c f5       	brge	.+82     	; 0x4096 <OneWireReset+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4044:	6c 85       	ldd	r22, Y+12	; 0x0c
    4046:	7d 85       	ldd	r23, Y+13	; 0x0d
    4048:	8e 85       	ldd	r24, Y+14	; 0x0e
    404a:	9f 85       	ldd	r25, Y+15	; 0x0f
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	40 e2       	ldi	r20, 0x20	; 32
    4052:	51 e4       	ldi	r21, 0x41	; 65
    4054:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	bc 01       	movw	r22, r24
    405e:	cd 01       	movw	r24, r26
    4060:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	9f 83       	std	Y+7, r25	; 0x07
    406a:	8e 83       	std	Y+6, r24	; 0x06
    406c:	0f c0       	rjmp	.+30     	; 0x408c <OneWireReset+0x938>
    406e:	88 ec       	ldi	r24, 0xC8	; 200
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9d 83       	std	Y+5, r25	; 0x05
    4074:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4076:	8c 81       	ldd	r24, Y+4	; 0x04
    4078:	9d 81       	ldd	r25, Y+5	; 0x05
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	f1 f7       	brne	.-4      	; 0x407a <OneWireReset+0x926>
    407e:	9d 83       	std	Y+5, r25	; 0x05
    4080:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4082:	8e 81       	ldd	r24, Y+6	; 0x06
    4084:	9f 81       	ldd	r25, Y+7	; 0x07
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	9f 83       	std	Y+7, r25	; 0x07
    408a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408c:	8e 81       	ldd	r24, Y+6	; 0x06
    408e:	9f 81       	ldd	r25, Y+7	; 0x07
    4090:	00 97       	sbiw	r24, 0x00	; 0
    4092:	69 f7       	brne	.-38     	; 0x406e <OneWireReset+0x91a>
    4094:	24 c0       	rjmp	.+72     	; 0x40de <OneWireReset+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4096:	68 85       	ldd	r22, Y+8	; 0x08
    4098:	79 85       	ldd	r23, Y+9	; 0x09
    409a:	8a 85       	ldd	r24, Y+10	; 0x0a
    409c:	9b 85       	ldd	r25, Y+11	; 0x0b
    409e:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	9f 83       	std	Y+7, r25	; 0x07
    40a8:	8e 83       	std	Y+6, r24	; 0x06
    40aa:	8e 81       	ldd	r24, Y+6	; 0x06
    40ac:	9f 81       	ldd	r25, Y+7	; 0x07
    40ae:	9b 83       	std	Y+3, r25	; 0x03
    40b0:	8a 83       	std	Y+2, r24	; 0x02
    40b2:	8a 81       	ldd	r24, Y+2	; 0x02
    40b4:	9b 81       	ldd	r25, Y+3	; 0x03
    40b6:	01 97       	sbiw	r24, 0x01	; 1
    40b8:	f1 f7       	brne	.-4      	; 0x40b6 <OneWireReset+0x962>
    40ba:	9b 83       	std	Y+3, r25	; 0x03
    40bc:	8a 83       	std	Y+2, r24	; 0x02
    40be:	0f c0       	rjmp	.+30     	; 0x40de <OneWireReset+0x98a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    40c0:	69 89       	ldd	r22, Y+17	; 0x11
    40c2:	7a 89       	ldd	r23, Y+18	; 0x12
    40c4:	8b 89       	ldd	r24, Y+19	; 0x13
    40c6:	9c 89       	ldd	r25, Y+20	; 0x14
    40c8:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	88 8b       	std	Y+16, r24	; 0x10
    40d2:	88 89       	ldd	r24, Y+16	; 0x10
    40d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    40d6:	89 81       	ldd	r24, Y+1	; 0x01
    40d8:	8a 95       	dec	r24
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <OneWireReset+0x984>
    40dc:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(205); // 410 uS delay
    _delay_us(205);
    OneWireHigh(); // give bus back to OneWire
    40de:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <OneWireHigh>
    return OW; 
    40e2:	fe 01       	movw	r30, r28
    40e4:	e7 58       	subi	r30, 0x87	; 135
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	80 81       	ld	r24, Z
    40ea:	91 81       	ldd	r25, Z+1	; 0x01
}
    40ec:	c6 58       	subi	r28, 0x86	; 134
    40ee:	df 4f       	sbci	r29, 0xFF	; 255
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61
    40fa:	cf 91       	pop	r28
    40fc:	df 91       	pop	r29
    40fe:	1f 91       	pop	r17
    4100:	0f 91       	pop	r16
    4102:	08 95       	ret

00004104 <OneWireWriteBit>:


void OneWireWriteBit(unsigned char b){
    4104:	0f 93       	push	r16
    4106:	1f 93       	push	r17
    4108:	df 93       	push	r29
    410a:	cf 93       	push	r28
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    4110:	c1 56       	subi	r28, 0x61	; 97
    4112:	d0 40       	sbci	r29, 0x00	; 0
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	fe 01       	movw	r30, r28
    4120:	ef 59       	subi	r30, 0x9F	; 159
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	80 83       	st	Z, r24
    if(b){
    4126:	fe 01       	movw	r30, r28
    4128:	ef 59       	subi	r30, 0x9F	; 159
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	80 81       	ld	r24, Z
    412e:	88 23       	and	r24, r24
    4130:	09 f4       	brne	.+2      	; 0x4134 <OneWireWriteBit+0x30>
    4132:	0b c2       	rjmp	.+1046   	; 0x454a <OneWireWriteBit+0x446>
        OneWireRelease();
    4134:	0e 94 8e 1b 	call	0x371c	; 0x371c <OneWireRelease>
    4138:	fe 01       	movw	r30, r28
    413a:	e3 5a       	subi	r30, 0xA3	; 163
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	a0 ec       	ldi	r26, 0xC0	; 192
    4144:	b0 e4       	ldi	r27, 0x40	; 64
    4146:	80 83       	st	Z, r24
    4148:	91 83       	std	Z+1, r25	; 0x01
    414a:	a2 83       	std	Z+2, r26	; 0x02
    414c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    414e:	8e 01       	movw	r16, r28
    4150:	07 5a       	subi	r16, 0xA7	; 167
    4152:	1f 4f       	sbci	r17, 0xFF	; 255
    4154:	fe 01       	movw	r30, r28
    4156:	e3 5a       	subi	r30, 0xA3	; 163
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	60 81       	ld	r22, Z
    415c:	71 81       	ldd	r23, Z+1	; 0x01
    415e:	82 81       	ldd	r24, Z+2	; 0x02
    4160:	93 81       	ldd	r25, Z+3	; 0x03
    4162:	2b ea       	ldi	r18, 0xAB	; 171
    4164:	3a ea       	ldi	r19, 0xAA	; 170
    4166:	4a e2       	ldi	r20, 0x2A	; 42
    4168:	50 e4       	ldi	r21, 0x40	; 64
    416a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	f8 01       	movw	r30, r16
    4174:	80 83       	st	Z, r24
    4176:	91 83       	std	Z+1, r25	; 0x01
    4178:	a2 83       	std	Z+2, r26	; 0x02
    417a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    417c:	fe 01       	movw	r30, r28
    417e:	e7 5a       	subi	r30, 0xA7	; 167
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	60 81       	ld	r22, Z
    4184:	71 81       	ldd	r23, Z+1	; 0x01
    4186:	82 81       	ldd	r24, Z+2	; 0x02
    4188:	93 81       	ldd	r25, Z+3	; 0x03
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e8       	ldi	r20, 0x80	; 128
    4190:	5f e3       	ldi	r21, 0x3F	; 63
    4192:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4196:	88 23       	and	r24, r24
    4198:	34 f4       	brge	.+12     	; 0x41a6 <OneWireWriteBit+0xa2>
		__ticks = 1;
    419a:	fe 01       	movw	r30, r28
    419c:	e8 5a       	subi	r30, 0xA8	; 168
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	80 83       	st	Z, r24
    41a4:	e0 c0       	rjmp	.+448    	; 0x4366 <OneWireWriteBit+0x262>
	else if (__tmp > 255)
    41a6:	fe 01       	movw	r30, r28
    41a8:	e7 5a       	subi	r30, 0xA7	; 167
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	4f e7       	ldi	r20, 0x7F	; 127
    41ba:	53 e4       	ldi	r21, 0x43	; 67
    41bc:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    41c0:	18 16       	cp	r1, r24
    41c2:	0c f0       	brlt	.+2      	; 0x41c6 <OneWireWriteBit+0xc2>
    41c4:	c0 c0       	rjmp	.+384    	; 0x4346 <OneWireWriteBit+0x242>
	{
		_delay_ms(__us / 1000.0);
    41c6:	fe 01       	movw	r30, r28
    41c8:	e3 5a       	subi	r30, 0xA3	; 163
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	60 81       	ld	r22, Z
    41ce:	71 81       	ldd	r23, Z+1	; 0x01
    41d0:	82 81       	ldd	r24, Z+2	; 0x02
    41d2:	93 81       	ldd	r25, Z+3	; 0x03
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	4a e7       	ldi	r20, 0x7A	; 122
    41da:	54 e4       	ldi	r21, 0x44	; 68
    41dc:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	fe 01       	movw	r30, r28
    41e6:	ec 5a       	subi	r30, 0xAC	; 172
    41e8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ea:	80 83       	st	Z, r24
    41ec:	91 83       	std	Z+1, r25	; 0x01
    41ee:	a2 83       	std	Z+2, r26	; 0x02
    41f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f2:	8e 01       	movw	r16, r28
    41f4:	00 5b       	subi	r16, 0xB0	; 176
    41f6:	1f 4f       	sbci	r17, 0xFF	; 255
    41f8:	fe 01       	movw	r30, r28
    41fa:	ec 5a       	subi	r30, 0xAC	; 172
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	60 81       	ld	r22, Z
    4200:	71 81       	ldd	r23, Z+1	; 0x01
    4202:	82 81       	ldd	r24, Z+2	; 0x02
    4204:	93 81       	ldd	r25, Z+3	; 0x03
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	4a ef       	ldi	r20, 0xFA	; 250
    420c:	54 e4       	ldi	r21, 0x44	; 68
    420e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	f8 01       	movw	r30, r16
    4218:	80 83       	st	Z, r24
    421a:	91 83       	std	Z+1, r25	; 0x01
    421c:	a2 83       	std	Z+2, r26	; 0x02
    421e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4220:	fe 01       	movw	r30, r28
    4222:	e0 5b       	subi	r30, 0xB0	; 176
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	60 81       	ld	r22, Z
    4228:	71 81       	ldd	r23, Z+1	; 0x01
    422a:	82 81       	ldd	r24, Z+2	; 0x02
    422c:	93 81       	ldd	r25, Z+3	; 0x03
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	40 e8       	ldi	r20, 0x80	; 128
    4234:	5f e3       	ldi	r21, 0x3F	; 63
    4236:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    423a:	88 23       	and	r24, r24
    423c:	44 f4       	brge	.+16     	; 0x424e <OneWireWriteBit+0x14a>
		__ticks = 1;
    423e:	fe 01       	movw	r30, r28
    4240:	e2 5b       	subi	r30, 0xB2	; 178
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	91 83       	std	Z+1, r25	; 0x01
    424a:	80 83       	st	Z, r24
    424c:	64 c0       	rjmp	.+200    	; 0x4316 <OneWireWriteBit+0x212>
	else if (__tmp > 65535)
    424e:	fe 01       	movw	r30, r28
    4250:	e0 5b       	subi	r30, 0xB0	; 176
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	60 81       	ld	r22, Z
    4256:	71 81       	ldd	r23, Z+1	; 0x01
    4258:	82 81       	ldd	r24, Z+2	; 0x02
    425a:	93 81       	ldd	r25, Z+3	; 0x03
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	3f ef       	ldi	r19, 0xFF	; 255
    4260:	4f e7       	ldi	r20, 0x7F	; 127
    4262:	57 e4       	ldi	r21, 0x47	; 71
    4264:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4268:	18 16       	cp	r1, r24
    426a:	0c f0       	brlt	.+2      	; 0x426e <OneWireWriteBit+0x16a>
    426c:	43 c0       	rjmp	.+134    	; 0x42f4 <OneWireWriteBit+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    426e:	fe 01       	movw	r30, r28
    4270:	ec 5a       	subi	r30, 0xAC	; 172
    4272:	ff 4f       	sbci	r31, 0xFF	; 255
    4274:	60 81       	ld	r22, Z
    4276:	71 81       	ldd	r23, Z+1	; 0x01
    4278:	82 81       	ldd	r24, Z+2	; 0x02
    427a:	93 81       	ldd	r25, Z+3	; 0x03
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e2       	ldi	r20, 0x20	; 32
    4282:	51 e4       	ldi	r21, 0x41	; 65
    4284:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	8e 01       	movw	r16, r28
    428e:	02 5b       	subi	r16, 0xB2	; 178
    4290:	1f 4f       	sbci	r17, 0xFF	; 255
    4292:	bc 01       	movw	r22, r24
    4294:	cd 01       	movw	r24, r26
    4296:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    429a:	dc 01       	movw	r26, r24
    429c:	cb 01       	movw	r24, r22
    429e:	f8 01       	movw	r30, r16
    42a0:	91 83       	std	Z+1, r25	; 0x01
    42a2:	80 83       	st	Z, r24
    42a4:	1f c0       	rjmp	.+62     	; 0x42e4 <OneWireWriteBit+0x1e0>
    42a6:	fe 01       	movw	r30, r28
    42a8:	e4 5b       	subi	r30, 0xB4	; 180
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	88 ec       	ldi	r24, 0xC8	; 200
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	91 83       	std	Z+1, r25	; 0x01
    42b2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42b4:	fe 01       	movw	r30, r28
    42b6:	e4 5b       	subi	r30, 0xB4	; 180
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	80 81       	ld	r24, Z
    42bc:	91 81       	ldd	r25, Z+1	; 0x01
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <OneWireWriteBit+0x1ba>
    42c2:	fe 01       	movw	r30, r28
    42c4:	e4 5b       	subi	r30, 0xB4	; 180
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	91 83       	std	Z+1, r25	; 0x01
    42ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42cc:	de 01       	movw	r26, r28
    42ce:	a2 5b       	subi	r26, 0xB2	; 178
    42d0:	bf 4f       	sbci	r27, 0xFF	; 255
    42d2:	fe 01       	movw	r30, r28
    42d4:	e2 5b       	subi	r30, 0xB2	; 178
    42d6:	ff 4f       	sbci	r31, 0xFF	; 255
    42d8:	80 81       	ld	r24, Z
    42da:	91 81       	ldd	r25, Z+1	; 0x01
    42dc:	01 97       	sbiw	r24, 0x01	; 1
    42de:	11 96       	adiw	r26, 0x01	; 1
    42e0:	9c 93       	st	X, r25
    42e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e4:	fe 01       	movw	r30, r28
    42e6:	e2 5b       	subi	r30, 0xB2	; 178
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	80 81       	ld	r24, Z
    42ec:	91 81       	ldd	r25, Z+1	; 0x01
    42ee:	00 97       	sbiw	r24, 0x00	; 0
    42f0:	d1 f6       	brne	.-76     	; 0x42a6 <OneWireWriteBit+0x1a2>
    42f2:	4b c0       	rjmp	.+150    	; 0x438a <OneWireWriteBit+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f4:	8e 01       	movw	r16, r28
    42f6:	02 5b       	subi	r16, 0xB2	; 178
    42f8:	1f 4f       	sbci	r17, 0xFF	; 255
    42fa:	fe 01       	movw	r30, r28
    42fc:	e0 5b       	subi	r30, 0xB0	; 176
    42fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4300:	60 81       	ld	r22, Z
    4302:	71 81       	ldd	r23, Z+1	; 0x01
    4304:	82 81       	ldd	r24, Z+2	; 0x02
    4306:	93 81       	ldd	r25, Z+3	; 0x03
    4308:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	f8 01       	movw	r30, r16
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	80 83       	st	Z, r24
    4316:	de 01       	movw	r26, r28
    4318:	a6 5b       	subi	r26, 0xB6	; 182
    431a:	bf 4f       	sbci	r27, 0xFF	; 255
    431c:	fe 01       	movw	r30, r28
    431e:	e2 5b       	subi	r30, 0xB2	; 178
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	80 81       	ld	r24, Z
    4324:	91 81       	ldd	r25, Z+1	; 0x01
    4326:	11 96       	adiw	r26, 0x01	; 1
    4328:	9c 93       	st	X, r25
    432a:	8e 93       	st	-X, r24
    432c:	fe 01       	movw	r30, r28
    432e:	e6 5b       	subi	r30, 0xB6	; 182
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	80 81       	ld	r24, Z
    4334:	91 81       	ldd	r25, Z+1	; 0x01
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	f1 f7       	brne	.-4      	; 0x4336 <OneWireWriteBit+0x232>
    433a:	fe 01       	movw	r30, r28
    433c:	e6 5b       	subi	r30, 0xB6	; 182
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	91 83       	std	Z+1, r25	; 0x01
    4342:	80 83       	st	Z, r24
    4344:	22 c0       	rjmp	.+68     	; 0x438a <OneWireWriteBit+0x286>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4346:	8e 01       	movw	r16, r28
    4348:	08 5a       	subi	r16, 0xA8	; 168
    434a:	1f 4f       	sbci	r17, 0xFF	; 255
    434c:	fe 01       	movw	r30, r28
    434e:	e7 5a       	subi	r30, 0xA7	; 167
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	60 81       	ld	r22, Z
    4354:	71 81       	ldd	r23, Z+1	; 0x01
    4356:	82 81       	ldd	r24, Z+2	; 0x02
    4358:	93 81       	ldd	r25, Z+3	; 0x03
    435a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	f8 01       	movw	r30, r16
    4364:	80 83       	st	Z, r24
    4366:	de 01       	movw	r26, r28
    4368:	a7 5b       	subi	r26, 0xB7	; 183
    436a:	bf 4f       	sbci	r27, 0xFF	; 255
    436c:	fe 01       	movw	r30, r28
    436e:	e8 5a       	subi	r30, 0xA8	; 168
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
    4374:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4376:	fe 01       	movw	r30, r28
    4378:	e7 5b       	subi	r30, 0xB7	; 183
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	80 81       	ld	r24, Z
    437e:	8a 95       	dec	r24
    4380:	f1 f7       	brne	.-4      	; 0x437e <OneWireWriteBit+0x27a>
    4382:	fe 01       	movw	r30, r28
    4384:	e7 5b       	subi	r30, 0xB7	; 183
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	80 83       	st	Z, r24
        _delay_us(6); // wait 6uS
        OneWireHigh();
    438a:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <OneWireHigh>
    438e:	fe 01       	movw	r30, r28
    4390:	eb 5b       	subi	r30, 0xBB	; 187
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	a0 e8       	ldi	r26, 0x80	; 128
    439a:	b2 e4       	ldi	r27, 0x42	; 66
    439c:	80 83       	st	Z, r24
    439e:	91 83       	std	Z+1, r25	; 0x01
    43a0:	a2 83       	std	Z+2, r26	; 0x02
    43a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    43a4:	8e 01       	movw	r16, r28
    43a6:	0f 5b       	subi	r16, 0xBF	; 191
    43a8:	1f 4f       	sbci	r17, 0xFF	; 255
    43aa:	fe 01       	movw	r30, r28
    43ac:	eb 5b       	subi	r30, 0xBB	; 187
    43ae:	ff 4f       	sbci	r31, 0xFF	; 255
    43b0:	60 81       	ld	r22, Z
    43b2:	71 81       	ldd	r23, Z+1	; 0x01
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	2b ea       	ldi	r18, 0xAB	; 171
    43ba:	3a ea       	ldi	r19, 0xAA	; 170
    43bc:	4a e2       	ldi	r20, 0x2A	; 42
    43be:	50 e4       	ldi	r21, 0x40	; 64
    43c0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	f8 01       	movw	r30, r16
    43ca:	80 83       	st	Z, r24
    43cc:	91 83       	std	Z+1, r25	; 0x01
    43ce:	a2 83       	std	Z+2, r26	; 0x02
    43d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43d2:	fe 01       	movw	r30, r28
    43d4:	ef 5b       	subi	r30, 0xBF	; 191
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	60 81       	ld	r22, Z
    43da:	71 81       	ldd	r23, Z+1	; 0x01
    43dc:	82 81       	ldd	r24, Z+2	; 0x02
    43de:	93 81       	ldd	r25, Z+3	; 0x03
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e8       	ldi	r20, 0x80	; 128
    43e6:	5f e3       	ldi	r21, 0x3F	; 63
    43e8:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    43ec:	88 23       	and	r24, r24
    43ee:	34 f4       	brge	.+12     	; 0x43fc <OneWireWriteBit+0x2f8>
		__ticks = 1;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	fe 01       	movw	r30, r28
    43f4:	e0 5c       	subi	r30, 0xC0	; 192
    43f6:	ff 4f       	sbci	r31, 0xFF	; 255
    43f8:	80 83       	st	Z, r24
    43fa:	9d c0       	rjmp	.+314    	; 0x4536 <OneWireWriteBit+0x432>
	else if (__tmp > 255)
    43fc:	fe 01       	movw	r30, r28
    43fe:	ef 5b       	subi	r30, 0xBF	; 191
    4400:	ff 4f       	sbci	r31, 0xFF	; 255
    4402:	60 81       	ld	r22, Z
    4404:	71 81       	ldd	r23, Z+1	; 0x01
    4406:	82 81       	ldd	r24, Z+2	; 0x02
    4408:	93 81       	ldd	r25, Z+3	; 0x03
    440a:	20 e0       	ldi	r18, 0x00	; 0
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	4f e7       	ldi	r20, 0x7F	; 127
    4410:	53 e4       	ldi	r21, 0x43	; 67
    4412:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4416:	18 16       	cp	r1, r24
    4418:	0c f0       	brlt	.+2      	; 0x441c <OneWireWriteBit+0x318>
    441a:	7e c0       	rjmp	.+252    	; 0x4518 <OneWireWriteBit+0x414>
	{
		_delay_ms(__us / 1000.0);
    441c:	fe 01       	movw	r30, r28
    441e:	eb 5b       	subi	r30, 0xBB	; 187
    4420:	ff 4f       	sbci	r31, 0xFF	; 255
    4422:	60 81       	ld	r22, Z
    4424:	71 81       	ldd	r23, Z+1	; 0x01
    4426:	82 81       	ldd	r24, Z+2	; 0x02
    4428:	93 81       	ldd	r25, Z+3	; 0x03
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4a e7       	ldi	r20, 0x7A	; 122
    4430:	54 e4       	ldi	r21, 0x44	; 68
    4432:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	8c af       	std	Y+60, r24	; 0x3c
    443c:	9d af       	std	Y+61, r25	; 0x3d
    443e:	ae af       	std	Y+62, r26	; 0x3e
    4440:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4442:	6c ad       	ldd	r22, Y+60	; 0x3c
    4444:	7d ad       	ldd	r23, Y+61	; 0x3d
    4446:	8e ad       	ldd	r24, Y+62	; 0x3e
    4448:	9f ad       	ldd	r25, Y+63	; 0x3f
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	4a ef       	ldi	r20, 0xFA	; 250
    4450:	54 e4       	ldi	r21, 0x44	; 68
    4452:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	88 af       	std	Y+56, r24	; 0x38
    445c:	99 af       	std	Y+57, r25	; 0x39
    445e:	aa af       	std	Y+58, r26	; 0x3a
    4460:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4462:	68 ad       	ldd	r22, Y+56	; 0x38
    4464:	79 ad       	ldd	r23, Y+57	; 0x39
    4466:	8a ad       	ldd	r24, Y+58	; 0x3a
    4468:	9b ad       	ldd	r25, Y+59	; 0x3b
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e8       	ldi	r20, 0x80	; 128
    4470:	5f e3       	ldi	r21, 0x3F	; 63
    4472:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4476:	88 23       	and	r24, r24
    4478:	2c f4       	brge	.+10     	; 0x4484 <OneWireWriteBit+0x380>
		__ticks = 1;
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	9f ab       	std	Y+55, r25	; 0x37
    4480:	8e ab       	std	Y+54, r24	; 0x36
    4482:	3f c0       	rjmp	.+126    	; 0x4502 <OneWireWriteBit+0x3fe>
	else if (__tmp > 65535)
    4484:	68 ad       	ldd	r22, Y+56	; 0x38
    4486:	79 ad       	ldd	r23, Y+57	; 0x39
    4488:	8a ad       	ldd	r24, Y+58	; 0x3a
    448a:	9b ad       	ldd	r25, Y+59	; 0x3b
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	3f ef       	ldi	r19, 0xFF	; 255
    4490:	4f e7       	ldi	r20, 0x7F	; 127
    4492:	57 e4       	ldi	r21, 0x47	; 71
    4494:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4498:	18 16       	cp	r1, r24
    449a:	4c f5       	brge	.+82     	; 0x44ee <OneWireWriteBit+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449c:	6c ad       	ldd	r22, Y+60	; 0x3c
    449e:	7d ad       	ldd	r23, Y+61	; 0x3d
    44a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    44a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e2       	ldi	r20, 0x20	; 32
    44aa:	51 e4       	ldi	r21, 0x41	; 65
    44ac:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	9f ab       	std	Y+55, r25	; 0x37
    44c2:	8e ab       	std	Y+54, r24	; 0x36
    44c4:	0f c0       	rjmp	.+30     	; 0x44e4 <OneWireWriteBit+0x3e0>
    44c6:	88 ec       	ldi	r24, 0xC8	; 200
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	9d ab       	std	Y+53, r25	; 0x35
    44cc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44ce:	8c a9       	ldd	r24, Y+52	; 0x34
    44d0:	9d a9       	ldd	r25, Y+53	; 0x35
    44d2:	01 97       	sbiw	r24, 0x01	; 1
    44d4:	f1 f7       	brne	.-4      	; 0x44d2 <OneWireWriteBit+0x3ce>
    44d6:	9d ab       	std	Y+53, r25	; 0x35
    44d8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44da:	8e a9       	ldd	r24, Y+54	; 0x36
    44dc:	9f a9       	ldd	r25, Y+55	; 0x37
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	9f ab       	std	Y+55, r25	; 0x37
    44e2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e4:	8e a9       	ldd	r24, Y+54	; 0x36
    44e6:	9f a9       	ldd	r25, Y+55	; 0x37
    44e8:	00 97       	sbiw	r24, 0x00	; 0
    44ea:	69 f7       	brne	.-38     	; 0x44c6 <OneWireWriteBit+0x3c2>
    44ec:	ae c1       	rjmp	.+860    	; 0x484a <OneWireWriteBit+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ee:	68 ad       	ldd	r22, Y+56	; 0x38
    44f0:	79 ad       	ldd	r23, Y+57	; 0x39
    44f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    44f4:	9b ad       	ldd	r25, Y+59	; 0x3b
    44f6:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	9f ab       	std	Y+55, r25	; 0x37
    4500:	8e ab       	std	Y+54, r24	; 0x36
    4502:	8e a9       	ldd	r24, Y+54	; 0x36
    4504:	9f a9       	ldd	r25, Y+55	; 0x37
    4506:	9b ab       	std	Y+51, r25	; 0x33
    4508:	8a ab       	std	Y+50, r24	; 0x32
    450a:	8a a9       	ldd	r24, Y+50	; 0x32
    450c:	9b a9       	ldd	r25, Y+51	; 0x33
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	f1 f7       	brne	.-4      	; 0x450e <OneWireWriteBit+0x40a>
    4512:	9b ab       	std	Y+51, r25	; 0x33
    4514:	8a ab       	std	Y+50, r24	; 0x32
    4516:	99 c1       	rjmp	.+818    	; 0x484a <OneWireWriteBit+0x746>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4518:	fe 01       	movw	r30, r28
    451a:	ef 5b       	subi	r30, 0xBF	; 191
    451c:	ff 4f       	sbci	r31, 0xFF	; 255
    451e:	60 81       	ld	r22, Z
    4520:	71 81       	ldd	r23, Z+1	; 0x01
    4522:	82 81       	ldd	r24, Z+2	; 0x02
    4524:	93 81       	ldd	r25, Z+3	; 0x03
    4526:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    452a:	dc 01       	movw	r26, r24
    452c:	cb 01       	movw	r24, r22
    452e:	fe 01       	movw	r30, r28
    4530:	e0 5c       	subi	r30, 0xC0	; 192
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	80 83       	st	Z, r24
    4536:	fe 01       	movw	r30, r28
    4538:	e0 5c       	subi	r30, 0xC0	; 192
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	80 81       	ld	r24, Z
    453e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4540:	89 a9       	ldd	r24, Y+49	; 0x31
    4542:	8a 95       	dec	r24
    4544:	f1 f7       	brne	.-4      	; 0x4542 <OneWireWriteBit+0x43e>
    4546:	89 ab       	std	Y+49, r24	; 0x31
    4548:	80 c1       	rjmp	.+768    	; 0x484a <OneWireWriteBit+0x746>
        _delay_us(64); // wait 64uS
    }
    else{
        OneWireRelease();
    454a:	0e 94 8e 1b 	call	0x371c	; 0x371c <OneWireRelease>
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	a0 e7       	ldi	r26, 0x70	; 112
    4554:	b2 e4       	ldi	r27, 0x42	; 66
    4556:	8d a7       	std	Y+45, r24	; 0x2d
    4558:	9e a7       	std	Y+46, r25	; 0x2e
    455a:	af a7       	std	Y+47, r26	; 0x2f
    455c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    455e:	6d a5       	ldd	r22, Y+45	; 0x2d
    4560:	7e a5       	ldd	r23, Y+46	; 0x2e
    4562:	8f a5       	ldd	r24, Y+47	; 0x2f
    4564:	98 a9       	ldd	r25, Y+48	; 0x30
    4566:	2b ea       	ldi	r18, 0xAB	; 171
    4568:	3a ea       	ldi	r19, 0xAA	; 170
    456a:	4a e2       	ldi	r20, 0x2A	; 42
    456c:	50 e4       	ldi	r21, 0x40	; 64
    456e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	89 a7       	std	Y+41, r24	; 0x29
    4578:	9a a7       	std	Y+42, r25	; 0x2a
    457a:	ab a7       	std	Y+43, r26	; 0x2b
    457c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    457e:	69 a5       	ldd	r22, Y+41	; 0x29
    4580:	7a a5       	ldd	r23, Y+42	; 0x2a
    4582:	8b a5       	ldd	r24, Y+43	; 0x2b
    4584:	9c a5       	ldd	r25, Y+44	; 0x2c
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	40 e8       	ldi	r20, 0x80	; 128
    458c:	5f e3       	ldi	r21, 0x3F	; 63
    458e:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4592:	88 23       	and	r24, r24
    4594:	1c f4       	brge	.+6      	; 0x459c <OneWireWriteBit+0x498>
		__ticks = 1;
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	88 a7       	std	Y+40, r24	; 0x28
    459a:	91 c0       	rjmp	.+290    	; 0x46be <OneWireWriteBit+0x5ba>
	else if (__tmp > 255)
    459c:	69 a5       	ldd	r22, Y+41	; 0x29
    459e:	7a a5       	ldd	r23, Y+42	; 0x2a
    45a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    45a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	4f e7       	ldi	r20, 0x7F	; 127
    45aa:	53 e4       	ldi	r21, 0x43	; 67
    45ac:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    45b0:	18 16       	cp	r1, r24
    45b2:	0c f0       	brlt	.+2      	; 0x45b6 <OneWireWriteBit+0x4b2>
    45b4:	7b c0       	rjmp	.+246    	; 0x46ac <OneWireWriteBit+0x5a8>
	{
		_delay_ms(__us / 1000.0);
    45b6:	6d a5       	ldd	r22, Y+45	; 0x2d
    45b8:	7e a5       	ldd	r23, Y+46	; 0x2e
    45ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    45bc:	98 a9       	ldd	r25, Y+48	; 0x30
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	4a e7       	ldi	r20, 0x7A	; 122
    45c4:	54 e4       	ldi	r21, 0x44	; 68
    45c6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	8c a3       	std	Y+36, r24	; 0x24
    45d0:	9d a3       	std	Y+37, r25	; 0x25
    45d2:	ae a3       	std	Y+38, r26	; 0x26
    45d4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d6:	6c a1       	ldd	r22, Y+36	; 0x24
    45d8:	7d a1       	ldd	r23, Y+37	; 0x25
    45da:	8e a1       	ldd	r24, Y+38	; 0x26
    45dc:	9f a1       	ldd	r25, Y+39	; 0x27
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	4a ef       	ldi	r20, 0xFA	; 250
    45e4:	54 e4       	ldi	r21, 0x44	; 68
    45e6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	88 a3       	std	Y+32, r24	; 0x20
    45f0:	99 a3       	std	Y+33, r25	; 0x21
    45f2:	aa a3       	std	Y+34, r26	; 0x22
    45f4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    45f6:	68 a1       	ldd	r22, Y+32	; 0x20
    45f8:	79 a1       	ldd	r23, Y+33	; 0x21
    45fa:	8a a1       	ldd	r24, Y+34	; 0x22
    45fc:	9b a1       	ldd	r25, Y+35	; 0x23
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	40 e8       	ldi	r20, 0x80	; 128
    4604:	5f e3       	ldi	r21, 0x3F	; 63
    4606:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    460a:	88 23       	and	r24, r24
    460c:	2c f4       	brge	.+10     	; 0x4618 <OneWireWriteBit+0x514>
		__ticks = 1;
    460e:	81 e0       	ldi	r24, 0x01	; 1
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	9f 8f       	std	Y+31, r25	; 0x1f
    4614:	8e 8f       	std	Y+30, r24	; 0x1e
    4616:	3f c0       	rjmp	.+126    	; 0x4696 <OneWireWriteBit+0x592>
	else if (__tmp > 65535)
    4618:	68 a1       	ldd	r22, Y+32	; 0x20
    461a:	79 a1       	ldd	r23, Y+33	; 0x21
    461c:	8a a1       	ldd	r24, Y+34	; 0x22
    461e:	9b a1       	ldd	r25, Y+35	; 0x23
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	3f ef       	ldi	r19, 0xFF	; 255
    4624:	4f e7       	ldi	r20, 0x7F	; 127
    4626:	57 e4       	ldi	r21, 0x47	; 71
    4628:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    462c:	18 16       	cp	r1, r24
    462e:	4c f5       	brge	.+82     	; 0x4682 <OneWireWriteBit+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4630:	6c a1       	ldd	r22, Y+36	; 0x24
    4632:	7d a1       	ldd	r23, Y+37	; 0x25
    4634:	8e a1       	ldd	r24, Y+38	; 0x26
    4636:	9f a1       	ldd	r25, Y+39	; 0x27
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	40 e2       	ldi	r20, 0x20	; 32
    463e:	51 e4       	ldi	r21, 0x41	; 65
    4640:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	bc 01       	movw	r22, r24
    464a:	cd 01       	movw	r24, r26
    464c:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4650:	dc 01       	movw	r26, r24
    4652:	cb 01       	movw	r24, r22
    4654:	9f 8f       	std	Y+31, r25	; 0x1f
    4656:	8e 8f       	std	Y+30, r24	; 0x1e
    4658:	0f c0       	rjmp	.+30     	; 0x4678 <OneWireWriteBit+0x574>
    465a:	88 ec       	ldi	r24, 0xC8	; 200
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	9d 8f       	std	Y+29, r25	; 0x1d
    4660:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4662:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4664:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4666:	01 97       	sbiw	r24, 0x01	; 1
    4668:	f1 f7       	brne	.-4      	; 0x4666 <OneWireWriteBit+0x562>
    466a:	9d 8f       	std	Y+29, r25	; 0x1d
    466c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    466e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4670:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4672:	01 97       	sbiw	r24, 0x01	; 1
    4674:	9f 8f       	std	Y+31, r25	; 0x1f
    4676:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4678:	8e 8d       	ldd	r24, Y+30	; 0x1e
    467a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    467c:	00 97       	sbiw	r24, 0x00	; 0
    467e:	69 f7       	brne	.-38     	; 0x465a <OneWireWriteBit+0x556>
    4680:	24 c0       	rjmp	.+72     	; 0x46ca <OneWireWriteBit+0x5c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4682:	68 a1       	ldd	r22, Y+32	; 0x20
    4684:	79 a1       	ldd	r23, Y+33	; 0x21
    4686:	8a a1       	ldd	r24, Y+34	; 0x22
    4688:	9b a1       	ldd	r25, Y+35	; 0x23
    468a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	9f 8f       	std	Y+31, r25	; 0x1f
    4694:	8e 8f       	std	Y+30, r24	; 0x1e
    4696:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4698:	9f 8d       	ldd	r25, Y+31	; 0x1f
    469a:	9b 8f       	std	Y+27, r25	; 0x1b
    469c:	8a 8f       	std	Y+26, r24	; 0x1a
    469e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    46a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    46a2:	01 97       	sbiw	r24, 0x01	; 1
    46a4:	f1 f7       	brne	.-4      	; 0x46a2 <OneWireWriteBit+0x59e>
    46a6:	9b 8f       	std	Y+27, r25	; 0x1b
    46a8:	8a 8f       	std	Y+26, r24	; 0x1a
    46aa:	0f c0       	rjmp	.+30     	; 0x46ca <OneWireWriteBit+0x5c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    46ac:	69 a5       	ldd	r22, Y+41	; 0x29
    46ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    46b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    46b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    46b4:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	88 a7       	std	Y+40, r24	; 0x28
    46be:	88 a5       	ldd	r24, Y+40	; 0x28
    46c0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46c2:	89 8d       	ldd	r24, Y+25	; 0x19
    46c4:	8a 95       	dec	r24
    46c6:	f1 f7       	brne	.-4      	; 0x46c4 <OneWireWriteBit+0x5c0>
    46c8:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(60); // wait 60uS
        OneWireHigh();
    46ca:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <OneWireHigh>
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	a0 e2       	ldi	r26, 0x20	; 32
    46d4:	b1 e4       	ldi	r27, 0x41	; 65
    46d6:	8d 8b       	std	Y+21, r24	; 0x15
    46d8:	9e 8b       	std	Y+22, r25	; 0x16
    46da:	af 8b       	std	Y+23, r26	; 0x17
    46dc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    46de:	6d 89       	ldd	r22, Y+21	; 0x15
    46e0:	7e 89       	ldd	r23, Y+22	; 0x16
    46e2:	8f 89       	ldd	r24, Y+23	; 0x17
    46e4:	98 8d       	ldd	r25, Y+24	; 0x18
    46e6:	2b ea       	ldi	r18, 0xAB	; 171
    46e8:	3a ea       	ldi	r19, 0xAA	; 170
    46ea:	4a e2       	ldi	r20, 0x2A	; 42
    46ec:	50 e4       	ldi	r21, 0x40	; 64
    46ee:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	89 8b       	std	Y+17, r24	; 0x11
    46f8:	9a 8b       	std	Y+18, r25	; 0x12
    46fa:	ab 8b       	std	Y+19, r26	; 0x13
    46fc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    46fe:	69 89       	ldd	r22, Y+17	; 0x11
    4700:	7a 89       	ldd	r23, Y+18	; 0x12
    4702:	8b 89       	ldd	r24, Y+19	; 0x13
    4704:	9c 89       	ldd	r25, Y+20	; 0x14
    4706:	20 e0       	ldi	r18, 0x00	; 0
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	40 e8       	ldi	r20, 0x80	; 128
    470c:	5f e3       	ldi	r21, 0x3F	; 63
    470e:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4712:	88 23       	and	r24, r24
    4714:	1c f4       	brge	.+6      	; 0x471c <OneWireWriteBit+0x618>
		__ticks = 1;
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	88 8b       	std	Y+16, r24	; 0x10
    471a:	91 c0       	rjmp	.+290    	; 0x483e <OneWireWriteBit+0x73a>
	else if (__tmp > 255)
    471c:	69 89       	ldd	r22, Y+17	; 0x11
    471e:	7a 89       	ldd	r23, Y+18	; 0x12
    4720:	8b 89       	ldd	r24, Y+19	; 0x13
    4722:	9c 89       	ldd	r25, Y+20	; 0x14
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	4f e7       	ldi	r20, 0x7F	; 127
    472a:	53 e4       	ldi	r21, 0x43	; 67
    472c:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4730:	18 16       	cp	r1, r24
    4732:	0c f0       	brlt	.+2      	; 0x4736 <OneWireWriteBit+0x632>
    4734:	7b c0       	rjmp	.+246    	; 0x482c <OneWireWriteBit+0x728>
	{
		_delay_ms(__us / 1000.0);
    4736:	6d 89       	ldd	r22, Y+21	; 0x15
    4738:	7e 89       	ldd	r23, Y+22	; 0x16
    473a:	8f 89       	ldd	r24, Y+23	; 0x17
    473c:	98 8d       	ldd	r25, Y+24	; 0x18
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	4a e7       	ldi	r20, 0x7A	; 122
    4744:	54 e4       	ldi	r21, 0x44	; 68
    4746:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    474a:	dc 01       	movw	r26, r24
    474c:	cb 01       	movw	r24, r22
    474e:	8c 87       	std	Y+12, r24	; 0x0c
    4750:	9d 87       	std	Y+13, r25	; 0x0d
    4752:	ae 87       	std	Y+14, r26	; 0x0e
    4754:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4756:	6c 85       	ldd	r22, Y+12	; 0x0c
    4758:	7d 85       	ldd	r23, Y+13	; 0x0d
    475a:	8e 85       	ldd	r24, Y+14	; 0x0e
    475c:	9f 85       	ldd	r25, Y+15	; 0x0f
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	4a ef       	ldi	r20, 0xFA	; 250
    4764:	54 e4       	ldi	r21, 0x44	; 68
    4766:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	88 87       	std	Y+8, r24	; 0x08
    4770:	99 87       	std	Y+9, r25	; 0x09
    4772:	aa 87       	std	Y+10, r26	; 0x0a
    4774:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4776:	68 85       	ldd	r22, Y+8	; 0x08
    4778:	79 85       	ldd	r23, Y+9	; 0x09
    477a:	8a 85       	ldd	r24, Y+10	; 0x0a
    477c:	9b 85       	ldd	r25, Y+11	; 0x0b
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	40 e8       	ldi	r20, 0x80	; 128
    4784:	5f e3       	ldi	r21, 0x3F	; 63
    4786:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    478a:	88 23       	and	r24, r24
    478c:	2c f4       	brge	.+10     	; 0x4798 <OneWireWriteBit+0x694>
		__ticks = 1;
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	9f 83       	std	Y+7, r25	; 0x07
    4794:	8e 83       	std	Y+6, r24	; 0x06
    4796:	3f c0       	rjmp	.+126    	; 0x4816 <OneWireWriteBit+0x712>
	else if (__tmp > 65535)
    4798:	68 85       	ldd	r22, Y+8	; 0x08
    479a:	79 85       	ldd	r23, Y+9	; 0x09
    479c:	8a 85       	ldd	r24, Y+10	; 0x0a
    479e:	9b 85       	ldd	r25, Y+11	; 0x0b
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	3f ef       	ldi	r19, 0xFF	; 255
    47a4:	4f e7       	ldi	r20, 0x7F	; 127
    47a6:	57 e4       	ldi	r21, 0x47	; 71
    47a8:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    47ac:	18 16       	cp	r1, r24
    47ae:	4c f5       	brge	.+82     	; 0x4802 <OneWireWriteBit+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    47b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    47b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    47b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    47b8:	20 e0       	ldi	r18, 0x00	; 0
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	40 e2       	ldi	r20, 0x20	; 32
    47be:	51 e4       	ldi	r21, 0x41	; 65
    47c0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    47c4:	dc 01       	movw	r26, r24
    47c6:	cb 01       	movw	r24, r22
    47c8:	bc 01       	movw	r22, r24
    47ca:	cd 01       	movw	r24, r26
    47cc:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    47d0:	dc 01       	movw	r26, r24
    47d2:	cb 01       	movw	r24, r22
    47d4:	9f 83       	std	Y+7, r25	; 0x07
    47d6:	8e 83       	std	Y+6, r24	; 0x06
    47d8:	0f c0       	rjmp	.+30     	; 0x47f8 <OneWireWriteBit+0x6f4>
    47da:	88 ec       	ldi	r24, 0xC8	; 200
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	9d 83       	std	Y+5, r25	; 0x05
    47e0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47e2:	8c 81       	ldd	r24, Y+4	; 0x04
    47e4:	9d 81       	ldd	r25, Y+5	; 0x05
    47e6:	01 97       	sbiw	r24, 0x01	; 1
    47e8:	f1 f7       	brne	.-4      	; 0x47e6 <OneWireWriteBit+0x6e2>
    47ea:	9d 83       	std	Y+5, r25	; 0x05
    47ec:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ee:	8e 81       	ldd	r24, Y+6	; 0x06
    47f0:	9f 81       	ldd	r25, Y+7	; 0x07
    47f2:	01 97       	sbiw	r24, 0x01	; 1
    47f4:	9f 83       	std	Y+7, r25	; 0x07
    47f6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f8:	8e 81       	ldd	r24, Y+6	; 0x06
    47fa:	9f 81       	ldd	r25, Y+7	; 0x07
    47fc:	00 97       	sbiw	r24, 0x00	; 0
    47fe:	69 f7       	brne	.-38     	; 0x47da <OneWireWriteBit+0x6d6>
    4800:	24 c0       	rjmp	.+72     	; 0x484a <OneWireWriteBit+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4802:	68 85       	ldd	r22, Y+8	; 0x08
    4804:	79 85       	ldd	r23, Y+9	; 0x09
    4806:	8a 85       	ldd	r24, Y+10	; 0x0a
    4808:	9b 85       	ldd	r25, Y+11	; 0x0b
    480a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    480e:	dc 01       	movw	r26, r24
    4810:	cb 01       	movw	r24, r22
    4812:	9f 83       	std	Y+7, r25	; 0x07
    4814:	8e 83       	std	Y+6, r24	; 0x06
    4816:	8e 81       	ldd	r24, Y+6	; 0x06
    4818:	9f 81       	ldd	r25, Y+7	; 0x07
    481a:	9b 83       	std	Y+3, r25	; 0x03
    481c:	8a 83       	std	Y+2, r24	; 0x02
    481e:	8a 81       	ldd	r24, Y+2	; 0x02
    4820:	9b 81       	ldd	r25, Y+3	; 0x03
    4822:	01 97       	sbiw	r24, 0x01	; 1
    4824:	f1 f7       	brne	.-4      	; 0x4822 <OneWireWriteBit+0x71e>
    4826:	9b 83       	std	Y+3, r25	; 0x03
    4828:	8a 83       	std	Y+2, r24	; 0x02
    482a:	0f c0       	rjmp	.+30     	; 0x484a <OneWireWriteBit+0x746>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    482c:	69 89       	ldd	r22, Y+17	; 0x11
    482e:	7a 89       	ldd	r23, Y+18	; 0x12
    4830:	8b 89       	ldd	r24, Y+19	; 0x13
    4832:	9c 89       	ldd	r25, Y+20	; 0x14
    4834:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	88 8b       	std	Y+16, r24	; 0x10
    483e:	88 89       	ldd	r24, Y+16	; 0x10
    4840:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4842:	89 81       	ldd	r24, Y+1	; 0x01
    4844:	8a 95       	dec	r24
    4846:	f1 f7       	brne	.-4      	; 0x4844 <OneWireWriteBit+0x740>
    4848:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(10); // wait 10uS
    }
}
    484a:	cf 59       	subi	r28, 0x9F	; 159
    484c:	df 4f       	sbci	r29, 0xFF	; 255
    484e:	0f b6       	in	r0, 0x3f	; 63
    4850:	f8 94       	cli
    4852:	de bf       	out	0x3e, r29	; 62
    4854:	0f be       	out	0x3f, r0	; 63
    4856:	cd bf       	out	0x3d, r28	; 61
    4858:	cf 91       	pop	r28
    485a:	df 91       	pop	r29
    485c:	1f 91       	pop	r17
    485e:	0f 91       	pop	r16
    4860:	08 95       	ret

00004862 <OneWireReadBit>:

unsigned char OneWireReadBit(){
    4862:	0f 93       	push	r16
    4864:	1f 93       	push	r17
    4866:	df 93       	push	r29
    4868:	cf 93       	push	r28
    486a:	cd b7       	in	r28, 0x3d	; 61
    486c:	de b7       	in	r29, 0x3e	; 62
    486e:	c9 54       	subi	r28, 0x49	; 73
    4870:	d0 40       	sbci	r29, 0x00	; 0
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    OneWireRelease();
    487c:	0e 94 8e 1b 	call	0x371c	; 0x371c <OneWireRelease>
    4880:	fe 01       	movw	r30, r28
    4882:	eb 5b       	subi	r30, 0xBB	; 187
    4884:	ff 4f       	sbci	r31, 0xFF	; 255
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	a0 ec       	ldi	r26, 0xC0	; 192
    488c:	b0 e4       	ldi	r27, 0x40	; 64
    488e:	80 83       	st	Z, r24
    4890:	91 83       	std	Z+1, r25	; 0x01
    4892:	a2 83       	std	Z+2, r26	; 0x02
    4894:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4896:	8e 01       	movw	r16, r28
    4898:	0f 5b       	subi	r16, 0xBF	; 191
    489a:	1f 4f       	sbci	r17, 0xFF	; 255
    489c:	fe 01       	movw	r30, r28
    489e:	eb 5b       	subi	r30, 0xBB	; 187
    48a0:	ff 4f       	sbci	r31, 0xFF	; 255
    48a2:	60 81       	ld	r22, Z
    48a4:	71 81       	ldd	r23, Z+1	; 0x01
    48a6:	82 81       	ldd	r24, Z+2	; 0x02
    48a8:	93 81       	ldd	r25, Z+3	; 0x03
    48aa:	2b ea       	ldi	r18, 0xAB	; 171
    48ac:	3a ea       	ldi	r19, 0xAA	; 170
    48ae:	4a e2       	ldi	r20, 0x2A	; 42
    48b0:	50 e4       	ldi	r21, 0x40	; 64
    48b2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	f8 01       	movw	r30, r16
    48bc:	80 83       	st	Z, r24
    48be:	91 83       	std	Z+1, r25	; 0x01
    48c0:	a2 83       	std	Z+2, r26	; 0x02
    48c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48c4:	fe 01       	movw	r30, r28
    48c6:	ef 5b       	subi	r30, 0xBF	; 191
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	60 81       	ld	r22, Z
    48cc:	71 81       	ldd	r23, Z+1	; 0x01
    48ce:	82 81       	ldd	r24, Z+2	; 0x02
    48d0:	93 81       	ldd	r25, Z+3	; 0x03
    48d2:	20 e0       	ldi	r18, 0x00	; 0
    48d4:	30 e0       	ldi	r19, 0x00	; 0
    48d6:	40 e8       	ldi	r20, 0x80	; 128
    48d8:	5f e3       	ldi	r21, 0x3F	; 63
    48da:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    48de:	88 23       	and	r24, r24
    48e0:	34 f4       	brge	.+12     	; 0x48ee <OneWireReadBit+0x8c>
		__ticks = 1;
    48e2:	81 e0       	ldi	r24, 0x01	; 1
    48e4:	fe 01       	movw	r30, r28
    48e6:	e0 5c       	subi	r30, 0xC0	; 192
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	80 83       	st	Z, r24
    48ec:	9d c0       	rjmp	.+314    	; 0x4a28 <OneWireReadBit+0x1c6>
	else if (__tmp > 255)
    48ee:	fe 01       	movw	r30, r28
    48f0:	ef 5b       	subi	r30, 0xBF	; 191
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	60 81       	ld	r22, Z
    48f6:	71 81       	ldd	r23, Z+1	; 0x01
    48f8:	82 81       	ldd	r24, Z+2	; 0x02
    48fa:	93 81       	ldd	r25, Z+3	; 0x03
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	4f e7       	ldi	r20, 0x7F	; 127
    4902:	53 e4       	ldi	r21, 0x43	; 67
    4904:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4908:	18 16       	cp	r1, r24
    490a:	0c f0       	brlt	.+2      	; 0x490e <OneWireReadBit+0xac>
    490c:	7e c0       	rjmp	.+252    	; 0x4a0a <OneWireReadBit+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    490e:	fe 01       	movw	r30, r28
    4910:	eb 5b       	subi	r30, 0xBB	; 187
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	60 81       	ld	r22, Z
    4916:	71 81       	ldd	r23, Z+1	; 0x01
    4918:	82 81       	ldd	r24, Z+2	; 0x02
    491a:	93 81       	ldd	r25, Z+3	; 0x03
    491c:	20 e0       	ldi	r18, 0x00	; 0
    491e:	30 e0       	ldi	r19, 0x00	; 0
    4920:	4a e7       	ldi	r20, 0x7A	; 122
    4922:	54 e4       	ldi	r21, 0x44	; 68
    4924:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    4928:	dc 01       	movw	r26, r24
    492a:	cb 01       	movw	r24, r22
    492c:	8c af       	std	Y+60, r24	; 0x3c
    492e:	9d af       	std	Y+61, r25	; 0x3d
    4930:	ae af       	std	Y+62, r26	; 0x3e
    4932:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4934:	6c ad       	ldd	r22, Y+60	; 0x3c
    4936:	7d ad       	ldd	r23, Y+61	; 0x3d
    4938:	8e ad       	ldd	r24, Y+62	; 0x3e
    493a:	9f ad       	ldd	r25, Y+63	; 0x3f
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	4a ef       	ldi	r20, 0xFA	; 250
    4942:	54 e4       	ldi	r21, 0x44	; 68
    4944:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	88 af       	std	Y+56, r24	; 0x38
    494e:	99 af       	std	Y+57, r25	; 0x39
    4950:	aa af       	std	Y+58, r26	; 0x3a
    4952:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4954:	68 ad       	ldd	r22, Y+56	; 0x38
    4956:	79 ad       	ldd	r23, Y+57	; 0x39
    4958:	8a ad       	ldd	r24, Y+58	; 0x3a
    495a:	9b ad       	ldd	r25, Y+59	; 0x3b
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	40 e8       	ldi	r20, 0x80	; 128
    4962:	5f e3       	ldi	r21, 0x3F	; 63
    4964:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4968:	88 23       	and	r24, r24
    496a:	2c f4       	brge	.+10     	; 0x4976 <OneWireReadBit+0x114>
		__ticks = 1;
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	9f ab       	std	Y+55, r25	; 0x37
    4972:	8e ab       	std	Y+54, r24	; 0x36
    4974:	3f c0       	rjmp	.+126    	; 0x49f4 <OneWireReadBit+0x192>
	else if (__tmp > 65535)
    4976:	68 ad       	ldd	r22, Y+56	; 0x38
    4978:	79 ad       	ldd	r23, Y+57	; 0x39
    497a:	8a ad       	ldd	r24, Y+58	; 0x3a
    497c:	9b ad       	ldd	r25, Y+59	; 0x3b
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	3f ef       	ldi	r19, 0xFF	; 255
    4982:	4f e7       	ldi	r20, 0x7F	; 127
    4984:	57 e4       	ldi	r21, 0x47	; 71
    4986:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    498a:	18 16       	cp	r1, r24
    498c:	4c f5       	brge	.+82     	; 0x49e0 <OneWireReadBit+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    498e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4990:	7d ad       	ldd	r23, Y+61	; 0x3d
    4992:	8e ad       	ldd	r24, Y+62	; 0x3e
    4994:	9f ad       	ldd	r25, Y+63	; 0x3f
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	40 e2       	ldi	r20, 0x20	; 32
    499c:	51 e4       	ldi	r21, 0x41	; 65
    499e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	bc 01       	movw	r22, r24
    49a8:	cd 01       	movw	r24, r26
    49aa:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	9f ab       	std	Y+55, r25	; 0x37
    49b4:	8e ab       	std	Y+54, r24	; 0x36
    49b6:	0f c0       	rjmp	.+30     	; 0x49d6 <OneWireReadBit+0x174>
    49b8:	88 ec       	ldi	r24, 0xC8	; 200
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	9d ab       	std	Y+53, r25	; 0x35
    49be:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    49c0:	8c a9       	ldd	r24, Y+52	; 0x34
    49c2:	9d a9       	ldd	r25, Y+53	; 0x35
    49c4:	01 97       	sbiw	r24, 0x01	; 1
    49c6:	f1 f7       	brne	.-4      	; 0x49c4 <OneWireReadBit+0x162>
    49c8:	9d ab       	std	Y+53, r25	; 0x35
    49ca:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49cc:	8e a9       	ldd	r24, Y+54	; 0x36
    49ce:	9f a9       	ldd	r25, Y+55	; 0x37
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	9f ab       	std	Y+55, r25	; 0x37
    49d4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49d6:	8e a9       	ldd	r24, Y+54	; 0x36
    49d8:	9f a9       	ldd	r25, Y+55	; 0x37
    49da:	00 97       	sbiw	r24, 0x00	; 0
    49dc:	69 f7       	brne	.-38     	; 0x49b8 <OneWireReadBit+0x156>
    49de:	2d c0       	rjmp	.+90     	; 0x4a3a <OneWireReadBit+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e0:	68 ad       	ldd	r22, Y+56	; 0x38
    49e2:	79 ad       	ldd	r23, Y+57	; 0x39
    49e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    49e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    49e8:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	9f ab       	std	Y+55, r25	; 0x37
    49f2:	8e ab       	std	Y+54, r24	; 0x36
    49f4:	8e a9       	ldd	r24, Y+54	; 0x36
    49f6:	9f a9       	ldd	r25, Y+55	; 0x37
    49f8:	9b ab       	std	Y+51, r25	; 0x33
    49fa:	8a ab       	std	Y+50, r24	; 0x32
    49fc:	8a a9       	ldd	r24, Y+50	; 0x32
    49fe:	9b a9       	ldd	r25, Y+51	; 0x33
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	f1 f7       	brne	.-4      	; 0x4a00 <OneWireReadBit+0x19e>
    4a04:	9b ab       	std	Y+51, r25	; 0x33
    4a06:	8a ab       	std	Y+50, r24	; 0x32
    4a08:	18 c0       	rjmp	.+48     	; 0x4a3a <OneWireReadBit+0x1d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	ef 5b       	subi	r30, 0xBF	; 191
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	60 81       	ld	r22, Z
    4a12:	71 81       	ldd	r23, Z+1	; 0x01
    4a14:	82 81       	ldd	r24, Z+2	; 0x02
    4a16:	93 81       	ldd	r25, Z+3	; 0x03
    4a18:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	fe 01       	movw	r30, r28
    4a22:	e0 5c       	subi	r30, 0xC0	; 192
    4a24:	ff 4f       	sbci	r31, 0xFF	; 255
    4a26:	80 83       	st	Z, r24
    4a28:	fe 01       	movw	r30, r28
    4a2a:	e0 5c       	subi	r30, 0xC0	; 192
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	80 81       	ld	r24, Z
    4a30:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a32:	89 a9       	ldd	r24, Y+49	; 0x31
    4a34:	8a 95       	dec	r24
    4a36:	f1 f7       	brne	.-4      	; 0x4a34 <OneWireReadBit+0x1d2>
    4a38:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(6); // wait 6uS
    OneWireHigh();
    4a3a:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <OneWireHigh>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	a0 e1       	ldi	r26, 0x10	; 16
    4a44:	b1 e4       	ldi	r27, 0x41	; 65
    4a46:	8d a7       	std	Y+45, r24	; 0x2d
    4a48:	9e a7       	std	Y+46, r25	; 0x2e
    4a4a:	af a7       	std	Y+47, r26	; 0x2f
    4a4c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a4e:	6d a5       	ldd	r22, Y+45	; 0x2d
    4a50:	7e a5       	ldd	r23, Y+46	; 0x2e
    4a52:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a54:	98 a9       	ldd	r25, Y+48	; 0x30
    4a56:	2b ea       	ldi	r18, 0xAB	; 171
    4a58:	3a ea       	ldi	r19, 0xAA	; 170
    4a5a:	4a e2       	ldi	r20, 0x2A	; 42
    4a5c:	50 e4       	ldi	r21, 0x40	; 64
    4a5e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	89 a7       	std	Y+41, r24	; 0x29
    4a68:	9a a7       	std	Y+42, r25	; 0x2a
    4a6a:	ab a7       	std	Y+43, r26	; 0x2b
    4a6c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4a6e:	69 a5       	ldd	r22, Y+41	; 0x29
    4a70:	7a a5       	ldd	r23, Y+42	; 0x2a
    4a72:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a74:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e8       	ldi	r20, 0x80	; 128
    4a7c:	5f e3       	ldi	r21, 0x3F	; 63
    4a7e:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4a82:	88 23       	and	r24, r24
    4a84:	1c f4       	brge	.+6      	; 0x4a8c <OneWireReadBit+0x22a>
		__ticks = 1;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	88 a7       	std	Y+40, r24	; 0x28
    4a8a:	91 c0       	rjmp	.+290    	; 0x4bae <OneWireReadBit+0x34c>
	else if (__tmp > 255)
    4a8c:	69 a5       	ldd	r22, Y+41	; 0x29
    4a8e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4a90:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a92:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	4f e7       	ldi	r20, 0x7F	; 127
    4a9a:	53 e4       	ldi	r21, 0x43	; 67
    4a9c:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4aa0:	18 16       	cp	r1, r24
    4aa2:	0c f0       	brlt	.+2      	; 0x4aa6 <OneWireReadBit+0x244>
    4aa4:	7b c0       	rjmp	.+246    	; 0x4b9c <OneWireReadBit+0x33a>
	{
		_delay_ms(__us / 1000.0);
    4aa6:	6d a5       	ldd	r22, Y+45	; 0x2d
    4aa8:	7e a5       	ldd	r23, Y+46	; 0x2e
    4aaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    4aac:	98 a9       	ldd	r25, Y+48	; 0x30
    4aae:	20 e0       	ldi	r18, 0x00	; 0
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	4a e7       	ldi	r20, 0x7A	; 122
    4ab4:	54 e4       	ldi	r21, 0x44	; 68
    4ab6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    4aba:	dc 01       	movw	r26, r24
    4abc:	cb 01       	movw	r24, r22
    4abe:	8c a3       	std	Y+36, r24	; 0x24
    4ac0:	9d a3       	std	Y+37, r25	; 0x25
    4ac2:	ae a3       	std	Y+38, r26	; 0x26
    4ac4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ac6:	6c a1       	ldd	r22, Y+36	; 0x24
    4ac8:	7d a1       	ldd	r23, Y+37	; 0x25
    4aca:	8e a1       	ldd	r24, Y+38	; 0x26
    4acc:	9f a1       	ldd	r25, Y+39	; 0x27
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	4a ef       	ldi	r20, 0xFA	; 250
    4ad4:	54 e4       	ldi	r21, 0x44	; 68
    4ad6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	88 a3       	std	Y+32, r24	; 0x20
    4ae0:	99 a3       	std	Y+33, r25	; 0x21
    4ae2:	aa a3       	std	Y+34, r26	; 0x22
    4ae4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4ae6:	68 a1       	ldd	r22, Y+32	; 0x20
    4ae8:	79 a1       	ldd	r23, Y+33	; 0x21
    4aea:	8a a1       	ldd	r24, Y+34	; 0x22
    4aec:	9b a1       	ldd	r25, Y+35	; 0x23
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	40 e8       	ldi	r20, 0x80	; 128
    4af4:	5f e3       	ldi	r21, 0x3F	; 63
    4af6:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4afa:	88 23       	and	r24, r24
    4afc:	2c f4       	brge	.+10     	; 0x4b08 <OneWireReadBit+0x2a6>
		__ticks = 1;
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	9f 8f       	std	Y+31, r25	; 0x1f
    4b04:	8e 8f       	std	Y+30, r24	; 0x1e
    4b06:	3f c0       	rjmp	.+126    	; 0x4b86 <OneWireReadBit+0x324>
	else if (__tmp > 65535)
    4b08:	68 a1       	ldd	r22, Y+32	; 0x20
    4b0a:	79 a1       	ldd	r23, Y+33	; 0x21
    4b0c:	8a a1       	ldd	r24, Y+34	; 0x22
    4b0e:	9b a1       	ldd	r25, Y+35	; 0x23
    4b10:	20 e0       	ldi	r18, 0x00	; 0
    4b12:	3f ef       	ldi	r19, 0xFF	; 255
    4b14:	4f e7       	ldi	r20, 0x7F	; 127
    4b16:	57 e4       	ldi	r21, 0x47	; 71
    4b18:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4b1c:	18 16       	cp	r1, r24
    4b1e:	4c f5       	brge	.+82     	; 0x4b72 <OneWireReadBit+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b20:	6c a1       	ldd	r22, Y+36	; 0x24
    4b22:	7d a1       	ldd	r23, Y+37	; 0x25
    4b24:	8e a1       	ldd	r24, Y+38	; 0x26
    4b26:	9f a1       	ldd	r25, Y+39	; 0x27
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	40 e2       	ldi	r20, 0x20	; 32
    4b2e:	51 e4       	ldi	r21, 0x41	; 65
    4b30:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4b34:	dc 01       	movw	r26, r24
    4b36:	cb 01       	movw	r24, r22
    4b38:	bc 01       	movw	r22, r24
    4b3a:	cd 01       	movw	r24, r26
    4b3c:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4b40:	dc 01       	movw	r26, r24
    4b42:	cb 01       	movw	r24, r22
    4b44:	9f 8f       	std	Y+31, r25	; 0x1f
    4b46:	8e 8f       	std	Y+30, r24	; 0x1e
    4b48:	0f c0       	rjmp	.+30     	; 0x4b68 <OneWireReadBit+0x306>
    4b4a:	88 ec       	ldi	r24, 0xC8	; 200
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	9d 8f       	std	Y+29, r25	; 0x1d
    4b50:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4b54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4b56:	01 97       	sbiw	r24, 0x01	; 1
    4b58:	f1 f7       	brne	.-4      	; 0x4b56 <OneWireReadBit+0x2f4>
    4b5a:	9d 8f       	std	Y+29, r25	; 0x1d
    4b5c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b62:	01 97       	sbiw	r24, 0x01	; 1
    4b64:	9f 8f       	std	Y+31, r25	; 0x1f
    4b66:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b6c:	00 97       	sbiw	r24, 0x00	; 0
    4b6e:	69 f7       	brne	.-38     	; 0x4b4a <OneWireReadBit+0x2e8>
    4b70:	24 c0       	rjmp	.+72     	; 0x4bba <OneWireReadBit+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b72:	68 a1       	ldd	r22, Y+32	; 0x20
    4b74:	79 a1       	ldd	r23, Y+33	; 0x21
    4b76:	8a a1       	ldd	r24, Y+34	; 0x22
    4b78:	9b a1       	ldd	r25, Y+35	; 0x23
    4b7a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	9f 8f       	std	Y+31, r25	; 0x1f
    4b84:	8e 8f       	std	Y+30, r24	; 0x1e
    4b86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b8a:	9b 8f       	std	Y+27, r25	; 0x1b
    4b8c:	8a 8f       	std	Y+26, r24	; 0x1a
    4b8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4b92:	01 97       	sbiw	r24, 0x01	; 1
    4b94:	f1 f7       	brne	.-4      	; 0x4b92 <OneWireReadBit+0x330>
    4b96:	9b 8f       	std	Y+27, r25	; 0x1b
    4b98:	8a 8f       	std	Y+26, r24	; 0x1a
    4b9a:	0f c0       	rjmp	.+30     	; 0x4bba <OneWireReadBit+0x358>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4b9c:	69 a5       	ldd	r22, Y+41	; 0x29
    4b9e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4ba0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ba2:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ba4:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	88 a7       	std	Y+40, r24	; 0x28
    4bae:	88 a5       	ldd	r24, Y+40	; 0x28
    4bb0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4bb2:	89 8d       	ldd	r24, Y+25	; 0x19
    4bb4:	8a 95       	dec	r24
    4bb6:	f1 f7       	brne	.-4      	; 0x4bb4 <OneWireReadBit+0x352>
    4bb8:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(9); // wait 9uS
    unsigned char out = OneWireRead();
    4bba:	0e 94 9f 1b 	call	0x373e	; 0x373e <OneWireRead>
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	e7 5b       	subi	r30, 0xB7	; 183
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	80 83       	st	Z, r24
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	ac e5       	ldi	r26, 0x5C	; 92
    4bcc:	b2 e4       	ldi	r27, 0x42	; 66
    4bce:	8d 8b       	std	Y+21, r24	; 0x15
    4bd0:	9e 8b       	std	Y+22, r25	; 0x16
    4bd2:	af 8b       	std	Y+23, r26	; 0x17
    4bd4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    4bda:	8f 89       	ldd	r24, Y+23	; 0x17
    4bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    4bde:	2b ea       	ldi	r18, 0xAB	; 171
    4be0:	3a ea       	ldi	r19, 0xAA	; 170
    4be2:	4a e2       	ldi	r20, 0x2A	; 42
    4be4:	50 e4       	ldi	r21, 0x40	; 64
    4be6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	89 8b       	std	Y+17, r24	; 0x11
    4bf0:	9a 8b       	std	Y+18, r25	; 0x12
    4bf2:	ab 8b       	std	Y+19, r26	; 0x13
    4bf4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4bf6:	69 89       	ldd	r22, Y+17	; 0x11
    4bf8:	7a 89       	ldd	r23, Y+18	; 0x12
    4bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	40 e8       	ldi	r20, 0x80	; 128
    4c04:	5f e3       	ldi	r21, 0x3F	; 63
    4c06:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4c0a:	88 23       	and	r24, r24
    4c0c:	1c f4       	brge	.+6      	; 0x4c14 <OneWireReadBit+0x3b2>
		__ticks = 1;
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	88 8b       	std	Y+16, r24	; 0x10
    4c12:	91 c0       	rjmp	.+290    	; 0x4d36 <OneWireReadBit+0x4d4>
	else if (__tmp > 255)
    4c14:	69 89       	ldd	r22, Y+17	; 0x11
    4c16:	7a 89       	ldd	r23, Y+18	; 0x12
    4c18:	8b 89       	ldd	r24, Y+19	; 0x13
    4c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	4f e7       	ldi	r20, 0x7F	; 127
    4c22:	53 e4       	ldi	r21, 0x43	; 67
    4c24:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4c28:	18 16       	cp	r1, r24
    4c2a:	0c f0       	brlt	.+2      	; 0x4c2e <OneWireReadBit+0x3cc>
    4c2c:	7b c0       	rjmp	.+246    	; 0x4d24 <OneWireReadBit+0x4c2>
	{
		_delay_ms(__us / 1000.0);
    4c2e:	6d 89       	ldd	r22, Y+21	; 0x15
    4c30:	7e 89       	ldd	r23, Y+22	; 0x16
    4c32:	8f 89       	ldd	r24, Y+23	; 0x17
    4c34:	98 8d       	ldd	r25, Y+24	; 0x18
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	4a e7       	ldi	r20, 0x7A	; 122
    4c3c:	54 e4       	ldi	r21, 0x44	; 68
    4c3e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    4c42:	dc 01       	movw	r26, r24
    4c44:	cb 01       	movw	r24, r22
    4c46:	8c 87       	std	Y+12, r24	; 0x0c
    4c48:	9d 87       	std	Y+13, r25	; 0x0d
    4c4a:	ae 87       	std	Y+14, r26	; 0x0e
    4c4c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c50:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c52:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c54:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c56:	20 e0       	ldi	r18, 0x00	; 0
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	4a ef       	ldi	r20, 0xFA	; 250
    4c5c:	54 e4       	ldi	r21, 0x44	; 68
    4c5e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	88 87       	std	Y+8, r24	; 0x08
    4c68:	99 87       	std	Y+9, r25	; 0x09
    4c6a:	aa 87       	std	Y+10, r26	; 0x0a
    4c6c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4c6e:	68 85       	ldd	r22, Y+8	; 0x08
    4c70:	79 85       	ldd	r23, Y+9	; 0x09
    4c72:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c74:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e8       	ldi	r20, 0x80	; 128
    4c7c:	5f e3       	ldi	r21, 0x3F	; 63
    4c7e:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4c82:	88 23       	and	r24, r24
    4c84:	2c f4       	brge	.+10     	; 0x4c90 <OneWireReadBit+0x42e>
		__ticks = 1;
    4c86:	81 e0       	ldi	r24, 0x01	; 1
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	9f 83       	std	Y+7, r25	; 0x07
    4c8c:	8e 83       	std	Y+6, r24	; 0x06
    4c8e:	3f c0       	rjmp	.+126    	; 0x4d0e <OneWireReadBit+0x4ac>
	else if (__tmp > 65535)
    4c90:	68 85       	ldd	r22, Y+8	; 0x08
    4c92:	79 85       	ldd	r23, Y+9	; 0x09
    4c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c96:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	3f ef       	ldi	r19, 0xFF	; 255
    4c9c:	4f e7       	ldi	r20, 0x7F	; 127
    4c9e:	57 e4       	ldi	r21, 0x47	; 71
    4ca0:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4ca4:	18 16       	cp	r1, r24
    4ca6:	4c f5       	brge	.+82     	; 0x4cfa <OneWireReadBit+0x498>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ca8:	6c 85       	ldd	r22, Y+12	; 0x0c
    4caa:	7d 85       	ldd	r23, Y+13	; 0x0d
    4cac:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cae:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	40 e2       	ldi	r20, 0x20	; 32
    4cb6:	51 e4       	ldi	r21, 0x41	; 65
    4cb8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	bc 01       	movw	r22, r24
    4cc2:	cd 01       	movw	r24, r26
    4cc4:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	9f 83       	std	Y+7, r25	; 0x07
    4cce:	8e 83       	std	Y+6, r24	; 0x06
    4cd0:	0f c0       	rjmp	.+30     	; 0x4cf0 <OneWireReadBit+0x48e>
    4cd2:	88 ec       	ldi	r24, 0xC8	; 200
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	9d 83       	std	Y+5, r25	; 0x05
    4cd8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4cda:	8c 81       	ldd	r24, Y+4	; 0x04
    4cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    4cde:	01 97       	sbiw	r24, 0x01	; 1
    4ce0:	f1 f7       	brne	.-4      	; 0x4cde <OneWireReadBit+0x47c>
    4ce2:	9d 83       	std	Y+5, r25	; 0x05
    4ce4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ce8:	9f 81       	ldd	r25, Y+7	; 0x07
    4cea:	01 97       	sbiw	r24, 0x01	; 1
    4cec:	9f 83       	std	Y+7, r25	; 0x07
    4cee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    4cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    4cf4:	00 97       	sbiw	r24, 0x00	; 0
    4cf6:	69 f7       	brne	.-38     	; 0x4cd2 <OneWireReadBit+0x470>
    4cf8:	24 c0       	rjmp	.+72     	; 0x4d42 <OneWireReadBit+0x4e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cfa:	68 85       	ldd	r22, Y+8	; 0x08
    4cfc:	79 85       	ldd	r23, Y+9	; 0x09
    4cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d00:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d02:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4d06:	dc 01       	movw	r26, r24
    4d08:	cb 01       	movw	r24, r22
    4d0a:	9f 83       	std	Y+7, r25	; 0x07
    4d0c:	8e 83       	std	Y+6, r24	; 0x06
    4d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4d10:	9f 81       	ldd	r25, Y+7	; 0x07
    4d12:	9b 83       	std	Y+3, r25	; 0x03
    4d14:	8a 83       	std	Y+2, r24	; 0x02
    4d16:	8a 81       	ldd	r24, Y+2	; 0x02
    4d18:	9b 81       	ldd	r25, Y+3	; 0x03
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	f1 f7       	brne	.-4      	; 0x4d1a <OneWireReadBit+0x4b8>
    4d1e:	9b 83       	std	Y+3, r25	; 0x03
    4d20:	8a 83       	std	Y+2, r24	; 0x02
    4d22:	0f c0       	rjmp	.+30     	; 0x4d42 <OneWireReadBit+0x4e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d24:	69 89       	ldd	r22, Y+17	; 0x11
    4d26:	7a 89       	ldd	r23, Y+18	; 0x12
    4d28:	8b 89       	ldd	r24, Y+19	; 0x13
    4d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d2c:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4d30:	dc 01       	movw	r26, r24
    4d32:	cb 01       	movw	r24, r22
    4d34:	88 8b       	std	Y+16, r24	; 0x10
    4d36:	88 89       	ldd	r24, Y+16	; 0x10
    4d38:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d3a:	89 81       	ldd	r24, Y+1	; 0x01
    4d3c:	8a 95       	dec	r24
    4d3e:	f1 f7       	brne	.-4      	; 0x4d3c <OneWireReadBit+0x4da>
    4d40:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(55); // wait 55uS
    return out;
    4d42:	fe 01       	movw	r30, r28
    4d44:	e7 5b       	subi	r30, 0xB7	; 183
    4d46:	ff 4f       	sbci	r31, 0xFF	; 255
    4d48:	80 81       	ld	r24, Z
}
    4d4a:	c7 5b       	subi	r28, 0xB7	; 183
    4d4c:	df 4f       	sbci	r29, 0xFF	; 255
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	f8 94       	cli
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	cd bf       	out	0x3d, r28	; 61
    4d58:	cf 91       	pop	r28
    4d5a:	df 91       	pop	r29
    4d5c:	1f 91       	pop	r17
    4d5e:	0f 91       	pop	r16
    4d60:	08 95       	ret

00004d62 <OneWireWriteByte>:

void OneWireWriteByte(unsigned char b){
    4d62:	df 93       	push	r29
    4d64:	cf 93       	push	r28
    4d66:	00 d0       	rcall	.+0      	; 0x4d68 <OneWireWriteByte+0x6>
    4d68:	0f 92       	push	r0
    4d6a:	cd b7       	in	r28, 0x3d	; 61
    4d6c:	de b7       	in	r29, 0x3e	; 62
    4d6e:	8b 83       	std	Y+3, r24	; 0x03
    for(int i = 0; i < 8; i++){
    4d70:	1a 82       	std	Y+2, r1	; 0x02
    4d72:	19 82       	std	Y+1, r1	; 0x01
    4d74:	0c c0       	rjmp	.+24     	; 0x4d8e <OneWireWriteByte+0x2c>
        OneWireWriteBit(b & 0x01); // send LS bit first 
    4d76:	8b 81       	ldd	r24, Y+3	; 0x03
    4d78:	81 70       	andi	r24, 0x01	; 1
    4d7a:	0e 94 82 20 	call	0x4104	; 0x4104 <OneWireWriteBit>
        b = b >> 1;
    4d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d80:	86 95       	lsr	r24
    4d82:	8b 83       	std	Y+3, r24	; 0x03
    _delay_us(55); // wait 55uS
    return out;
}

void OneWireWriteByte(unsigned char b){
    for(int i = 0; i < 8; i++){
    4d84:	89 81       	ldd	r24, Y+1	; 0x01
    4d86:	9a 81       	ldd	r25, Y+2	; 0x02
    4d88:	01 96       	adiw	r24, 0x01	; 1
    4d8a:	9a 83       	std	Y+2, r25	; 0x02
    4d8c:	89 83       	std	Y+1, r24	; 0x01
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	9a 81       	ldd	r25, Y+2	; 0x02
    4d92:	88 30       	cpi	r24, 0x08	; 8
    4d94:	91 05       	cpc	r25, r1
    4d96:	7c f3       	brlt	.-34     	; 0x4d76 <OneWireWriteByte+0x14>
        OneWireWriteBit(b & 0x01); // send LS bit first 
        b = b >> 1;
    }
}
    4d98:	0f 90       	pop	r0
    4d9a:	0f 90       	pop	r0
    4d9c:	0f 90       	pop	r0
    4d9e:	cf 91       	pop	r28
    4da0:	df 91       	pop	r29
    4da2:	08 95       	ret

00004da4 <OneWireReadByte>:

unsigned char OneWireReadByte(void){
    4da4:	df 93       	push	r29
    4da6:	cf 93       	push	r28
    4da8:	00 d0       	rcall	.+0      	; 0x4daa <OneWireReadByte+0x6>
    4daa:	0f 92       	push	r0
    4dac:	cd b7       	in	r28, 0x3d	; 61
    4dae:	de b7       	in	r29, 0x3e	; 62
    unsigned char out; 
    for(int i = 0; i < 8; i++){ // read in LS bit first
    4db0:	1a 82       	std	Y+2, r1	; 0x02
    4db2:	19 82       	std	Y+1, r1	; 0x01
    4db4:	13 c0       	rjmp	.+38     	; 0x4ddc <OneWireReadByte+0x38>
        out = out >> 1; // get out ready for next bit
    4db6:	8b 81       	ldd	r24, Y+3	; 0x03
    4db8:	86 95       	lsr	r24
    4dba:	8b 83       	std	Y+3, r24	; 0x03
        if(OneWireReadBit() & 0x01) // if its a one 
    4dbc:	0e 94 31 24 	call	0x4862	; 0x4862 <OneWireReadBit>
    4dc0:	88 2f       	mov	r24, r24
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	81 70       	andi	r24, 0x01	; 1
    4dc6:	90 70       	andi	r25, 0x00	; 0
    4dc8:	88 23       	and	r24, r24
    4dca:	19 f0       	breq	.+6      	; 0x4dd2 <OneWireReadByte+0x2e>
            out = out | 0x80; // place a 1 
    4dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dce:	80 68       	ori	r24, 0x80	; 128
    4dd0:	8b 83       	std	Y+3, r24	; 0x03
    }
}

unsigned char OneWireReadByte(void){
    unsigned char out; 
    for(int i = 0; i < 8; i++){ // read in LS bit first
    4dd2:	89 81       	ldd	r24, Y+1	; 0x01
    4dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd6:	01 96       	adiw	r24, 0x01	; 1
    4dd8:	9a 83       	std	Y+2, r25	; 0x02
    4dda:	89 83       	std	Y+1, r24	; 0x01
    4ddc:	89 81       	ldd	r24, Y+1	; 0x01
    4dde:	9a 81       	ldd	r25, Y+2	; 0x02
    4de0:	88 30       	cpi	r24, 0x08	; 8
    4de2:	91 05       	cpc	r25, r1
    4de4:	44 f3       	brlt	.-48     	; 0x4db6 <OneWireReadByte+0x12>
        out = out >> 1; // get out ready for next bit
        if(OneWireReadBit() & 0x01) // if its a one 
            out = out | 0x80; // place a 1 
    }
    return out;
    4de6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4de8:	0f 90       	pop	r0
    4dea:	0f 90       	pop	r0
    4dec:	0f 90       	pop	r0
    4dee:	cf 91       	pop	r28
    4df0:	df 91       	pop	r29
    4df2:	08 95       	ret

00004df4 <GIE_VidEnable>:
#include"bit_math.h"
#include "DIO_interface.h"
#include "INTERRUPT_Interface.h"
#include "INTERRUPT_private.h"

void GIE_VidEnable (void){
    4df4:	df 93       	push	r29
    4df6:	cf 93       	push	r28
    4df8:	cd b7       	in	r28, 0x3d	; 61
    4dfa:	de b7       	in	r29, 0x3e	; 62
	//to enable general interrupt
	SET_BIT(SREG,I_BIT);
    4dfc:	af e5       	ldi	r26, 0x5F	; 95
    4dfe:	b0 e0       	ldi	r27, 0x00	; 0
    4e00:	ef e5       	ldi	r30, 0x5F	; 95
    4e02:	f0 e0       	ldi	r31, 0x00	; 0
    4e04:	80 81       	ld	r24, Z
    4e06:	80 68       	ori	r24, 0x80	; 128
    4e08:	8c 93       	st	X, r24
}
    4e0a:	cf 91       	pop	r28
    4e0c:	df 91       	pop	r29
    4e0e:	08 95       	ret

00004e10 <GIE_VidDisable>:

void GIE_VidDisable (void){
    4e10:	df 93       	push	r29
    4e12:	cf 93       	push	r28
    4e14:	cd b7       	in	r28, 0x3d	; 61
    4e16:	de b7       	in	r29, 0x3e	; 62
	//to disable general interrupt
	CLR_BIT(SREG,I_BIT);
    4e18:	af e5       	ldi	r26, 0x5F	; 95
    4e1a:	b0 e0       	ldi	r27, 0x00	; 0
    4e1c:	ef e5       	ldi	r30, 0x5F	; 95
    4e1e:	f0 e0       	ldi	r31, 0x00	; 0
    4e20:	80 81       	ld	r24, Z
    4e22:	8f 77       	andi	r24, 0x7F	; 127
    4e24:	8c 93       	st	X, r24
}
    4e26:	cf 91       	pop	r28
    4e28:	df 91       	pop	r29
    4e2a:	08 95       	ret

00004e2c <LCD_Command>:
#define LCD_Port PORTB			/* Define LCD data port */
#define RS PB0				/* Define Register Select pin */
#define EN PB1 				/* Define Enable signal pin */

void LCD_Command( unsigned char cmnd )
{
    4e2c:	0f 93       	push	r16
    4e2e:	1f 93       	push	r17
    4e30:	df 93       	push	r29
    4e32:	cf 93       	push	r28
    4e34:	cd b7       	in	r28, 0x3d	; 61
    4e36:	de b7       	in	r29, 0x3e	; 62
    4e38:	c7 55       	subi	r28, 0x57	; 87
    4e3a:	d0 40       	sbci	r29, 0x00	; 0
    4e3c:	0f b6       	in	r0, 0x3f	; 63
    4e3e:	f8 94       	cli
    4e40:	de bf       	out	0x3e, r29	; 62
    4e42:	0f be       	out	0x3f, r0	; 63
    4e44:	cd bf       	out	0x3d, r28	; 61
    4e46:	fe 01       	movw	r30, r28
    4e48:	e9 5a       	subi	r30, 0xA9	; 169
    4e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4c:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    4e4e:	a8 e3       	ldi	r26, 0x38	; 56
    4e50:	b0 e0       	ldi	r27, 0x00	; 0
    4e52:	e8 e3       	ldi	r30, 0x38	; 56
    4e54:	f0 e0       	ldi	r31, 0x00	; 0
    4e56:	80 81       	ld	r24, Z
    4e58:	98 2f       	mov	r25, r24
    4e5a:	9f 70       	andi	r25, 0x0F	; 15
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	e9 5a       	subi	r30, 0xA9	; 169
    4e60:	ff 4f       	sbci	r31, 0xFF	; 255
    4e62:	80 81       	ld	r24, Z
    4e64:	80 7f       	andi	r24, 0xF0	; 240
    4e66:	89 2b       	or	r24, r25
    4e68:	8c 93       	st	X, r24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
    4e6a:	a8 e3       	ldi	r26, 0x38	; 56
    4e6c:	b0 e0       	ldi	r27, 0x00	; 0
    4e6e:	e8 e3       	ldi	r30, 0x38	; 56
    4e70:	f0 e0       	ldi	r31, 0x00	; 0
    4e72:	80 81       	ld	r24, Z
    4e74:	8e 7f       	andi	r24, 0xFE	; 254
    4e76:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);		/* Enable pulse */
    4e78:	a8 e3       	ldi	r26, 0x38	; 56
    4e7a:	b0 e0       	ldi	r27, 0x00	; 0
    4e7c:	e8 e3       	ldi	r30, 0x38	; 56
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	80 81       	ld	r24, Z
    4e82:	82 60       	ori	r24, 0x02	; 2
    4e84:	8c 93       	st	X, r24
    4e86:	fe 01       	movw	r30, r28
    4e88:	ed 5a       	subi	r30, 0xAD	; 173
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	80 e0       	ldi	r24, 0x00	; 0
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	a0 e8       	ldi	r26, 0x80	; 128
    4e92:	bf e3       	ldi	r27, 0x3F	; 63
    4e94:	80 83       	st	Z, r24
    4e96:	91 83       	std	Z+1, r25	; 0x01
    4e98:	a2 83       	std	Z+2, r26	; 0x02
    4e9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e9c:	8e 01       	movw	r16, r28
    4e9e:	01 5b       	subi	r16, 0xB1	; 177
    4ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	ed 5a       	subi	r30, 0xAD	; 173
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	60 81       	ld	r22, Z
    4eaa:	71 81       	ldd	r23, Z+1	; 0x01
    4eac:	82 81       	ldd	r24, Z+2	; 0x02
    4eae:	93 81       	ldd	r25, Z+3	; 0x03
    4eb0:	2b ea       	ldi	r18, 0xAB	; 171
    4eb2:	3a ea       	ldi	r19, 0xAA	; 170
    4eb4:	4a e2       	ldi	r20, 0x2A	; 42
    4eb6:	50 e4       	ldi	r21, 0x40	; 64
    4eb8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4ebc:	dc 01       	movw	r26, r24
    4ebe:	cb 01       	movw	r24, r22
    4ec0:	f8 01       	movw	r30, r16
    4ec2:	80 83       	st	Z, r24
    4ec4:	91 83       	std	Z+1, r25	; 0x01
    4ec6:	a2 83       	std	Z+2, r26	; 0x02
    4ec8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4eca:	fe 01       	movw	r30, r28
    4ecc:	e1 5b       	subi	r30, 0xB1	; 177
    4ece:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed0:	60 81       	ld	r22, Z
    4ed2:	71 81       	ldd	r23, Z+1	; 0x01
    4ed4:	82 81       	ldd	r24, Z+2	; 0x02
    4ed6:	93 81       	ldd	r25, Z+3	; 0x03
    4ed8:	20 e0       	ldi	r18, 0x00	; 0
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	40 e8       	ldi	r20, 0x80	; 128
    4ede:	5f e3       	ldi	r21, 0x3F	; 63
    4ee0:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4ee4:	88 23       	and	r24, r24
    4ee6:	34 f4       	brge	.+12     	; 0x4ef4 <LCD_Command+0xc8>
		__ticks = 1;
    4ee8:	fe 01       	movw	r30, r28
    4eea:	e2 5b       	subi	r30, 0xB2	; 178
    4eec:	ff 4f       	sbci	r31, 0xFF	; 255
    4eee:	81 e0       	ldi	r24, 0x01	; 1
    4ef0:	80 83       	st	Z, r24
    4ef2:	e0 c0       	rjmp	.+448    	; 0x50b4 <LCD_Command+0x288>
	else if (__tmp > 255)
    4ef4:	fe 01       	movw	r30, r28
    4ef6:	e1 5b       	subi	r30, 0xB1	; 177
    4ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    4efa:	60 81       	ld	r22, Z
    4efc:	71 81       	ldd	r23, Z+1	; 0x01
    4efe:	82 81       	ldd	r24, Z+2	; 0x02
    4f00:	93 81       	ldd	r25, Z+3	; 0x03
    4f02:	20 e0       	ldi	r18, 0x00	; 0
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	4f e7       	ldi	r20, 0x7F	; 127
    4f08:	53 e4       	ldi	r21, 0x43	; 67
    4f0a:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4f0e:	18 16       	cp	r1, r24
    4f10:	0c f0       	brlt	.+2      	; 0x4f14 <LCD_Command+0xe8>
    4f12:	c0 c0       	rjmp	.+384    	; 0x5094 <LCD_Command+0x268>
	{
		_delay_ms(__us / 1000.0);
    4f14:	fe 01       	movw	r30, r28
    4f16:	ed 5a       	subi	r30, 0xAD	; 173
    4f18:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1a:	60 81       	ld	r22, Z
    4f1c:	71 81       	ldd	r23, Z+1	; 0x01
    4f1e:	82 81       	ldd	r24, Z+2	; 0x02
    4f20:	93 81       	ldd	r25, Z+3	; 0x03
    4f22:	20 e0       	ldi	r18, 0x00	; 0
    4f24:	30 e0       	ldi	r19, 0x00	; 0
    4f26:	4a e7       	ldi	r20, 0x7A	; 122
    4f28:	54 e4       	ldi	r21, 0x44	; 68
    4f2a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    4f2e:	dc 01       	movw	r26, r24
    4f30:	cb 01       	movw	r24, r22
    4f32:	fe 01       	movw	r30, r28
    4f34:	e6 5b       	subi	r30, 0xB6	; 182
    4f36:	ff 4f       	sbci	r31, 0xFF	; 255
    4f38:	80 83       	st	Z, r24
    4f3a:	91 83       	std	Z+1, r25	; 0x01
    4f3c:	a2 83       	std	Z+2, r26	; 0x02
    4f3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f40:	8e 01       	movw	r16, r28
    4f42:	0a 5b       	subi	r16, 0xBA	; 186
    4f44:	1f 4f       	sbci	r17, 0xFF	; 255
    4f46:	fe 01       	movw	r30, r28
    4f48:	e6 5b       	subi	r30, 0xB6	; 182
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	60 81       	ld	r22, Z
    4f4e:	71 81       	ldd	r23, Z+1	; 0x01
    4f50:	82 81       	ldd	r24, Z+2	; 0x02
    4f52:	93 81       	ldd	r25, Z+3	; 0x03
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	4a ef       	ldi	r20, 0xFA	; 250
    4f5a:	54 e4       	ldi	r21, 0x44	; 68
    4f5c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4f60:	dc 01       	movw	r26, r24
    4f62:	cb 01       	movw	r24, r22
    4f64:	f8 01       	movw	r30, r16
    4f66:	80 83       	st	Z, r24
    4f68:	91 83       	std	Z+1, r25	; 0x01
    4f6a:	a2 83       	std	Z+2, r26	; 0x02
    4f6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f6e:	fe 01       	movw	r30, r28
    4f70:	ea 5b       	subi	r30, 0xBA	; 186
    4f72:	ff 4f       	sbci	r31, 0xFF	; 255
    4f74:	60 81       	ld	r22, Z
    4f76:	71 81       	ldd	r23, Z+1	; 0x01
    4f78:	82 81       	ldd	r24, Z+2	; 0x02
    4f7a:	93 81       	ldd	r25, Z+3	; 0x03
    4f7c:	20 e0       	ldi	r18, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	40 e8       	ldi	r20, 0x80	; 128
    4f82:	5f e3       	ldi	r21, 0x3F	; 63
    4f84:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    4f88:	88 23       	and	r24, r24
    4f8a:	44 f4       	brge	.+16     	; 0x4f9c <LCD_Command+0x170>
		__ticks = 1;
    4f8c:	fe 01       	movw	r30, r28
    4f8e:	ec 5b       	subi	r30, 0xBC	; 188
    4f90:	ff 4f       	sbci	r31, 0xFF	; 255
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	91 83       	std	Z+1, r25	; 0x01
    4f98:	80 83       	st	Z, r24
    4f9a:	64 c0       	rjmp	.+200    	; 0x5064 <LCD_Command+0x238>
	else if (__tmp > 65535)
    4f9c:	fe 01       	movw	r30, r28
    4f9e:	ea 5b       	subi	r30, 0xBA	; 186
    4fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa2:	60 81       	ld	r22, Z
    4fa4:	71 81       	ldd	r23, Z+1	; 0x01
    4fa6:	82 81       	ldd	r24, Z+2	; 0x02
    4fa8:	93 81       	ldd	r25, Z+3	; 0x03
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	3f ef       	ldi	r19, 0xFF	; 255
    4fae:	4f e7       	ldi	r20, 0x7F	; 127
    4fb0:	57 e4       	ldi	r21, 0x47	; 71
    4fb2:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    4fb6:	18 16       	cp	r1, r24
    4fb8:	0c f0       	brlt	.+2      	; 0x4fbc <LCD_Command+0x190>
    4fba:	43 c0       	rjmp	.+134    	; 0x5042 <LCD_Command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fbc:	fe 01       	movw	r30, r28
    4fbe:	e6 5b       	subi	r30, 0xB6	; 182
    4fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc2:	60 81       	ld	r22, Z
    4fc4:	71 81       	ldd	r23, Z+1	; 0x01
    4fc6:	82 81       	ldd	r24, Z+2	; 0x02
    4fc8:	93 81       	ldd	r25, Z+3	; 0x03
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	40 e2       	ldi	r20, 0x20	; 32
    4fd0:	51 e4       	ldi	r21, 0x41	; 65
    4fd2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	8e 01       	movw	r16, r28
    4fdc:	0c 5b       	subi	r16, 0xBC	; 188
    4fde:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe0:	bc 01       	movw	r22, r24
    4fe2:	cd 01       	movw	r24, r26
    4fe4:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    4fe8:	dc 01       	movw	r26, r24
    4fea:	cb 01       	movw	r24, r22
    4fec:	f8 01       	movw	r30, r16
    4fee:	91 83       	std	Z+1, r25	; 0x01
    4ff0:	80 83       	st	Z, r24
    4ff2:	1f c0       	rjmp	.+62     	; 0x5032 <LCD_Command+0x206>
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	ee 5b       	subi	r30, 0xBE	; 190
    4ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffa:	88 ec       	ldi	r24, 0xC8	; 200
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	91 83       	std	Z+1, r25	; 0x01
    5000:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5002:	fe 01       	movw	r30, r28
    5004:	ee 5b       	subi	r30, 0xBE	; 190
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	80 81       	ld	r24, Z
    500a:	91 81       	ldd	r25, Z+1	; 0x01
    500c:	01 97       	sbiw	r24, 0x01	; 1
    500e:	f1 f7       	brne	.-4      	; 0x500c <LCD_Command+0x1e0>
    5010:	fe 01       	movw	r30, r28
    5012:	ee 5b       	subi	r30, 0xBE	; 190
    5014:	ff 4f       	sbci	r31, 0xFF	; 255
    5016:	91 83       	std	Z+1, r25	; 0x01
    5018:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    501a:	de 01       	movw	r26, r28
    501c:	ac 5b       	subi	r26, 0xBC	; 188
    501e:	bf 4f       	sbci	r27, 0xFF	; 255
    5020:	fe 01       	movw	r30, r28
    5022:	ec 5b       	subi	r30, 0xBC	; 188
    5024:	ff 4f       	sbci	r31, 0xFF	; 255
    5026:	80 81       	ld	r24, Z
    5028:	91 81       	ldd	r25, Z+1	; 0x01
    502a:	01 97       	sbiw	r24, 0x01	; 1
    502c:	11 96       	adiw	r26, 0x01	; 1
    502e:	9c 93       	st	X, r25
    5030:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5032:	fe 01       	movw	r30, r28
    5034:	ec 5b       	subi	r30, 0xBC	; 188
    5036:	ff 4f       	sbci	r31, 0xFF	; 255
    5038:	80 81       	ld	r24, Z
    503a:	91 81       	ldd	r25, Z+1	; 0x01
    503c:	00 97       	sbiw	r24, 0x00	; 0
    503e:	d1 f6       	brne	.-76     	; 0x4ff4 <LCD_Command+0x1c8>
    5040:	42 c0       	rjmp	.+132    	; 0x50c6 <LCD_Command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5042:	8e 01       	movw	r16, r28
    5044:	0c 5b       	subi	r16, 0xBC	; 188
    5046:	1f 4f       	sbci	r17, 0xFF	; 255
    5048:	fe 01       	movw	r30, r28
    504a:	ea 5b       	subi	r30, 0xBA	; 186
    504c:	ff 4f       	sbci	r31, 0xFF	; 255
    504e:	60 81       	ld	r22, Z
    5050:	71 81       	ldd	r23, Z+1	; 0x01
    5052:	82 81       	ldd	r24, Z+2	; 0x02
    5054:	93 81       	ldd	r25, Z+3	; 0x03
    5056:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    505a:	dc 01       	movw	r26, r24
    505c:	cb 01       	movw	r24, r22
    505e:	f8 01       	movw	r30, r16
    5060:	91 83       	std	Z+1, r25	; 0x01
    5062:	80 83       	st	Z, r24
    5064:	de 01       	movw	r26, r28
    5066:	a0 5c       	subi	r26, 0xC0	; 192
    5068:	bf 4f       	sbci	r27, 0xFF	; 255
    506a:	fe 01       	movw	r30, r28
    506c:	ec 5b       	subi	r30, 0xBC	; 188
    506e:	ff 4f       	sbci	r31, 0xFF	; 255
    5070:	80 81       	ld	r24, Z
    5072:	91 81       	ldd	r25, Z+1	; 0x01
    5074:	11 96       	adiw	r26, 0x01	; 1
    5076:	9c 93       	st	X, r25
    5078:	8e 93       	st	-X, r24
    507a:	fe 01       	movw	r30, r28
    507c:	e0 5c       	subi	r30, 0xC0	; 192
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	80 81       	ld	r24, Z
    5082:	91 81       	ldd	r25, Z+1	; 0x01
    5084:	01 97       	sbiw	r24, 0x01	; 1
    5086:	f1 f7       	brne	.-4      	; 0x5084 <LCD_Command+0x258>
    5088:	fe 01       	movw	r30, r28
    508a:	e0 5c       	subi	r30, 0xC0	; 192
    508c:	ff 4f       	sbci	r31, 0xFF	; 255
    508e:	91 83       	std	Z+1, r25	; 0x01
    5090:	80 83       	st	Z, r24
    5092:	19 c0       	rjmp	.+50     	; 0x50c6 <LCD_Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5094:	8e 01       	movw	r16, r28
    5096:	02 5b       	subi	r16, 0xB2	; 178
    5098:	1f 4f       	sbci	r17, 0xFF	; 255
    509a:	fe 01       	movw	r30, r28
    509c:	e1 5b       	subi	r30, 0xB1	; 177
    509e:	ff 4f       	sbci	r31, 0xFF	; 255
    50a0:	60 81       	ld	r22, Z
    50a2:	71 81       	ldd	r23, Z+1	; 0x01
    50a4:	82 81       	ldd	r24, Z+2	; 0x02
    50a6:	93 81       	ldd	r25, Z+3	; 0x03
    50a8:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    50ac:	dc 01       	movw	r26, r24
    50ae:	cb 01       	movw	r24, r22
    50b0:	f8 01       	movw	r30, r16
    50b2:	80 83       	st	Z, r24
    50b4:	fe 01       	movw	r30, r28
    50b6:	e2 5b       	subi	r30, 0xB2	; 178
    50b8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ba:	80 81       	ld	r24, Z
    50bc:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    50be:	8f ad       	ldd	r24, Y+63	; 0x3f
    50c0:	8a 95       	dec	r24
    50c2:	f1 f7       	brne	.-4      	; 0x50c0 <LCD_Command+0x294>
    50c4:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    50c6:	a8 e3       	ldi	r26, 0x38	; 56
    50c8:	b0 e0       	ldi	r27, 0x00	; 0
    50ca:	e8 e3       	ldi	r30, 0x38	; 56
    50cc:	f0 e0       	ldi	r31, 0x00	; 0
    50ce:	80 81       	ld	r24, Z
    50d0:	8d 7f       	andi	r24, 0xFD	; 253
    50d2:	8c 93       	st	X, r24
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	a8 e4       	ldi	r26, 0x48	; 72
    50da:	b3 e4       	ldi	r27, 0x43	; 67
    50dc:	8b af       	std	Y+59, r24	; 0x3b
    50de:	9c af       	std	Y+60, r25	; 0x3c
    50e0:	ad af       	std	Y+61, r26	; 0x3d
    50e2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    50e4:	6b ad       	ldd	r22, Y+59	; 0x3b
    50e6:	7c ad       	ldd	r23, Y+60	; 0x3c
    50e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    50ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    50ec:	2b ea       	ldi	r18, 0xAB	; 171
    50ee:	3a ea       	ldi	r19, 0xAA	; 170
    50f0:	4a e2       	ldi	r20, 0x2A	; 42
    50f2:	50 e4       	ldi	r21, 0x40	; 64
    50f4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    50f8:	dc 01       	movw	r26, r24
    50fa:	cb 01       	movw	r24, r22
    50fc:	8f ab       	std	Y+55, r24	; 0x37
    50fe:	98 af       	std	Y+56, r25	; 0x38
    5100:	a9 af       	std	Y+57, r26	; 0x39
    5102:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    5104:	6f a9       	ldd	r22, Y+55	; 0x37
    5106:	78 ad       	ldd	r23, Y+56	; 0x38
    5108:	89 ad       	ldd	r24, Y+57	; 0x39
    510a:	9a ad       	ldd	r25, Y+58	; 0x3a
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	40 e8       	ldi	r20, 0x80	; 128
    5112:	5f e3       	ldi	r21, 0x3F	; 63
    5114:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5118:	88 23       	and	r24, r24
    511a:	1c f4       	brge	.+6      	; 0x5122 <LCD_Command+0x2f6>
		__ticks = 1;
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	8e ab       	std	Y+54, r24	; 0x36
    5120:	91 c0       	rjmp	.+290    	; 0x5244 <LCD_Command+0x418>
	else if (__tmp > 255)
    5122:	6f a9       	ldd	r22, Y+55	; 0x37
    5124:	78 ad       	ldd	r23, Y+56	; 0x38
    5126:	89 ad       	ldd	r24, Y+57	; 0x39
    5128:	9a ad       	ldd	r25, Y+58	; 0x3a
    512a:	20 e0       	ldi	r18, 0x00	; 0
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	4f e7       	ldi	r20, 0x7F	; 127
    5130:	53 e4       	ldi	r21, 0x43	; 67
    5132:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5136:	18 16       	cp	r1, r24
    5138:	0c f0       	brlt	.+2      	; 0x513c <LCD_Command+0x310>
    513a:	7b c0       	rjmp	.+246    	; 0x5232 <LCD_Command+0x406>
	{
		_delay_ms(__us / 1000.0);
    513c:	6b ad       	ldd	r22, Y+59	; 0x3b
    513e:	7c ad       	ldd	r23, Y+60	; 0x3c
    5140:	8d ad       	ldd	r24, Y+61	; 0x3d
    5142:	9e ad       	ldd	r25, Y+62	; 0x3e
    5144:	20 e0       	ldi	r18, 0x00	; 0
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	4a e7       	ldi	r20, 0x7A	; 122
    514a:	54 e4       	ldi	r21, 0x44	; 68
    514c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    5150:	dc 01       	movw	r26, r24
    5152:	cb 01       	movw	r24, r22
    5154:	8a ab       	std	Y+50, r24	; 0x32
    5156:	9b ab       	std	Y+51, r25	; 0x33
    5158:	ac ab       	std	Y+52, r26	; 0x34
    515a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    515c:	6a a9       	ldd	r22, Y+50	; 0x32
    515e:	7b a9       	ldd	r23, Y+51	; 0x33
    5160:	8c a9       	ldd	r24, Y+52	; 0x34
    5162:	9d a9       	ldd	r25, Y+53	; 0x35
    5164:	20 e0       	ldi	r18, 0x00	; 0
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	4a ef       	ldi	r20, 0xFA	; 250
    516a:	54 e4       	ldi	r21, 0x44	; 68
    516c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5170:	dc 01       	movw	r26, r24
    5172:	cb 01       	movw	r24, r22
    5174:	8e a7       	std	Y+46, r24	; 0x2e
    5176:	9f a7       	std	Y+47, r25	; 0x2f
    5178:	a8 ab       	std	Y+48, r26	; 0x30
    517a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    517c:	6e a5       	ldd	r22, Y+46	; 0x2e
    517e:	7f a5       	ldd	r23, Y+47	; 0x2f
    5180:	88 a9       	ldd	r24, Y+48	; 0x30
    5182:	99 a9       	ldd	r25, Y+49	; 0x31
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	40 e8       	ldi	r20, 0x80	; 128
    518a:	5f e3       	ldi	r21, 0x3F	; 63
    518c:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5190:	88 23       	and	r24, r24
    5192:	2c f4       	brge	.+10     	; 0x519e <LCD_Command+0x372>
		__ticks = 1;
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	9d a7       	std	Y+45, r25	; 0x2d
    519a:	8c a7       	std	Y+44, r24	; 0x2c
    519c:	3f c0       	rjmp	.+126    	; 0x521c <LCD_Command+0x3f0>
	else if (__tmp > 65535)
    519e:	6e a5       	ldd	r22, Y+46	; 0x2e
    51a0:	7f a5       	ldd	r23, Y+47	; 0x2f
    51a2:	88 a9       	ldd	r24, Y+48	; 0x30
    51a4:	99 a9       	ldd	r25, Y+49	; 0x31
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	3f ef       	ldi	r19, 0xFF	; 255
    51aa:	4f e7       	ldi	r20, 0x7F	; 127
    51ac:	57 e4       	ldi	r21, 0x47	; 71
    51ae:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    51b2:	18 16       	cp	r1, r24
    51b4:	4c f5       	brge	.+82     	; 0x5208 <LCD_Command+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51b6:	6a a9       	ldd	r22, Y+50	; 0x32
    51b8:	7b a9       	ldd	r23, Y+51	; 0x33
    51ba:	8c a9       	ldd	r24, Y+52	; 0x34
    51bc:	9d a9       	ldd	r25, Y+53	; 0x35
    51be:	20 e0       	ldi	r18, 0x00	; 0
    51c0:	30 e0       	ldi	r19, 0x00	; 0
    51c2:	40 e2       	ldi	r20, 0x20	; 32
    51c4:	51 e4       	ldi	r21, 0x41	; 65
    51c6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    51ca:	dc 01       	movw	r26, r24
    51cc:	cb 01       	movw	r24, r22
    51ce:	bc 01       	movw	r22, r24
    51d0:	cd 01       	movw	r24, r26
    51d2:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    51d6:	dc 01       	movw	r26, r24
    51d8:	cb 01       	movw	r24, r22
    51da:	9d a7       	std	Y+45, r25	; 0x2d
    51dc:	8c a7       	std	Y+44, r24	; 0x2c
    51de:	0f c0       	rjmp	.+30     	; 0x51fe <LCD_Command+0x3d2>
    51e0:	88 ec       	ldi	r24, 0xC8	; 200
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	9b a7       	std	Y+43, r25	; 0x2b
    51e6:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    51e8:	8a a5       	ldd	r24, Y+42	; 0x2a
    51ea:	9b a5       	ldd	r25, Y+43	; 0x2b
    51ec:	01 97       	sbiw	r24, 0x01	; 1
    51ee:	f1 f7       	brne	.-4      	; 0x51ec <LCD_Command+0x3c0>
    51f0:	9b a7       	std	Y+43, r25	; 0x2b
    51f2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    51f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    51f8:	01 97       	sbiw	r24, 0x01	; 1
    51fa:	9d a7       	std	Y+45, r25	; 0x2d
    51fc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    5200:	9d a5       	ldd	r25, Y+45	; 0x2d
    5202:	00 97       	sbiw	r24, 0x00	; 0
    5204:	69 f7       	brne	.-38     	; 0x51e0 <LCD_Command+0x3b4>
    5206:	24 c0       	rjmp	.+72     	; 0x5250 <LCD_Command+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5208:	6e a5       	ldd	r22, Y+46	; 0x2e
    520a:	7f a5       	ldd	r23, Y+47	; 0x2f
    520c:	88 a9       	ldd	r24, Y+48	; 0x30
    520e:	99 a9       	ldd	r25, Y+49	; 0x31
    5210:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5214:	dc 01       	movw	r26, r24
    5216:	cb 01       	movw	r24, r22
    5218:	9d a7       	std	Y+45, r25	; 0x2d
    521a:	8c a7       	std	Y+44, r24	; 0x2c
    521c:	8c a5       	ldd	r24, Y+44	; 0x2c
    521e:	9d a5       	ldd	r25, Y+45	; 0x2d
    5220:	99 a7       	std	Y+41, r25	; 0x29
    5222:	88 a7       	std	Y+40, r24	; 0x28
    5224:	88 a5       	ldd	r24, Y+40	; 0x28
    5226:	99 a5       	ldd	r25, Y+41	; 0x29
    5228:	01 97       	sbiw	r24, 0x01	; 1
    522a:	f1 f7       	brne	.-4      	; 0x5228 <LCD_Command+0x3fc>
    522c:	99 a7       	std	Y+41, r25	; 0x29
    522e:	88 a7       	std	Y+40, r24	; 0x28
    5230:	0f c0       	rjmp	.+30     	; 0x5250 <LCD_Command+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5232:	6f a9       	ldd	r22, Y+55	; 0x37
    5234:	78 ad       	ldd	r23, Y+56	; 0x38
    5236:	89 ad       	ldd	r24, Y+57	; 0x39
    5238:	9a ad       	ldd	r25, Y+58	; 0x3a
    523a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    523e:	dc 01       	movw	r26, r24
    5240:	cb 01       	movw	r24, r22
    5242:	8e ab       	std	Y+54, r24	; 0x36
    5244:	8e a9       	ldd	r24, Y+54	; 0x36
    5246:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5248:	8f a1       	ldd	r24, Y+39	; 0x27
    524a:	8a 95       	dec	r24
    524c:	f1 f7       	brne	.-4      	; 0x524a <LCD_Command+0x41e>
    524e:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    5250:	a8 e3       	ldi	r26, 0x38	; 56
    5252:	b0 e0       	ldi	r27, 0x00	; 0
    5254:	e8 e3       	ldi	r30, 0x38	; 56
    5256:	f0 e0       	ldi	r31, 0x00	; 0
    5258:	80 81       	ld	r24, Z
    525a:	28 2f       	mov	r18, r24
    525c:	2f 70       	andi	r18, 0x0F	; 15
    525e:	fe 01       	movw	r30, r28
    5260:	e9 5a       	subi	r30, 0xA9	; 169
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	80 81       	ld	r24, Z
    5266:	88 2f       	mov	r24, r24
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	82 95       	swap	r24
    526c:	92 95       	swap	r25
    526e:	90 7f       	andi	r25, 0xF0	; 240
    5270:	98 27       	eor	r25, r24
    5272:	80 7f       	andi	r24, 0xF0	; 240
    5274:	98 27       	eor	r25, r24
    5276:	82 2b       	or	r24, r18
    5278:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    527a:	a8 e3       	ldi	r26, 0x38	; 56
    527c:	b0 e0       	ldi	r27, 0x00	; 0
    527e:	e8 e3       	ldi	r30, 0x38	; 56
    5280:	f0 e0       	ldi	r31, 0x00	; 0
    5282:	80 81       	ld	r24, Z
    5284:	82 60       	ori	r24, 0x02	; 2
    5286:	8c 93       	st	X, r24
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	a0 e8       	ldi	r26, 0x80	; 128
    528e:	bf e3       	ldi	r27, 0x3F	; 63
    5290:	8b a3       	std	Y+35, r24	; 0x23
    5292:	9c a3       	std	Y+36, r25	; 0x24
    5294:	ad a3       	std	Y+37, r26	; 0x25
    5296:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5298:	6b a1       	ldd	r22, Y+35	; 0x23
    529a:	7c a1       	ldd	r23, Y+36	; 0x24
    529c:	8d a1       	ldd	r24, Y+37	; 0x25
    529e:	9e a1       	ldd	r25, Y+38	; 0x26
    52a0:	2b ea       	ldi	r18, 0xAB	; 171
    52a2:	3a ea       	ldi	r19, 0xAA	; 170
    52a4:	4a e2       	ldi	r20, 0x2A	; 42
    52a6:	50 e4       	ldi	r21, 0x40	; 64
    52a8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    52ac:	dc 01       	movw	r26, r24
    52ae:	cb 01       	movw	r24, r22
    52b0:	8f 8f       	std	Y+31, r24	; 0x1f
    52b2:	98 a3       	std	Y+32, r25	; 0x20
    52b4:	a9 a3       	std	Y+33, r26	; 0x21
    52b6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    52b8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    52ba:	78 a1       	ldd	r23, Y+32	; 0x20
    52bc:	89 a1       	ldd	r24, Y+33	; 0x21
    52be:	9a a1       	ldd	r25, Y+34	; 0x22
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	40 e8       	ldi	r20, 0x80	; 128
    52c6:	5f e3       	ldi	r21, 0x3F	; 63
    52c8:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    52cc:	88 23       	and	r24, r24
    52ce:	1c f4       	brge	.+6      	; 0x52d6 <LCD_Command+0x4aa>
		__ticks = 1;
    52d0:	81 e0       	ldi	r24, 0x01	; 1
    52d2:	8e 8f       	std	Y+30, r24	; 0x1e
    52d4:	91 c0       	rjmp	.+290    	; 0x53f8 <LCD_Command+0x5cc>
	else if (__tmp > 255)
    52d6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    52d8:	78 a1       	ldd	r23, Y+32	; 0x20
    52da:	89 a1       	ldd	r24, Y+33	; 0x21
    52dc:	9a a1       	ldd	r25, Y+34	; 0x22
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	4f e7       	ldi	r20, 0x7F	; 127
    52e4:	53 e4       	ldi	r21, 0x43	; 67
    52e6:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    52ea:	18 16       	cp	r1, r24
    52ec:	0c f0       	brlt	.+2      	; 0x52f0 <LCD_Command+0x4c4>
    52ee:	7b c0       	rjmp	.+246    	; 0x53e6 <LCD_Command+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    52f0:	6b a1       	ldd	r22, Y+35	; 0x23
    52f2:	7c a1       	ldd	r23, Y+36	; 0x24
    52f4:	8d a1       	ldd	r24, Y+37	; 0x25
    52f6:	9e a1       	ldd	r25, Y+38	; 0x26
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	4a e7       	ldi	r20, 0x7A	; 122
    52fe:	54 e4       	ldi	r21, 0x44	; 68
    5300:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	8a 8f       	std	Y+26, r24	; 0x1a
    530a:	9b 8f       	std	Y+27, r25	; 0x1b
    530c:	ac 8f       	std	Y+28, r26	; 0x1c
    530e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5310:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5312:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5314:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5316:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5318:	20 e0       	ldi	r18, 0x00	; 0
    531a:	30 e0       	ldi	r19, 0x00	; 0
    531c:	4a ef       	ldi	r20, 0xFA	; 250
    531e:	54 e4       	ldi	r21, 0x44	; 68
    5320:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5324:	dc 01       	movw	r26, r24
    5326:	cb 01       	movw	r24, r22
    5328:	8e 8b       	std	Y+22, r24	; 0x16
    532a:	9f 8b       	std	Y+23, r25	; 0x17
    532c:	a8 8f       	std	Y+24, r26	; 0x18
    532e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    5330:	6e 89       	ldd	r22, Y+22	; 0x16
    5332:	7f 89       	ldd	r23, Y+23	; 0x17
    5334:	88 8d       	ldd	r24, Y+24	; 0x18
    5336:	99 8d       	ldd	r25, Y+25	; 0x19
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	40 e8       	ldi	r20, 0x80	; 128
    533e:	5f e3       	ldi	r21, 0x3F	; 63
    5340:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5344:	88 23       	and	r24, r24
    5346:	2c f4       	brge	.+10     	; 0x5352 <LCD_Command+0x526>
		__ticks = 1;
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	9d 8b       	std	Y+21, r25	; 0x15
    534e:	8c 8b       	std	Y+20, r24	; 0x14
    5350:	3f c0       	rjmp	.+126    	; 0x53d0 <LCD_Command+0x5a4>
	else if (__tmp > 65535)
    5352:	6e 89       	ldd	r22, Y+22	; 0x16
    5354:	7f 89       	ldd	r23, Y+23	; 0x17
    5356:	88 8d       	ldd	r24, Y+24	; 0x18
    5358:	99 8d       	ldd	r25, Y+25	; 0x19
    535a:	20 e0       	ldi	r18, 0x00	; 0
    535c:	3f ef       	ldi	r19, 0xFF	; 255
    535e:	4f e7       	ldi	r20, 0x7F	; 127
    5360:	57 e4       	ldi	r21, 0x47	; 71
    5362:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5366:	18 16       	cp	r1, r24
    5368:	4c f5       	brge	.+82     	; 0x53bc <LCD_Command+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    536a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    536c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    536e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5370:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5372:	20 e0       	ldi	r18, 0x00	; 0
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	40 e2       	ldi	r20, 0x20	; 32
    5378:	51 e4       	ldi	r21, 0x41	; 65
    537a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	bc 01       	movw	r22, r24
    5384:	cd 01       	movw	r24, r26
    5386:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    538a:	dc 01       	movw	r26, r24
    538c:	cb 01       	movw	r24, r22
    538e:	9d 8b       	std	Y+21, r25	; 0x15
    5390:	8c 8b       	std	Y+20, r24	; 0x14
    5392:	0f c0       	rjmp	.+30     	; 0x53b2 <LCD_Command+0x586>
    5394:	88 ec       	ldi	r24, 0xC8	; 200
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	9b 8b       	std	Y+19, r25	; 0x13
    539a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    539c:	8a 89       	ldd	r24, Y+18	; 0x12
    539e:	9b 89       	ldd	r25, Y+19	; 0x13
    53a0:	01 97       	sbiw	r24, 0x01	; 1
    53a2:	f1 f7       	brne	.-4      	; 0x53a0 <LCD_Command+0x574>
    53a4:	9b 8b       	std	Y+19, r25	; 0x13
    53a6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53a8:	8c 89       	ldd	r24, Y+20	; 0x14
    53aa:	9d 89       	ldd	r25, Y+21	; 0x15
    53ac:	01 97       	sbiw	r24, 0x01	; 1
    53ae:	9d 8b       	std	Y+21, r25	; 0x15
    53b0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53b2:	8c 89       	ldd	r24, Y+20	; 0x14
    53b4:	9d 89       	ldd	r25, Y+21	; 0x15
    53b6:	00 97       	sbiw	r24, 0x00	; 0
    53b8:	69 f7       	brne	.-38     	; 0x5394 <LCD_Command+0x568>
    53ba:	24 c0       	rjmp	.+72     	; 0x5404 <LCD_Command+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53bc:	6e 89       	ldd	r22, Y+22	; 0x16
    53be:	7f 89       	ldd	r23, Y+23	; 0x17
    53c0:	88 8d       	ldd	r24, Y+24	; 0x18
    53c2:	99 8d       	ldd	r25, Y+25	; 0x19
    53c4:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    53c8:	dc 01       	movw	r26, r24
    53ca:	cb 01       	movw	r24, r22
    53cc:	9d 8b       	std	Y+21, r25	; 0x15
    53ce:	8c 8b       	std	Y+20, r24	; 0x14
    53d0:	8c 89       	ldd	r24, Y+20	; 0x14
    53d2:	9d 89       	ldd	r25, Y+21	; 0x15
    53d4:	99 8b       	std	Y+17, r25	; 0x11
    53d6:	88 8b       	std	Y+16, r24	; 0x10
    53d8:	88 89       	ldd	r24, Y+16	; 0x10
    53da:	99 89       	ldd	r25, Y+17	; 0x11
    53dc:	01 97       	sbiw	r24, 0x01	; 1
    53de:	f1 f7       	brne	.-4      	; 0x53dc <LCD_Command+0x5b0>
    53e0:	99 8b       	std	Y+17, r25	; 0x11
    53e2:	88 8b       	std	Y+16, r24	; 0x10
    53e4:	0f c0       	rjmp	.+30     	; 0x5404 <LCD_Command+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    53e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    53e8:	78 a1       	ldd	r23, Y+32	; 0x20
    53ea:	89 a1       	ldd	r24, Y+33	; 0x21
    53ec:	9a a1       	ldd	r25, Y+34	; 0x22
    53ee:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    53f2:	dc 01       	movw	r26, r24
    53f4:	cb 01       	movw	r24, r22
    53f6:	8e 8f       	std	Y+30, r24	; 0x1e
    53f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    53fa:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    53fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    53fe:	8a 95       	dec	r24
    5400:	f1 f7       	brne	.-4      	; 0x53fe <LCD_Command+0x5d2>
    5402:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    5404:	a8 e3       	ldi	r26, 0x38	; 56
    5406:	b0 e0       	ldi	r27, 0x00	; 0
    5408:	e8 e3       	ldi	r30, 0x38	; 56
    540a:	f0 e0       	ldi	r31, 0x00	; 0
    540c:	80 81       	ld	r24, Z
    540e:	8d 7f       	andi	r24, 0xFD	; 253
    5410:	8c 93       	st	X, r24
    5412:	80 e0       	ldi	r24, 0x00	; 0
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	a0 e0       	ldi	r26, 0x00	; 0
    5418:	b0 e4       	ldi	r27, 0x40	; 64
    541a:	8b 87       	std	Y+11, r24	; 0x0b
    541c:	9c 87       	std	Y+12, r25	; 0x0c
    541e:	ad 87       	std	Y+13, r26	; 0x0d
    5420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5422:	6b 85       	ldd	r22, Y+11	; 0x0b
    5424:	7c 85       	ldd	r23, Y+12	; 0x0c
    5426:	8d 85       	ldd	r24, Y+13	; 0x0d
    5428:	9e 85       	ldd	r25, Y+14	; 0x0e
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	4a ef       	ldi	r20, 0xFA	; 250
    5430:	54 e4       	ldi	r21, 0x44	; 68
    5432:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	8f 83       	std	Y+7, r24	; 0x07
    543c:	98 87       	std	Y+8, r25	; 0x08
    543e:	a9 87       	std	Y+9, r26	; 0x09
    5440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5442:	6f 81       	ldd	r22, Y+7	; 0x07
    5444:	78 85       	ldd	r23, Y+8	; 0x08
    5446:	89 85       	ldd	r24, Y+9	; 0x09
    5448:	9a 85       	ldd	r25, Y+10	; 0x0a
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	30 e0       	ldi	r19, 0x00	; 0
    544e:	40 e8       	ldi	r20, 0x80	; 128
    5450:	5f e3       	ldi	r21, 0x3F	; 63
    5452:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5456:	88 23       	and	r24, r24
    5458:	2c f4       	brge	.+10     	; 0x5464 <LCD_Command+0x638>
		__ticks = 1;
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	9e 83       	std	Y+6, r25	; 0x06
    5460:	8d 83       	std	Y+5, r24	; 0x05
    5462:	3f c0       	rjmp	.+126    	; 0x54e2 <LCD_Command+0x6b6>
	else if (__tmp > 65535)
    5464:	6f 81       	ldd	r22, Y+7	; 0x07
    5466:	78 85       	ldd	r23, Y+8	; 0x08
    5468:	89 85       	ldd	r24, Y+9	; 0x09
    546a:	9a 85       	ldd	r25, Y+10	; 0x0a
    546c:	20 e0       	ldi	r18, 0x00	; 0
    546e:	3f ef       	ldi	r19, 0xFF	; 255
    5470:	4f e7       	ldi	r20, 0x7F	; 127
    5472:	57 e4       	ldi	r21, 0x47	; 71
    5474:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5478:	18 16       	cp	r1, r24
    547a:	4c f5       	brge	.+82     	; 0x54ce <LCD_Command+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    547c:	6b 85       	ldd	r22, Y+11	; 0x0b
    547e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5480:	8d 85       	ldd	r24, Y+13	; 0x0d
    5482:	9e 85       	ldd	r25, Y+14	; 0x0e
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	40 e2       	ldi	r20, 0x20	; 32
    548a:	51 e4       	ldi	r21, 0x41	; 65
    548c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5490:	dc 01       	movw	r26, r24
    5492:	cb 01       	movw	r24, r22
    5494:	bc 01       	movw	r22, r24
    5496:	cd 01       	movw	r24, r26
    5498:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    549c:	dc 01       	movw	r26, r24
    549e:	cb 01       	movw	r24, r22
    54a0:	9e 83       	std	Y+6, r25	; 0x06
    54a2:	8d 83       	std	Y+5, r24	; 0x05
    54a4:	0f c0       	rjmp	.+30     	; 0x54c4 <LCD_Command+0x698>
    54a6:	88 ec       	ldi	r24, 0xC8	; 200
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	9c 83       	std	Y+4, r25	; 0x04
    54ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    54ae:	8b 81       	ldd	r24, Y+3	; 0x03
    54b0:	9c 81       	ldd	r25, Y+4	; 0x04
    54b2:	01 97       	sbiw	r24, 0x01	; 1
    54b4:	f1 f7       	brne	.-4      	; 0x54b2 <LCD_Command+0x686>
    54b6:	9c 83       	std	Y+4, r25	; 0x04
    54b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ba:	8d 81       	ldd	r24, Y+5	; 0x05
    54bc:	9e 81       	ldd	r25, Y+6	; 0x06
    54be:	01 97       	sbiw	r24, 0x01	; 1
    54c0:	9e 83       	std	Y+6, r25	; 0x06
    54c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54c4:	8d 81       	ldd	r24, Y+5	; 0x05
    54c6:	9e 81       	ldd	r25, Y+6	; 0x06
    54c8:	00 97       	sbiw	r24, 0x00	; 0
    54ca:	69 f7       	brne	.-38     	; 0x54a6 <LCD_Command+0x67a>
    54cc:	14 c0       	rjmp	.+40     	; 0x54f6 <LCD_Command+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54ce:	6f 81       	ldd	r22, Y+7	; 0x07
    54d0:	78 85       	ldd	r23, Y+8	; 0x08
    54d2:	89 85       	ldd	r24, Y+9	; 0x09
    54d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d6:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    54da:	dc 01       	movw	r26, r24
    54dc:	cb 01       	movw	r24, r22
    54de:	9e 83       	std	Y+6, r25	; 0x06
    54e0:	8d 83       	std	Y+5, r24	; 0x05
    54e2:	8d 81       	ldd	r24, Y+5	; 0x05
    54e4:	9e 81       	ldd	r25, Y+6	; 0x06
    54e6:	9a 83       	std	Y+2, r25	; 0x02
    54e8:	89 83       	std	Y+1, r24	; 0x01
    54ea:	89 81       	ldd	r24, Y+1	; 0x01
    54ec:	9a 81       	ldd	r25, Y+2	; 0x02
    54ee:	01 97       	sbiw	r24, 0x01	; 1
    54f0:	f1 f7       	brne	.-4      	; 0x54ee <LCD_Command+0x6c2>
    54f2:	9a 83       	std	Y+2, r25	; 0x02
    54f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    54f6:	c9 5a       	subi	r28, 0xA9	; 169
    54f8:	df 4f       	sbci	r29, 0xFF	; 255
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	f8 94       	cli
    54fe:	de bf       	out	0x3e, r29	; 62
    5500:	0f be       	out	0x3f, r0	; 63
    5502:	cd bf       	out	0x3d, r28	; 61
    5504:	cf 91       	pop	r28
    5506:	df 91       	pop	r29
    5508:	1f 91       	pop	r17
    550a:	0f 91       	pop	r16
    550c:	08 95       	ret

0000550e <LCD_Char>:

void LCD_Char( unsigned char data )
{
    550e:	0f 93       	push	r16
    5510:	1f 93       	push	r17
    5512:	df 93       	push	r29
    5514:	cf 93       	push	r28
    5516:	cd b7       	in	r28, 0x3d	; 61
    5518:	de b7       	in	r29, 0x3e	; 62
    551a:	c7 55       	subi	r28, 0x57	; 87
    551c:	d0 40       	sbci	r29, 0x00	; 0
    551e:	0f b6       	in	r0, 0x3f	; 63
    5520:	f8 94       	cli
    5522:	de bf       	out	0x3e, r29	; 62
    5524:	0f be       	out	0x3f, r0	; 63
    5526:	cd bf       	out	0x3d, r28	; 61
    5528:	fe 01       	movw	r30, r28
    552a:	e9 5a       	subi	r30, 0xA9	; 169
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    5530:	a8 e3       	ldi	r26, 0x38	; 56
    5532:	b0 e0       	ldi	r27, 0x00	; 0
    5534:	e8 e3       	ldi	r30, 0x38	; 56
    5536:	f0 e0       	ldi	r31, 0x00	; 0
    5538:	80 81       	ld	r24, Z
    553a:	98 2f       	mov	r25, r24
    553c:	9f 70       	andi	r25, 0x0F	; 15
    553e:	fe 01       	movw	r30, r28
    5540:	e9 5a       	subi	r30, 0xA9	; 169
    5542:	ff 4f       	sbci	r31, 0xFF	; 255
    5544:	80 81       	ld	r24, Z
    5546:	80 7f       	andi	r24, 0xF0	; 240
    5548:	89 2b       	or	r24, r25
    554a:	8c 93       	st	X, r24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    554c:	a8 e3       	ldi	r26, 0x38	; 56
    554e:	b0 e0       	ldi	r27, 0x00	; 0
    5550:	e8 e3       	ldi	r30, 0x38	; 56
    5552:	f0 e0       	ldi	r31, 0x00	; 0
    5554:	80 81       	ld	r24, Z
    5556:	81 60       	ori	r24, 0x01	; 1
    5558:	8c 93       	st	X, r24
	LCD_Port|= (1<<EN);
    555a:	a8 e3       	ldi	r26, 0x38	; 56
    555c:	b0 e0       	ldi	r27, 0x00	; 0
    555e:	e8 e3       	ldi	r30, 0x38	; 56
    5560:	f0 e0       	ldi	r31, 0x00	; 0
    5562:	80 81       	ld	r24, Z
    5564:	82 60       	ori	r24, 0x02	; 2
    5566:	8c 93       	st	X, r24
    5568:	fe 01       	movw	r30, r28
    556a:	ed 5a       	subi	r30, 0xAD	; 173
    556c:	ff 4f       	sbci	r31, 0xFF	; 255
    556e:	80 e0       	ldi	r24, 0x00	; 0
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	a0 e8       	ldi	r26, 0x80	; 128
    5574:	bf e3       	ldi	r27, 0x3F	; 63
    5576:	80 83       	st	Z, r24
    5578:	91 83       	std	Z+1, r25	; 0x01
    557a:	a2 83       	std	Z+2, r26	; 0x02
    557c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    557e:	8e 01       	movw	r16, r28
    5580:	01 5b       	subi	r16, 0xB1	; 177
    5582:	1f 4f       	sbci	r17, 0xFF	; 255
    5584:	fe 01       	movw	r30, r28
    5586:	ed 5a       	subi	r30, 0xAD	; 173
    5588:	ff 4f       	sbci	r31, 0xFF	; 255
    558a:	60 81       	ld	r22, Z
    558c:	71 81       	ldd	r23, Z+1	; 0x01
    558e:	82 81       	ldd	r24, Z+2	; 0x02
    5590:	93 81       	ldd	r25, Z+3	; 0x03
    5592:	2b ea       	ldi	r18, 0xAB	; 171
    5594:	3a ea       	ldi	r19, 0xAA	; 170
    5596:	4a e2       	ldi	r20, 0x2A	; 42
    5598:	50 e4       	ldi	r21, 0x40	; 64
    559a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    559e:	dc 01       	movw	r26, r24
    55a0:	cb 01       	movw	r24, r22
    55a2:	f8 01       	movw	r30, r16
    55a4:	80 83       	st	Z, r24
    55a6:	91 83       	std	Z+1, r25	; 0x01
    55a8:	a2 83       	std	Z+2, r26	; 0x02
    55aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55ac:	fe 01       	movw	r30, r28
    55ae:	e1 5b       	subi	r30, 0xB1	; 177
    55b0:	ff 4f       	sbci	r31, 0xFF	; 255
    55b2:	60 81       	ld	r22, Z
    55b4:	71 81       	ldd	r23, Z+1	; 0x01
    55b6:	82 81       	ldd	r24, Z+2	; 0x02
    55b8:	93 81       	ldd	r25, Z+3	; 0x03
    55ba:	20 e0       	ldi	r18, 0x00	; 0
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	40 e8       	ldi	r20, 0x80	; 128
    55c0:	5f e3       	ldi	r21, 0x3F	; 63
    55c2:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    55c6:	88 23       	and	r24, r24
    55c8:	34 f4       	brge	.+12     	; 0x55d6 <LCD_Char+0xc8>
		__ticks = 1;
    55ca:	fe 01       	movw	r30, r28
    55cc:	e2 5b       	subi	r30, 0xB2	; 178
    55ce:	ff 4f       	sbci	r31, 0xFF	; 255
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	80 83       	st	Z, r24
    55d4:	e0 c0       	rjmp	.+448    	; 0x5796 <LCD_Char+0x288>
	else if (__tmp > 255)
    55d6:	fe 01       	movw	r30, r28
    55d8:	e1 5b       	subi	r30, 0xB1	; 177
    55da:	ff 4f       	sbci	r31, 0xFF	; 255
    55dc:	60 81       	ld	r22, Z
    55de:	71 81       	ldd	r23, Z+1	; 0x01
    55e0:	82 81       	ldd	r24, Z+2	; 0x02
    55e2:	93 81       	ldd	r25, Z+3	; 0x03
    55e4:	20 e0       	ldi	r18, 0x00	; 0
    55e6:	30 e0       	ldi	r19, 0x00	; 0
    55e8:	4f e7       	ldi	r20, 0x7F	; 127
    55ea:	53 e4       	ldi	r21, 0x43	; 67
    55ec:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    55f0:	18 16       	cp	r1, r24
    55f2:	0c f0       	brlt	.+2      	; 0x55f6 <LCD_Char+0xe8>
    55f4:	c0 c0       	rjmp	.+384    	; 0x5776 <LCD_Char+0x268>
	{
		_delay_ms(__us / 1000.0);
    55f6:	fe 01       	movw	r30, r28
    55f8:	ed 5a       	subi	r30, 0xAD	; 173
    55fa:	ff 4f       	sbci	r31, 0xFF	; 255
    55fc:	60 81       	ld	r22, Z
    55fe:	71 81       	ldd	r23, Z+1	; 0x01
    5600:	82 81       	ldd	r24, Z+2	; 0x02
    5602:	93 81       	ldd	r25, Z+3	; 0x03
    5604:	20 e0       	ldi	r18, 0x00	; 0
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	4a e7       	ldi	r20, 0x7A	; 122
    560a:	54 e4       	ldi	r21, 0x44	; 68
    560c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    5610:	dc 01       	movw	r26, r24
    5612:	cb 01       	movw	r24, r22
    5614:	fe 01       	movw	r30, r28
    5616:	e6 5b       	subi	r30, 0xB6	; 182
    5618:	ff 4f       	sbci	r31, 0xFF	; 255
    561a:	80 83       	st	Z, r24
    561c:	91 83       	std	Z+1, r25	; 0x01
    561e:	a2 83       	std	Z+2, r26	; 0x02
    5620:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5622:	8e 01       	movw	r16, r28
    5624:	0a 5b       	subi	r16, 0xBA	; 186
    5626:	1f 4f       	sbci	r17, 0xFF	; 255
    5628:	fe 01       	movw	r30, r28
    562a:	e6 5b       	subi	r30, 0xB6	; 182
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	60 81       	ld	r22, Z
    5630:	71 81       	ldd	r23, Z+1	; 0x01
    5632:	82 81       	ldd	r24, Z+2	; 0x02
    5634:	93 81       	ldd	r25, Z+3	; 0x03
    5636:	20 e0       	ldi	r18, 0x00	; 0
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	4a ef       	ldi	r20, 0xFA	; 250
    563c:	54 e4       	ldi	r21, 0x44	; 68
    563e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5642:	dc 01       	movw	r26, r24
    5644:	cb 01       	movw	r24, r22
    5646:	f8 01       	movw	r30, r16
    5648:	80 83       	st	Z, r24
    564a:	91 83       	std	Z+1, r25	; 0x01
    564c:	a2 83       	std	Z+2, r26	; 0x02
    564e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5650:	fe 01       	movw	r30, r28
    5652:	ea 5b       	subi	r30, 0xBA	; 186
    5654:	ff 4f       	sbci	r31, 0xFF	; 255
    5656:	60 81       	ld	r22, Z
    5658:	71 81       	ldd	r23, Z+1	; 0x01
    565a:	82 81       	ldd	r24, Z+2	; 0x02
    565c:	93 81       	ldd	r25, Z+3	; 0x03
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	40 e8       	ldi	r20, 0x80	; 128
    5664:	5f e3       	ldi	r21, 0x3F	; 63
    5666:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    566a:	88 23       	and	r24, r24
    566c:	44 f4       	brge	.+16     	; 0x567e <LCD_Char+0x170>
		__ticks = 1;
    566e:	fe 01       	movw	r30, r28
    5670:	ec 5b       	subi	r30, 0xBC	; 188
    5672:	ff 4f       	sbci	r31, 0xFF	; 255
    5674:	81 e0       	ldi	r24, 0x01	; 1
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	91 83       	std	Z+1, r25	; 0x01
    567a:	80 83       	st	Z, r24
    567c:	64 c0       	rjmp	.+200    	; 0x5746 <LCD_Char+0x238>
	else if (__tmp > 65535)
    567e:	fe 01       	movw	r30, r28
    5680:	ea 5b       	subi	r30, 0xBA	; 186
    5682:	ff 4f       	sbci	r31, 0xFF	; 255
    5684:	60 81       	ld	r22, Z
    5686:	71 81       	ldd	r23, Z+1	; 0x01
    5688:	82 81       	ldd	r24, Z+2	; 0x02
    568a:	93 81       	ldd	r25, Z+3	; 0x03
    568c:	20 e0       	ldi	r18, 0x00	; 0
    568e:	3f ef       	ldi	r19, 0xFF	; 255
    5690:	4f e7       	ldi	r20, 0x7F	; 127
    5692:	57 e4       	ldi	r21, 0x47	; 71
    5694:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5698:	18 16       	cp	r1, r24
    569a:	0c f0       	brlt	.+2      	; 0x569e <LCD_Char+0x190>
    569c:	43 c0       	rjmp	.+134    	; 0x5724 <LCD_Char+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    569e:	fe 01       	movw	r30, r28
    56a0:	e6 5b       	subi	r30, 0xB6	; 182
    56a2:	ff 4f       	sbci	r31, 0xFF	; 255
    56a4:	60 81       	ld	r22, Z
    56a6:	71 81       	ldd	r23, Z+1	; 0x01
    56a8:	82 81       	ldd	r24, Z+2	; 0x02
    56aa:	93 81       	ldd	r25, Z+3	; 0x03
    56ac:	20 e0       	ldi	r18, 0x00	; 0
    56ae:	30 e0       	ldi	r19, 0x00	; 0
    56b0:	40 e2       	ldi	r20, 0x20	; 32
    56b2:	51 e4       	ldi	r21, 0x41	; 65
    56b4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    56b8:	dc 01       	movw	r26, r24
    56ba:	cb 01       	movw	r24, r22
    56bc:	8e 01       	movw	r16, r28
    56be:	0c 5b       	subi	r16, 0xBC	; 188
    56c0:	1f 4f       	sbci	r17, 0xFF	; 255
    56c2:	bc 01       	movw	r22, r24
    56c4:	cd 01       	movw	r24, r26
    56c6:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    56ca:	dc 01       	movw	r26, r24
    56cc:	cb 01       	movw	r24, r22
    56ce:	f8 01       	movw	r30, r16
    56d0:	91 83       	std	Z+1, r25	; 0x01
    56d2:	80 83       	st	Z, r24
    56d4:	1f c0       	rjmp	.+62     	; 0x5714 <LCD_Char+0x206>
    56d6:	fe 01       	movw	r30, r28
    56d8:	ee 5b       	subi	r30, 0xBE	; 190
    56da:	ff 4f       	sbci	r31, 0xFF	; 255
    56dc:	88 ec       	ldi	r24, 0xC8	; 200
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	91 83       	std	Z+1, r25	; 0x01
    56e2:	80 83       	st	Z, r24
    56e4:	fe 01       	movw	r30, r28
    56e6:	ee 5b       	subi	r30, 0xBE	; 190
    56e8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ea:	80 81       	ld	r24, Z
    56ec:	91 81       	ldd	r25, Z+1	; 0x01
    56ee:	01 97       	sbiw	r24, 0x01	; 1
    56f0:	f1 f7       	brne	.-4      	; 0x56ee <LCD_Char+0x1e0>
    56f2:	fe 01       	movw	r30, r28
    56f4:	ee 5b       	subi	r30, 0xBE	; 190
    56f6:	ff 4f       	sbci	r31, 0xFF	; 255
    56f8:	91 83       	std	Z+1, r25	; 0x01
    56fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56fc:	de 01       	movw	r26, r28
    56fe:	ac 5b       	subi	r26, 0xBC	; 188
    5700:	bf 4f       	sbci	r27, 0xFF	; 255
    5702:	fe 01       	movw	r30, r28
    5704:	ec 5b       	subi	r30, 0xBC	; 188
    5706:	ff 4f       	sbci	r31, 0xFF	; 255
    5708:	80 81       	ld	r24, Z
    570a:	91 81       	ldd	r25, Z+1	; 0x01
    570c:	01 97       	sbiw	r24, 0x01	; 1
    570e:	11 96       	adiw	r26, 0x01	; 1
    5710:	9c 93       	st	X, r25
    5712:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5714:	fe 01       	movw	r30, r28
    5716:	ec 5b       	subi	r30, 0xBC	; 188
    5718:	ff 4f       	sbci	r31, 0xFF	; 255
    571a:	80 81       	ld	r24, Z
    571c:	91 81       	ldd	r25, Z+1	; 0x01
    571e:	00 97       	sbiw	r24, 0x00	; 0
    5720:	d1 f6       	brne	.-76     	; 0x56d6 <LCD_Char+0x1c8>
    5722:	42 c0       	rjmp	.+132    	; 0x57a8 <LCD_Char+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5724:	8e 01       	movw	r16, r28
    5726:	0c 5b       	subi	r16, 0xBC	; 188
    5728:	1f 4f       	sbci	r17, 0xFF	; 255
    572a:	fe 01       	movw	r30, r28
    572c:	ea 5b       	subi	r30, 0xBA	; 186
    572e:	ff 4f       	sbci	r31, 0xFF	; 255
    5730:	60 81       	ld	r22, Z
    5732:	71 81       	ldd	r23, Z+1	; 0x01
    5734:	82 81       	ldd	r24, Z+2	; 0x02
    5736:	93 81       	ldd	r25, Z+3	; 0x03
    5738:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    573c:	dc 01       	movw	r26, r24
    573e:	cb 01       	movw	r24, r22
    5740:	f8 01       	movw	r30, r16
    5742:	91 83       	std	Z+1, r25	; 0x01
    5744:	80 83       	st	Z, r24
    5746:	de 01       	movw	r26, r28
    5748:	a0 5c       	subi	r26, 0xC0	; 192
    574a:	bf 4f       	sbci	r27, 0xFF	; 255
    574c:	fe 01       	movw	r30, r28
    574e:	ec 5b       	subi	r30, 0xBC	; 188
    5750:	ff 4f       	sbci	r31, 0xFF	; 255
    5752:	80 81       	ld	r24, Z
    5754:	91 81       	ldd	r25, Z+1	; 0x01
    5756:	11 96       	adiw	r26, 0x01	; 1
    5758:	9c 93       	st	X, r25
    575a:	8e 93       	st	-X, r24
    575c:	fe 01       	movw	r30, r28
    575e:	e0 5c       	subi	r30, 0xC0	; 192
    5760:	ff 4f       	sbci	r31, 0xFF	; 255
    5762:	80 81       	ld	r24, Z
    5764:	91 81       	ldd	r25, Z+1	; 0x01
    5766:	01 97       	sbiw	r24, 0x01	; 1
    5768:	f1 f7       	brne	.-4      	; 0x5766 <LCD_Char+0x258>
    576a:	fe 01       	movw	r30, r28
    576c:	e0 5c       	subi	r30, 0xC0	; 192
    576e:	ff 4f       	sbci	r31, 0xFF	; 255
    5770:	91 83       	std	Z+1, r25	; 0x01
    5772:	80 83       	st	Z, r24
    5774:	19 c0       	rjmp	.+50     	; 0x57a8 <LCD_Char+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5776:	8e 01       	movw	r16, r28
    5778:	02 5b       	subi	r16, 0xB2	; 178
    577a:	1f 4f       	sbci	r17, 0xFF	; 255
    577c:	fe 01       	movw	r30, r28
    577e:	e1 5b       	subi	r30, 0xB1	; 177
    5780:	ff 4f       	sbci	r31, 0xFF	; 255
    5782:	60 81       	ld	r22, Z
    5784:	71 81       	ldd	r23, Z+1	; 0x01
    5786:	82 81       	ldd	r24, Z+2	; 0x02
    5788:	93 81       	ldd	r25, Z+3	; 0x03
    578a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    578e:	dc 01       	movw	r26, r24
    5790:	cb 01       	movw	r24, r22
    5792:	f8 01       	movw	r30, r16
    5794:	80 83       	st	Z, r24
    5796:	fe 01       	movw	r30, r28
    5798:	e2 5b       	subi	r30, 0xB2	; 178
    579a:	ff 4f       	sbci	r31, 0xFF	; 255
    579c:	80 81       	ld	r24, Z
    579e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    57a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    57a2:	8a 95       	dec	r24
    57a4:	f1 f7       	brne	.-4      	; 0x57a2 <LCD_Char+0x294>
    57a6:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    57a8:	a8 e3       	ldi	r26, 0x38	; 56
    57aa:	b0 e0       	ldi	r27, 0x00	; 0
    57ac:	e8 e3       	ldi	r30, 0x38	; 56
    57ae:	f0 e0       	ldi	r31, 0x00	; 0
    57b0:	80 81       	ld	r24, Z
    57b2:	8d 7f       	andi	r24, 0xFD	; 253
    57b4:	8c 93       	st	X, r24
    57b6:	80 e0       	ldi	r24, 0x00	; 0
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	a8 e4       	ldi	r26, 0x48	; 72
    57bc:	b3 e4       	ldi	r27, 0x43	; 67
    57be:	8b af       	std	Y+59, r24	; 0x3b
    57c0:	9c af       	std	Y+60, r25	; 0x3c
    57c2:	ad af       	std	Y+61, r26	; 0x3d
    57c4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    57c6:	6b ad       	ldd	r22, Y+59	; 0x3b
    57c8:	7c ad       	ldd	r23, Y+60	; 0x3c
    57ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    57cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    57ce:	2b ea       	ldi	r18, 0xAB	; 171
    57d0:	3a ea       	ldi	r19, 0xAA	; 170
    57d2:	4a e2       	ldi	r20, 0x2A	; 42
    57d4:	50 e4       	ldi	r21, 0x40	; 64
    57d6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    57da:	dc 01       	movw	r26, r24
    57dc:	cb 01       	movw	r24, r22
    57de:	8f ab       	std	Y+55, r24	; 0x37
    57e0:	98 af       	std	Y+56, r25	; 0x38
    57e2:	a9 af       	std	Y+57, r26	; 0x39
    57e4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    57e6:	6f a9       	ldd	r22, Y+55	; 0x37
    57e8:	78 ad       	ldd	r23, Y+56	; 0x38
    57ea:	89 ad       	ldd	r24, Y+57	; 0x39
    57ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    57ee:	20 e0       	ldi	r18, 0x00	; 0
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	40 e8       	ldi	r20, 0x80	; 128
    57f4:	5f e3       	ldi	r21, 0x3F	; 63
    57f6:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    57fa:	88 23       	and	r24, r24
    57fc:	1c f4       	brge	.+6      	; 0x5804 <LCD_Char+0x2f6>
		__ticks = 1;
    57fe:	81 e0       	ldi	r24, 0x01	; 1
    5800:	8e ab       	std	Y+54, r24	; 0x36
    5802:	91 c0       	rjmp	.+290    	; 0x5926 <LCD_Char+0x418>
	else if (__tmp > 255)
    5804:	6f a9       	ldd	r22, Y+55	; 0x37
    5806:	78 ad       	ldd	r23, Y+56	; 0x38
    5808:	89 ad       	ldd	r24, Y+57	; 0x39
    580a:	9a ad       	ldd	r25, Y+58	; 0x3a
    580c:	20 e0       	ldi	r18, 0x00	; 0
    580e:	30 e0       	ldi	r19, 0x00	; 0
    5810:	4f e7       	ldi	r20, 0x7F	; 127
    5812:	53 e4       	ldi	r21, 0x43	; 67
    5814:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5818:	18 16       	cp	r1, r24
    581a:	0c f0       	brlt	.+2      	; 0x581e <LCD_Char+0x310>
    581c:	7b c0       	rjmp	.+246    	; 0x5914 <LCD_Char+0x406>
	{
		_delay_ms(__us / 1000.0);
    581e:	6b ad       	ldd	r22, Y+59	; 0x3b
    5820:	7c ad       	ldd	r23, Y+60	; 0x3c
    5822:	8d ad       	ldd	r24, Y+61	; 0x3d
    5824:	9e ad       	ldd	r25, Y+62	; 0x3e
    5826:	20 e0       	ldi	r18, 0x00	; 0
    5828:	30 e0       	ldi	r19, 0x00	; 0
    582a:	4a e7       	ldi	r20, 0x7A	; 122
    582c:	54 e4       	ldi	r21, 0x44	; 68
    582e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    5832:	dc 01       	movw	r26, r24
    5834:	cb 01       	movw	r24, r22
    5836:	8a ab       	std	Y+50, r24	; 0x32
    5838:	9b ab       	std	Y+51, r25	; 0x33
    583a:	ac ab       	std	Y+52, r26	; 0x34
    583c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    583e:	6a a9       	ldd	r22, Y+50	; 0x32
    5840:	7b a9       	ldd	r23, Y+51	; 0x33
    5842:	8c a9       	ldd	r24, Y+52	; 0x34
    5844:	9d a9       	ldd	r25, Y+53	; 0x35
    5846:	20 e0       	ldi	r18, 0x00	; 0
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	4a ef       	ldi	r20, 0xFA	; 250
    584c:	54 e4       	ldi	r21, 0x44	; 68
    584e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5852:	dc 01       	movw	r26, r24
    5854:	cb 01       	movw	r24, r22
    5856:	8e a7       	std	Y+46, r24	; 0x2e
    5858:	9f a7       	std	Y+47, r25	; 0x2f
    585a:	a8 ab       	std	Y+48, r26	; 0x30
    585c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    585e:	6e a5       	ldd	r22, Y+46	; 0x2e
    5860:	7f a5       	ldd	r23, Y+47	; 0x2f
    5862:	88 a9       	ldd	r24, Y+48	; 0x30
    5864:	99 a9       	ldd	r25, Y+49	; 0x31
    5866:	20 e0       	ldi	r18, 0x00	; 0
    5868:	30 e0       	ldi	r19, 0x00	; 0
    586a:	40 e8       	ldi	r20, 0x80	; 128
    586c:	5f e3       	ldi	r21, 0x3F	; 63
    586e:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5872:	88 23       	and	r24, r24
    5874:	2c f4       	brge	.+10     	; 0x5880 <LCD_Char+0x372>
		__ticks = 1;
    5876:	81 e0       	ldi	r24, 0x01	; 1
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	9d a7       	std	Y+45, r25	; 0x2d
    587c:	8c a7       	std	Y+44, r24	; 0x2c
    587e:	3f c0       	rjmp	.+126    	; 0x58fe <LCD_Char+0x3f0>
	else if (__tmp > 65535)
    5880:	6e a5       	ldd	r22, Y+46	; 0x2e
    5882:	7f a5       	ldd	r23, Y+47	; 0x2f
    5884:	88 a9       	ldd	r24, Y+48	; 0x30
    5886:	99 a9       	ldd	r25, Y+49	; 0x31
    5888:	20 e0       	ldi	r18, 0x00	; 0
    588a:	3f ef       	ldi	r19, 0xFF	; 255
    588c:	4f e7       	ldi	r20, 0x7F	; 127
    588e:	57 e4       	ldi	r21, 0x47	; 71
    5890:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5894:	18 16       	cp	r1, r24
    5896:	4c f5       	brge	.+82     	; 0x58ea <LCD_Char+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5898:	6a a9       	ldd	r22, Y+50	; 0x32
    589a:	7b a9       	ldd	r23, Y+51	; 0x33
    589c:	8c a9       	ldd	r24, Y+52	; 0x34
    589e:	9d a9       	ldd	r25, Y+53	; 0x35
    58a0:	20 e0       	ldi	r18, 0x00	; 0
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	40 e2       	ldi	r20, 0x20	; 32
    58a6:	51 e4       	ldi	r21, 0x41	; 65
    58a8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    58ac:	dc 01       	movw	r26, r24
    58ae:	cb 01       	movw	r24, r22
    58b0:	bc 01       	movw	r22, r24
    58b2:	cd 01       	movw	r24, r26
    58b4:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    58b8:	dc 01       	movw	r26, r24
    58ba:	cb 01       	movw	r24, r22
    58bc:	9d a7       	std	Y+45, r25	; 0x2d
    58be:	8c a7       	std	Y+44, r24	; 0x2c
    58c0:	0f c0       	rjmp	.+30     	; 0x58e0 <LCD_Char+0x3d2>
    58c2:	88 ec       	ldi	r24, 0xC8	; 200
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	9b a7       	std	Y+43, r25	; 0x2b
    58c8:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    58ca:	8a a5       	ldd	r24, Y+42	; 0x2a
    58cc:	9b a5       	ldd	r25, Y+43	; 0x2b
    58ce:	01 97       	sbiw	r24, 0x01	; 1
    58d0:	f1 f7       	brne	.-4      	; 0x58ce <LCD_Char+0x3c0>
    58d2:	9b a7       	std	Y+43, r25	; 0x2b
    58d4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    58d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    58da:	01 97       	sbiw	r24, 0x01	; 1
    58dc:	9d a7       	std	Y+45, r25	; 0x2d
    58de:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    58e2:	9d a5       	ldd	r25, Y+45	; 0x2d
    58e4:	00 97       	sbiw	r24, 0x00	; 0
    58e6:	69 f7       	brne	.-38     	; 0x58c2 <LCD_Char+0x3b4>
    58e8:	24 c0       	rjmp	.+72     	; 0x5932 <LCD_Char+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ea:	6e a5       	ldd	r22, Y+46	; 0x2e
    58ec:	7f a5       	ldd	r23, Y+47	; 0x2f
    58ee:	88 a9       	ldd	r24, Y+48	; 0x30
    58f0:	99 a9       	ldd	r25, Y+49	; 0x31
    58f2:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    58f6:	dc 01       	movw	r26, r24
    58f8:	cb 01       	movw	r24, r22
    58fa:	9d a7       	std	Y+45, r25	; 0x2d
    58fc:	8c a7       	std	Y+44, r24	; 0x2c
    58fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    5900:	9d a5       	ldd	r25, Y+45	; 0x2d
    5902:	99 a7       	std	Y+41, r25	; 0x29
    5904:	88 a7       	std	Y+40, r24	; 0x28
    5906:	88 a5       	ldd	r24, Y+40	; 0x28
    5908:	99 a5       	ldd	r25, Y+41	; 0x29
    590a:	01 97       	sbiw	r24, 0x01	; 1
    590c:	f1 f7       	brne	.-4      	; 0x590a <LCD_Char+0x3fc>
    590e:	99 a7       	std	Y+41, r25	; 0x29
    5910:	88 a7       	std	Y+40, r24	; 0x28
    5912:	0f c0       	rjmp	.+30     	; 0x5932 <LCD_Char+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5914:	6f a9       	ldd	r22, Y+55	; 0x37
    5916:	78 ad       	ldd	r23, Y+56	; 0x38
    5918:	89 ad       	ldd	r24, Y+57	; 0x39
    591a:	9a ad       	ldd	r25, Y+58	; 0x3a
    591c:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	8e ab       	std	Y+54, r24	; 0x36
    5926:	8e a9       	ldd	r24, Y+54	; 0x36
    5928:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    592a:	8f a1       	ldd	r24, Y+39	; 0x27
    592c:	8a 95       	dec	r24
    592e:	f1 f7       	brne	.-4      	; 0x592c <LCD_Char+0x41e>
    5930:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    5932:	a8 e3       	ldi	r26, 0x38	; 56
    5934:	b0 e0       	ldi	r27, 0x00	; 0
    5936:	e8 e3       	ldi	r30, 0x38	; 56
    5938:	f0 e0       	ldi	r31, 0x00	; 0
    593a:	80 81       	ld	r24, Z
    593c:	28 2f       	mov	r18, r24
    593e:	2f 70       	andi	r18, 0x0F	; 15
    5940:	fe 01       	movw	r30, r28
    5942:	e9 5a       	subi	r30, 0xA9	; 169
    5944:	ff 4f       	sbci	r31, 0xFF	; 255
    5946:	80 81       	ld	r24, Z
    5948:	88 2f       	mov	r24, r24
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	82 95       	swap	r24
    594e:	92 95       	swap	r25
    5950:	90 7f       	andi	r25, 0xF0	; 240
    5952:	98 27       	eor	r25, r24
    5954:	80 7f       	andi	r24, 0xF0	; 240
    5956:	98 27       	eor	r25, r24
    5958:	82 2b       	or	r24, r18
    595a:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    595c:	a8 e3       	ldi	r26, 0x38	; 56
    595e:	b0 e0       	ldi	r27, 0x00	; 0
    5960:	e8 e3       	ldi	r30, 0x38	; 56
    5962:	f0 e0       	ldi	r31, 0x00	; 0
    5964:	80 81       	ld	r24, Z
    5966:	82 60       	ori	r24, 0x02	; 2
    5968:	8c 93       	st	X, r24
    596a:	80 e0       	ldi	r24, 0x00	; 0
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	a0 e8       	ldi	r26, 0x80	; 128
    5970:	bf e3       	ldi	r27, 0x3F	; 63
    5972:	8b a3       	std	Y+35, r24	; 0x23
    5974:	9c a3       	std	Y+36, r25	; 0x24
    5976:	ad a3       	std	Y+37, r26	; 0x25
    5978:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    597a:	6b a1       	ldd	r22, Y+35	; 0x23
    597c:	7c a1       	ldd	r23, Y+36	; 0x24
    597e:	8d a1       	ldd	r24, Y+37	; 0x25
    5980:	9e a1       	ldd	r25, Y+38	; 0x26
    5982:	2b ea       	ldi	r18, 0xAB	; 171
    5984:	3a ea       	ldi	r19, 0xAA	; 170
    5986:	4a e2       	ldi	r20, 0x2A	; 42
    5988:	50 e4       	ldi	r21, 0x40	; 64
    598a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    598e:	dc 01       	movw	r26, r24
    5990:	cb 01       	movw	r24, r22
    5992:	8f 8f       	std	Y+31, r24	; 0x1f
    5994:	98 a3       	std	Y+32, r25	; 0x20
    5996:	a9 a3       	std	Y+33, r26	; 0x21
    5998:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    599a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    599c:	78 a1       	ldd	r23, Y+32	; 0x20
    599e:	89 a1       	ldd	r24, Y+33	; 0x21
    59a0:	9a a1       	ldd	r25, Y+34	; 0x22
    59a2:	20 e0       	ldi	r18, 0x00	; 0
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	40 e8       	ldi	r20, 0x80	; 128
    59a8:	5f e3       	ldi	r21, 0x3F	; 63
    59aa:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    59ae:	88 23       	and	r24, r24
    59b0:	1c f4       	brge	.+6      	; 0x59b8 <LCD_Char+0x4aa>
		__ticks = 1;
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	8e 8f       	std	Y+30, r24	; 0x1e
    59b6:	91 c0       	rjmp	.+290    	; 0x5ada <LCD_Char+0x5cc>
	else if (__tmp > 255)
    59b8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    59ba:	78 a1       	ldd	r23, Y+32	; 0x20
    59bc:	89 a1       	ldd	r24, Y+33	; 0x21
    59be:	9a a1       	ldd	r25, Y+34	; 0x22
    59c0:	20 e0       	ldi	r18, 0x00	; 0
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	4f e7       	ldi	r20, 0x7F	; 127
    59c6:	53 e4       	ldi	r21, 0x43	; 67
    59c8:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    59cc:	18 16       	cp	r1, r24
    59ce:	0c f0       	brlt	.+2      	; 0x59d2 <LCD_Char+0x4c4>
    59d0:	7b c0       	rjmp	.+246    	; 0x5ac8 <LCD_Char+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    59d2:	6b a1       	ldd	r22, Y+35	; 0x23
    59d4:	7c a1       	ldd	r23, Y+36	; 0x24
    59d6:	8d a1       	ldd	r24, Y+37	; 0x25
    59d8:	9e a1       	ldd	r25, Y+38	; 0x26
    59da:	20 e0       	ldi	r18, 0x00	; 0
    59dc:	30 e0       	ldi	r19, 0x00	; 0
    59de:	4a e7       	ldi	r20, 0x7A	; 122
    59e0:	54 e4       	ldi	r21, 0x44	; 68
    59e2:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    59e6:	dc 01       	movw	r26, r24
    59e8:	cb 01       	movw	r24, r22
    59ea:	8a 8f       	std	Y+26, r24	; 0x1a
    59ec:	9b 8f       	std	Y+27, r25	; 0x1b
    59ee:	ac 8f       	std	Y+28, r26	; 0x1c
    59f0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59f2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    59f4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    59f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    59f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    59fa:	20 e0       	ldi	r18, 0x00	; 0
    59fc:	30 e0       	ldi	r19, 0x00	; 0
    59fe:	4a ef       	ldi	r20, 0xFA	; 250
    5a00:	54 e4       	ldi	r21, 0x44	; 68
    5a02:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5a06:	dc 01       	movw	r26, r24
    5a08:	cb 01       	movw	r24, r22
    5a0a:	8e 8b       	std	Y+22, r24	; 0x16
    5a0c:	9f 8b       	std	Y+23, r25	; 0x17
    5a0e:	a8 8f       	std	Y+24, r26	; 0x18
    5a10:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    5a12:	6e 89       	ldd	r22, Y+22	; 0x16
    5a14:	7f 89       	ldd	r23, Y+23	; 0x17
    5a16:	88 8d       	ldd	r24, Y+24	; 0x18
    5a18:	99 8d       	ldd	r25, Y+25	; 0x19
    5a1a:	20 e0       	ldi	r18, 0x00	; 0
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
    5a1e:	40 e8       	ldi	r20, 0x80	; 128
    5a20:	5f e3       	ldi	r21, 0x3F	; 63
    5a22:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5a26:	88 23       	and	r24, r24
    5a28:	2c f4       	brge	.+10     	; 0x5a34 <LCD_Char+0x526>
		__ticks = 1;
    5a2a:	81 e0       	ldi	r24, 0x01	; 1
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	9d 8b       	std	Y+21, r25	; 0x15
    5a30:	8c 8b       	std	Y+20, r24	; 0x14
    5a32:	3f c0       	rjmp	.+126    	; 0x5ab2 <LCD_Char+0x5a4>
	else if (__tmp > 65535)
    5a34:	6e 89       	ldd	r22, Y+22	; 0x16
    5a36:	7f 89       	ldd	r23, Y+23	; 0x17
    5a38:	88 8d       	ldd	r24, Y+24	; 0x18
    5a3a:	99 8d       	ldd	r25, Y+25	; 0x19
    5a3c:	20 e0       	ldi	r18, 0x00	; 0
    5a3e:	3f ef       	ldi	r19, 0xFF	; 255
    5a40:	4f e7       	ldi	r20, 0x7F	; 127
    5a42:	57 e4       	ldi	r21, 0x47	; 71
    5a44:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5a48:	18 16       	cp	r1, r24
    5a4a:	4c f5       	brge	.+82     	; 0x5a9e <LCD_Char+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a4c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5a4e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5a50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5a52:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5a54:	20 e0       	ldi	r18, 0x00	; 0
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	40 e2       	ldi	r20, 0x20	; 32
    5a5a:	51 e4       	ldi	r21, 0x41	; 65
    5a5c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5a60:	dc 01       	movw	r26, r24
    5a62:	cb 01       	movw	r24, r22
    5a64:	bc 01       	movw	r22, r24
    5a66:	cd 01       	movw	r24, r26
    5a68:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5a6c:	dc 01       	movw	r26, r24
    5a6e:	cb 01       	movw	r24, r22
    5a70:	9d 8b       	std	Y+21, r25	; 0x15
    5a72:	8c 8b       	std	Y+20, r24	; 0x14
    5a74:	0f c0       	rjmp	.+30     	; 0x5a94 <LCD_Char+0x586>
    5a76:	88 ec       	ldi	r24, 0xC8	; 200
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	9b 8b       	std	Y+19, r25	; 0x13
    5a7c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5a7e:	8a 89       	ldd	r24, Y+18	; 0x12
    5a80:	9b 89       	ldd	r25, Y+19	; 0x13
    5a82:	01 97       	sbiw	r24, 0x01	; 1
    5a84:	f1 f7       	brne	.-4      	; 0x5a82 <LCD_Char+0x574>
    5a86:	9b 8b       	std	Y+19, r25	; 0x13
    5a88:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a8a:	8c 89       	ldd	r24, Y+20	; 0x14
    5a8c:	9d 89       	ldd	r25, Y+21	; 0x15
    5a8e:	01 97       	sbiw	r24, 0x01	; 1
    5a90:	9d 8b       	std	Y+21, r25	; 0x15
    5a92:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a94:	8c 89       	ldd	r24, Y+20	; 0x14
    5a96:	9d 89       	ldd	r25, Y+21	; 0x15
    5a98:	00 97       	sbiw	r24, 0x00	; 0
    5a9a:	69 f7       	brne	.-38     	; 0x5a76 <LCD_Char+0x568>
    5a9c:	24 c0       	rjmp	.+72     	; 0x5ae6 <LCD_Char+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a9e:	6e 89       	ldd	r22, Y+22	; 0x16
    5aa0:	7f 89       	ldd	r23, Y+23	; 0x17
    5aa2:	88 8d       	ldd	r24, Y+24	; 0x18
    5aa4:	99 8d       	ldd	r25, Y+25	; 0x19
    5aa6:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5aaa:	dc 01       	movw	r26, r24
    5aac:	cb 01       	movw	r24, r22
    5aae:	9d 8b       	std	Y+21, r25	; 0x15
    5ab0:	8c 8b       	std	Y+20, r24	; 0x14
    5ab2:	8c 89       	ldd	r24, Y+20	; 0x14
    5ab4:	9d 89       	ldd	r25, Y+21	; 0x15
    5ab6:	99 8b       	std	Y+17, r25	; 0x11
    5ab8:	88 8b       	std	Y+16, r24	; 0x10
    5aba:	88 89       	ldd	r24, Y+16	; 0x10
    5abc:	99 89       	ldd	r25, Y+17	; 0x11
    5abe:	01 97       	sbiw	r24, 0x01	; 1
    5ac0:	f1 f7       	brne	.-4      	; 0x5abe <LCD_Char+0x5b0>
    5ac2:	99 8b       	std	Y+17, r25	; 0x11
    5ac4:	88 8b       	std	Y+16, r24	; 0x10
    5ac6:	0f c0       	rjmp	.+30     	; 0x5ae6 <LCD_Char+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5ac8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5aca:	78 a1       	ldd	r23, Y+32	; 0x20
    5acc:	89 a1       	ldd	r24, Y+33	; 0x21
    5ace:	9a a1       	ldd	r25, Y+34	; 0x22
    5ad0:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5ad4:	dc 01       	movw	r26, r24
    5ad6:	cb 01       	movw	r24, r22
    5ad8:	8e 8f       	std	Y+30, r24	; 0x1e
    5ada:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5adc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ae0:	8a 95       	dec	r24
    5ae2:	f1 f7       	brne	.-4      	; 0x5ae0 <LCD_Char+0x5d2>
    5ae4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    5ae6:	a8 e3       	ldi	r26, 0x38	; 56
    5ae8:	b0 e0       	ldi	r27, 0x00	; 0
    5aea:	e8 e3       	ldi	r30, 0x38	; 56
    5aec:	f0 e0       	ldi	r31, 0x00	; 0
    5aee:	80 81       	ld	r24, Z
    5af0:	8d 7f       	andi	r24, 0xFD	; 253
    5af2:	8c 93       	st	X, r24
    5af4:	80 e0       	ldi	r24, 0x00	; 0
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	a0 e0       	ldi	r26, 0x00	; 0
    5afa:	b0 e4       	ldi	r27, 0x40	; 64
    5afc:	8b 87       	std	Y+11, r24	; 0x0b
    5afe:	9c 87       	std	Y+12, r25	; 0x0c
    5b00:	ad 87       	std	Y+13, r26	; 0x0d
    5b02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b0c:	20 e0       	ldi	r18, 0x00	; 0
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	4a ef       	ldi	r20, 0xFA	; 250
    5b12:	54 e4       	ldi	r21, 0x44	; 68
    5b14:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5b18:	dc 01       	movw	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	8f 83       	std	Y+7, r24	; 0x07
    5b1e:	98 87       	std	Y+8, r25	; 0x08
    5b20:	a9 87       	std	Y+9, r26	; 0x09
    5b22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b24:	6f 81       	ldd	r22, Y+7	; 0x07
    5b26:	78 85       	ldd	r23, Y+8	; 0x08
    5b28:	89 85       	ldd	r24, Y+9	; 0x09
    5b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b2c:	20 e0       	ldi	r18, 0x00	; 0
    5b2e:	30 e0       	ldi	r19, 0x00	; 0
    5b30:	40 e8       	ldi	r20, 0x80	; 128
    5b32:	5f e3       	ldi	r21, 0x3F	; 63
    5b34:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5b38:	88 23       	and	r24, r24
    5b3a:	2c f4       	brge	.+10     	; 0x5b46 <LCD_Char+0x638>
		__ticks = 1;
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	9e 83       	std	Y+6, r25	; 0x06
    5b42:	8d 83       	std	Y+5, r24	; 0x05
    5b44:	3f c0       	rjmp	.+126    	; 0x5bc4 <LCD_Char+0x6b6>
	else if (__tmp > 65535)
    5b46:	6f 81       	ldd	r22, Y+7	; 0x07
    5b48:	78 85       	ldd	r23, Y+8	; 0x08
    5b4a:	89 85       	ldd	r24, Y+9	; 0x09
    5b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b4e:	20 e0       	ldi	r18, 0x00	; 0
    5b50:	3f ef       	ldi	r19, 0xFF	; 255
    5b52:	4f e7       	ldi	r20, 0x7F	; 127
    5b54:	57 e4       	ldi	r21, 0x47	; 71
    5b56:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5b5a:	18 16       	cp	r1, r24
    5b5c:	4c f5       	brge	.+82     	; 0x5bb0 <LCD_Char+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b66:	20 e0       	ldi	r18, 0x00	; 0
    5b68:	30 e0       	ldi	r19, 0x00	; 0
    5b6a:	40 e2       	ldi	r20, 0x20	; 32
    5b6c:	51 e4       	ldi	r21, 0x41	; 65
    5b6e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5b72:	dc 01       	movw	r26, r24
    5b74:	cb 01       	movw	r24, r22
    5b76:	bc 01       	movw	r22, r24
    5b78:	cd 01       	movw	r24, r26
    5b7a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5b7e:	dc 01       	movw	r26, r24
    5b80:	cb 01       	movw	r24, r22
    5b82:	9e 83       	std	Y+6, r25	; 0x06
    5b84:	8d 83       	std	Y+5, r24	; 0x05
    5b86:	0f c0       	rjmp	.+30     	; 0x5ba6 <LCD_Char+0x698>
    5b88:	88 ec       	ldi	r24, 0xC8	; 200
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
    5b8c:	9c 83       	std	Y+4, r25	; 0x04
    5b8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5b90:	8b 81       	ldd	r24, Y+3	; 0x03
    5b92:	9c 81       	ldd	r25, Y+4	; 0x04
    5b94:	01 97       	sbiw	r24, 0x01	; 1
    5b96:	f1 f7       	brne	.-4      	; 0x5b94 <LCD_Char+0x686>
    5b98:	9c 83       	std	Y+4, r25	; 0x04
    5b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba0:	01 97       	sbiw	r24, 0x01	; 1
    5ba2:	9e 83       	std	Y+6, r25	; 0x06
    5ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    5baa:	00 97       	sbiw	r24, 0x00	; 0
    5bac:	69 f7       	brne	.-38     	; 0x5b88 <LCD_Char+0x67a>
    5bae:	14 c0       	rjmp	.+40     	; 0x5bd8 <LCD_Char+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    5bb2:	78 85       	ldd	r23, Y+8	; 0x08
    5bb4:	89 85       	ldd	r24, Y+9	; 0x09
    5bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bb8:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5bbc:	dc 01       	movw	r26, r24
    5bbe:	cb 01       	movw	r24, r22
    5bc0:	9e 83       	std	Y+6, r25	; 0x06
    5bc2:	8d 83       	std	Y+5, r24	; 0x05
    5bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    5bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    5bc8:	9a 83       	std	Y+2, r25	; 0x02
    5bca:	89 83       	std	Y+1, r24	; 0x01
    5bcc:	89 81       	ldd	r24, Y+1	; 0x01
    5bce:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd0:	01 97       	sbiw	r24, 0x01	; 1
    5bd2:	f1 f7       	brne	.-4      	; 0x5bd0 <LCD_Char+0x6c2>
    5bd4:	9a 83       	std	Y+2, r25	; 0x02
    5bd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    5bd8:	c9 5a       	subi	r28, 0xA9	; 169
    5bda:	df 4f       	sbci	r29, 0xFF	; 255
    5bdc:	0f b6       	in	r0, 0x3f	; 63
    5bde:	f8 94       	cli
    5be0:	de bf       	out	0x3e, r29	; 62
    5be2:	0f be       	out	0x3f, r0	; 63
    5be4:	cd bf       	out	0x3d, r28	; 61
    5be6:	cf 91       	pop	r28
    5be8:	df 91       	pop	r29
    5bea:	1f 91       	pop	r17
    5bec:	0f 91       	pop	r16
    5bee:	08 95       	ret

00005bf0 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    5bf0:	df 93       	push	r29
    5bf2:	cf 93       	push	r28
    5bf4:	cd b7       	in	r28, 0x3d	; 61
    5bf6:	de b7       	in	r29, 0x3e	; 62
    5bf8:	6c 97       	sbiw	r28, 0x1c	; 28
    5bfa:	0f b6       	in	r0, 0x3f	; 63
    5bfc:	f8 94       	cli
    5bfe:	de bf       	out	0x3e, r29	; 62
    5c00:	0f be       	out	0x3f, r0	; 63
    5c02:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    5c04:	e7 e3       	ldi	r30, 0x37	; 55
    5c06:	f0 e0       	ldi	r31, 0x00	; 0
    5c08:	8f ef       	ldi	r24, 0xFF	; 255
    5c0a:	80 83       	st	Z, r24
    5c0c:	80 e0       	ldi	r24, 0x00	; 0
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	a0 ea       	ldi	r26, 0xA0	; 160
    5c12:	b1 e4       	ldi	r27, 0x41	; 65
    5c14:	89 8f       	std	Y+25, r24	; 0x19
    5c16:	9a 8f       	std	Y+26, r25	; 0x1a
    5c18:	ab 8f       	std	Y+27, r26	; 0x1b
    5c1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    5c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c24:	20 e0       	ldi	r18, 0x00	; 0
    5c26:	30 e0       	ldi	r19, 0x00	; 0
    5c28:	4a ef       	ldi	r20, 0xFA	; 250
    5c2a:	54 e4       	ldi	r21, 0x44	; 68
    5c2c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5c30:	dc 01       	movw	r26, r24
    5c32:	cb 01       	movw	r24, r22
    5c34:	8d 8b       	std	Y+21, r24	; 0x15
    5c36:	9e 8b       	std	Y+22, r25	; 0x16
    5c38:	af 8b       	std	Y+23, r26	; 0x17
    5c3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    5c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    5c40:	8f 89       	ldd	r24, Y+23	; 0x17
    5c42:	98 8d       	ldd	r25, Y+24	; 0x18
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	40 e8       	ldi	r20, 0x80	; 128
    5c4a:	5f e3       	ldi	r21, 0x3F	; 63
    5c4c:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5c50:	88 23       	and	r24, r24
    5c52:	2c f4       	brge	.+10     	; 0x5c5e <LCD_Init+0x6e>
		__ticks = 1;
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	9c 8b       	std	Y+20, r25	; 0x14
    5c5a:	8b 8b       	std	Y+19, r24	; 0x13
    5c5c:	3f c0       	rjmp	.+126    	; 0x5cdc <LCD_Init+0xec>
	else if (__tmp > 65535)
    5c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    5c60:	7e 89       	ldd	r23, Y+22	; 0x16
    5c62:	8f 89       	ldd	r24, Y+23	; 0x17
    5c64:	98 8d       	ldd	r25, Y+24	; 0x18
    5c66:	20 e0       	ldi	r18, 0x00	; 0
    5c68:	3f ef       	ldi	r19, 0xFF	; 255
    5c6a:	4f e7       	ldi	r20, 0x7F	; 127
    5c6c:	57 e4       	ldi	r21, 0x47	; 71
    5c6e:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5c72:	18 16       	cp	r1, r24
    5c74:	4c f5       	brge	.+82     	; 0x5cc8 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c76:	69 8d       	ldd	r22, Y+25	; 0x19
    5c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c7e:	20 e0       	ldi	r18, 0x00	; 0
    5c80:	30 e0       	ldi	r19, 0x00	; 0
    5c82:	40 e2       	ldi	r20, 0x20	; 32
    5c84:	51 e4       	ldi	r21, 0x41	; 65
    5c86:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5c8a:	dc 01       	movw	r26, r24
    5c8c:	cb 01       	movw	r24, r22
    5c8e:	bc 01       	movw	r22, r24
    5c90:	cd 01       	movw	r24, r26
    5c92:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5c96:	dc 01       	movw	r26, r24
    5c98:	cb 01       	movw	r24, r22
    5c9a:	9c 8b       	std	Y+20, r25	; 0x14
    5c9c:	8b 8b       	std	Y+19, r24	; 0x13
    5c9e:	0f c0       	rjmp	.+30     	; 0x5cbe <LCD_Init+0xce>
    5ca0:	88 ec       	ldi	r24, 0xC8	; 200
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	9a 8b       	std	Y+18, r25	; 0x12
    5ca6:	89 8b       	std	Y+17, r24	; 0x11
    5ca8:	89 89       	ldd	r24, Y+17	; 0x11
    5caa:	9a 89       	ldd	r25, Y+18	; 0x12
    5cac:	01 97       	sbiw	r24, 0x01	; 1
    5cae:	f1 f7       	brne	.-4      	; 0x5cac <LCD_Init+0xbc>
    5cb0:	9a 8b       	std	Y+18, r25	; 0x12
    5cb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    5cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    5cb8:	01 97       	sbiw	r24, 0x01	; 1
    5cba:	9c 8b       	std	Y+20, r25	; 0x14
    5cbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    5cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    5cc2:	00 97       	sbiw	r24, 0x00	; 0
    5cc4:	69 f7       	brne	.-38     	; 0x5ca0 <LCD_Init+0xb0>
    5cc6:	14 c0       	rjmp	.+40     	; 0x5cf0 <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    5cca:	7e 89       	ldd	r23, Y+22	; 0x16
    5ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    5cce:	98 8d       	ldd	r25, Y+24	; 0x18
    5cd0:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5cd4:	dc 01       	movw	r26, r24
    5cd6:	cb 01       	movw	r24, r22
    5cd8:	9c 8b       	std	Y+20, r25	; 0x14
    5cda:	8b 8b       	std	Y+19, r24	; 0x13
    5cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    5cde:	9c 89       	ldd	r25, Y+20	; 0x14
    5ce0:	98 8b       	std	Y+16, r25	; 0x10
    5ce2:	8f 87       	std	Y+15, r24	; 0x0f
    5ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ce6:	98 89       	ldd	r25, Y+16	; 0x10
    5ce8:	01 97       	sbiw	r24, 0x01	; 1
    5cea:	f1 f7       	brne	.-4      	; 0x5ce8 <LCD_Init+0xf8>
    5cec:	98 8b       	std	Y+16, r25	; 0x10
    5cee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);			/* LCD Power ON delay always >15ms */

	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    5cf0:	82 e0       	ldi	r24, 0x02	; 2
    5cf2:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    5cf6:	88 e2       	ldi	r24, 0x28	; 40
    5cf8:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    5cfc:	8c e0       	ldi	r24, 0x0C	; 12
    5cfe:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    5d02:	86 e0       	ldi	r24, 0x06	; 6
    5d04:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	a0 e0       	ldi	r26, 0x00	; 0
    5d14:	b0 e4       	ldi	r27, 0x40	; 64
    5d16:	8b 87       	std	Y+11, r24	; 0x0b
    5d18:	9c 87       	std	Y+12, r25	; 0x0c
    5d1a:	ad 87       	std	Y+13, r26	; 0x0d
    5d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d26:	20 e0       	ldi	r18, 0x00	; 0
    5d28:	30 e0       	ldi	r19, 0x00	; 0
    5d2a:	4a ef       	ldi	r20, 0xFA	; 250
    5d2c:	54 e4       	ldi	r21, 0x44	; 68
    5d2e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5d32:	dc 01       	movw	r26, r24
    5d34:	cb 01       	movw	r24, r22
    5d36:	8f 83       	std	Y+7, r24	; 0x07
    5d38:	98 87       	std	Y+8, r25	; 0x08
    5d3a:	a9 87       	std	Y+9, r26	; 0x09
    5d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    5d40:	78 85       	ldd	r23, Y+8	; 0x08
    5d42:	89 85       	ldd	r24, Y+9	; 0x09
    5d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d46:	20 e0       	ldi	r18, 0x00	; 0
    5d48:	30 e0       	ldi	r19, 0x00	; 0
    5d4a:	40 e8       	ldi	r20, 0x80	; 128
    5d4c:	5f e3       	ldi	r21, 0x3F	; 63
    5d4e:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5d52:	88 23       	and	r24, r24
    5d54:	2c f4       	brge	.+10     	; 0x5d60 <LCD_Init+0x170>
		__ticks = 1;
    5d56:	81 e0       	ldi	r24, 0x01	; 1
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	9e 83       	std	Y+6, r25	; 0x06
    5d5c:	8d 83       	std	Y+5, r24	; 0x05
    5d5e:	3f c0       	rjmp	.+126    	; 0x5dde <LCD_Init+0x1ee>
	else if (__tmp > 65535)
    5d60:	6f 81       	ldd	r22, Y+7	; 0x07
    5d62:	78 85       	ldd	r23, Y+8	; 0x08
    5d64:	89 85       	ldd	r24, Y+9	; 0x09
    5d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d68:	20 e0       	ldi	r18, 0x00	; 0
    5d6a:	3f ef       	ldi	r19, 0xFF	; 255
    5d6c:	4f e7       	ldi	r20, 0x7F	; 127
    5d6e:	57 e4       	ldi	r21, 0x47	; 71
    5d70:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5d74:	18 16       	cp	r1, r24
    5d76:	4c f5       	brge	.+82     	; 0x5dca <LCD_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d80:	20 e0       	ldi	r18, 0x00	; 0
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	40 e2       	ldi	r20, 0x20	; 32
    5d86:	51 e4       	ldi	r21, 0x41	; 65
    5d88:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	cb 01       	movw	r24, r22
    5d90:	bc 01       	movw	r22, r24
    5d92:	cd 01       	movw	r24, r26
    5d94:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5d98:	dc 01       	movw	r26, r24
    5d9a:	cb 01       	movw	r24, r22
    5d9c:	9e 83       	std	Y+6, r25	; 0x06
    5d9e:	8d 83       	std	Y+5, r24	; 0x05
    5da0:	0f c0       	rjmp	.+30     	; 0x5dc0 <LCD_Init+0x1d0>
    5da2:	88 ec       	ldi	r24, 0xC8	; 200
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	9c 83       	std	Y+4, r25	; 0x04
    5da8:	8b 83       	std	Y+3, r24	; 0x03
    5daa:	8b 81       	ldd	r24, Y+3	; 0x03
    5dac:	9c 81       	ldd	r25, Y+4	; 0x04
    5dae:	01 97       	sbiw	r24, 0x01	; 1
    5db0:	f1 f7       	brne	.-4      	; 0x5dae <LCD_Init+0x1be>
    5db2:	9c 83       	std	Y+4, r25	; 0x04
    5db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5db6:	8d 81       	ldd	r24, Y+5	; 0x05
    5db8:	9e 81       	ldd	r25, Y+6	; 0x06
    5dba:	01 97       	sbiw	r24, 0x01	; 1
    5dbc:	9e 83       	std	Y+6, r25	; 0x06
    5dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    5dc4:	00 97       	sbiw	r24, 0x00	; 0
    5dc6:	69 f7       	brne	.-38     	; 0x5da2 <LCD_Init+0x1b2>
    5dc8:	14 c0       	rjmp	.+40     	; 0x5df2 <LCD_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dca:	6f 81       	ldd	r22, Y+7	; 0x07
    5dcc:	78 85       	ldd	r23, Y+8	; 0x08
    5dce:	89 85       	ldd	r24, Y+9	; 0x09
    5dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dd2:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5dd6:	dc 01       	movw	r26, r24
    5dd8:	cb 01       	movw	r24, r22
    5dda:	9e 83       	std	Y+6, r25	; 0x06
    5ddc:	8d 83       	std	Y+5, r24	; 0x05
    5dde:	8d 81       	ldd	r24, Y+5	; 0x05
    5de0:	9e 81       	ldd	r25, Y+6	; 0x06
    5de2:	9a 83       	std	Y+2, r25	; 0x02
    5de4:	89 83       	std	Y+1, r24	; 0x01
    5de6:	89 81       	ldd	r24, Y+1	; 0x01
    5de8:	9a 81       	ldd	r25, Y+2	; 0x02
    5dea:	01 97       	sbiw	r24, 0x01	; 1
    5dec:	f1 f7       	brne	.-4      	; 0x5dea <LCD_Init+0x1fa>
    5dee:	9a 83       	std	Y+2, r25	; 0x02
    5df0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    5df2:	6c 96       	adiw	r28, 0x1c	; 28
    5df4:	0f b6       	in	r0, 0x3f	; 63
    5df6:	f8 94       	cli
    5df8:	de bf       	out	0x3e, r29	; 62
    5dfa:	0f be       	out	0x3f, r0	; 63
    5dfc:	cd bf       	out	0x3d, r28	; 61
    5dfe:	cf 91       	pop	r28
    5e00:	df 91       	pop	r29
    5e02:	08 95       	ret

00005e04 <LCD_String>:

void LCD_String (char *str)		/* Send string to LCD function */
{
    5e04:	df 93       	push	r29
    5e06:	cf 93       	push	r28
    5e08:	00 d0       	rcall	.+0      	; 0x5e0a <LCD_String+0x6>
    5e0a:	00 d0       	rcall	.+0      	; 0x5e0c <LCD_String+0x8>
    5e0c:	cd b7       	in	r28, 0x3d	; 61
    5e0e:	de b7       	in	r29, 0x3e	; 62
    5e10:	9c 83       	std	Y+4, r25	; 0x04
    5e12:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    5e14:	1a 82       	std	Y+2, r1	; 0x02
    5e16:	19 82       	std	Y+1, r1	; 0x01
    5e18:	0f c0       	rjmp	.+30     	; 0x5e38 <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    5e1a:	29 81       	ldd	r18, Y+1	; 0x01
    5e1c:	3a 81       	ldd	r19, Y+2	; 0x02
    5e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    5e20:	9c 81       	ldd	r25, Y+4	; 0x04
    5e22:	fc 01       	movw	r30, r24
    5e24:	e2 0f       	add	r30, r18
    5e26:	f3 1f       	adc	r31, r19
    5e28:	80 81       	ld	r24, Z
    5e2a:	0e 94 87 2a 	call	0x550e	; 0x550e <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    5e2e:	89 81       	ldd	r24, Y+1	; 0x01
    5e30:	9a 81       	ldd	r25, Y+2	; 0x02
    5e32:	01 96       	adiw	r24, 0x01	; 1
    5e34:	9a 83       	std	Y+2, r25	; 0x02
    5e36:	89 83       	std	Y+1, r24	; 0x01
    5e38:	29 81       	ldd	r18, Y+1	; 0x01
    5e3a:	3a 81       	ldd	r19, Y+2	; 0x02
    5e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    5e40:	fc 01       	movw	r30, r24
    5e42:	e2 0f       	add	r30, r18
    5e44:	f3 1f       	adc	r31, r19
    5e46:	80 81       	ld	r24, Z
    5e48:	88 23       	and	r24, r24
    5e4a:	39 f7       	brne	.-50     	; 0x5e1a <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    5e4c:	0f 90       	pop	r0
    5e4e:	0f 90       	pop	r0
    5e50:	0f 90       	pop	r0
    5e52:	0f 90       	pop	r0
    5e54:	cf 91       	pop	r28
    5e56:	df 91       	pop	r29
    5e58:	08 95       	ret

00005e5a <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    5e5a:	df 93       	push	r29
    5e5c:	cf 93       	push	r28
    5e5e:	00 d0       	rcall	.+0      	; 0x5e60 <LCD_String_xy+0x6>
    5e60:	00 d0       	rcall	.+0      	; 0x5e62 <LCD_String_xy+0x8>
    5e62:	cd b7       	in	r28, 0x3d	; 61
    5e64:	de b7       	in	r29, 0x3e	; 62
    5e66:	89 83       	std	Y+1, r24	; 0x01
    5e68:	6a 83       	std	Y+2, r22	; 0x02
    5e6a:	5c 83       	std	Y+4, r21	; 0x04
    5e6c:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    5e6e:	89 81       	ldd	r24, Y+1	; 0x01
    5e70:	88 23       	and	r24, r24
    5e72:	49 f4       	brne	.+18     	; 0x5e86 <LCD_String_xy+0x2c>
    5e74:	8a 81       	ldd	r24, Y+2	; 0x02
    5e76:	80 31       	cpi	r24, 0x10	; 16
    5e78:	30 f4       	brcc	.+12     	; 0x5e86 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    5e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e7c:	8f 70       	andi	r24, 0x0F	; 15
    5e7e:	80 68       	ori	r24, 0x80	; 128
    5e80:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
    5e84:	0b c0       	rjmp	.+22     	; 0x5e9c <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    5e86:	89 81       	ldd	r24, Y+1	; 0x01
    5e88:	81 30       	cpi	r24, 0x01	; 1
    5e8a:	41 f4       	brne	.+16     	; 0x5e9c <LCD_String_xy+0x42>
    5e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e8e:	80 31       	cpi	r24, 0x10	; 16
    5e90:	28 f4       	brcc	.+10     	; 0x5e9c <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    5e92:	8a 81       	ldd	r24, Y+2	; 0x02
    5e94:	8f 70       	andi	r24, 0x0F	; 15
    5e96:	80 6c       	ori	r24, 0xC0	; 192
    5e98:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    5e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    5ea0:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <LCD_String>
}
    5ea4:	0f 90       	pop	r0
    5ea6:	0f 90       	pop	r0
    5ea8:	0f 90       	pop	r0
    5eaa:	0f 90       	pop	r0
    5eac:	cf 91       	pop	r28
    5eae:	df 91       	pop	r29
    5eb0:	08 95       	ret

00005eb2 <LCD_Clear>:

void LCD_Clear()
{
    5eb2:	df 93       	push	r29
    5eb4:	cf 93       	push	r28
    5eb6:	cd b7       	in	r28, 0x3d	; 61
    5eb8:	de b7       	in	r29, 0x3e	; 62
    5eba:	2e 97       	sbiw	r28, 0x0e	; 14
    5ebc:	0f b6       	in	r0, 0x3f	; 63
    5ebe:	f8 94       	cli
    5ec0:	de bf       	out	0x3e, r29	; 62
    5ec2:	0f be       	out	0x3f, r0	; 63
    5ec4:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    5ec6:	81 e0       	ldi	r24, 0x01	; 1
    5ec8:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
    5ecc:	80 e0       	ldi	r24, 0x00	; 0
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	a0 e0       	ldi	r26, 0x00	; 0
    5ed2:	b0 e4       	ldi	r27, 0x40	; 64
    5ed4:	8b 87       	std	Y+11, r24	; 0x0b
    5ed6:	9c 87       	std	Y+12, r25	; 0x0c
    5ed8:	ad 87       	std	Y+13, r26	; 0x0d
    5eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ee4:	20 e0       	ldi	r18, 0x00	; 0
    5ee6:	30 e0       	ldi	r19, 0x00	; 0
    5ee8:	4a ef       	ldi	r20, 0xFA	; 250
    5eea:	54 e4       	ldi	r21, 0x44	; 68
    5eec:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	8f 83       	std	Y+7, r24	; 0x07
    5ef6:	98 87       	std	Y+8, r25	; 0x08
    5ef8:	a9 87       	std	Y+9, r26	; 0x09
    5efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5efc:	6f 81       	ldd	r22, Y+7	; 0x07
    5efe:	78 85       	ldd	r23, Y+8	; 0x08
    5f00:	89 85       	ldd	r24, Y+9	; 0x09
    5f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f04:	20 e0       	ldi	r18, 0x00	; 0
    5f06:	30 e0       	ldi	r19, 0x00	; 0
    5f08:	40 e8       	ldi	r20, 0x80	; 128
    5f0a:	5f e3       	ldi	r21, 0x3F	; 63
    5f0c:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    5f10:	88 23       	and	r24, r24
    5f12:	2c f4       	brge	.+10     	; 0x5f1e <LCD_Clear+0x6c>
		__ticks = 1;
    5f14:	81 e0       	ldi	r24, 0x01	; 1
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	9e 83       	std	Y+6, r25	; 0x06
    5f1a:	8d 83       	std	Y+5, r24	; 0x05
    5f1c:	3f c0       	rjmp	.+126    	; 0x5f9c <LCD_Clear+0xea>
	else if (__tmp > 65535)
    5f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    5f20:	78 85       	ldd	r23, Y+8	; 0x08
    5f22:	89 85       	ldd	r24, Y+9	; 0x09
    5f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f26:	20 e0       	ldi	r18, 0x00	; 0
    5f28:	3f ef       	ldi	r19, 0xFF	; 255
    5f2a:	4f e7       	ldi	r20, 0x7F	; 127
    5f2c:	57 e4       	ldi	r21, 0x47	; 71
    5f2e:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    5f32:	18 16       	cp	r1, r24
    5f34:	4c f5       	brge	.+82     	; 0x5f88 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f3e:	20 e0       	ldi	r18, 0x00	; 0
    5f40:	30 e0       	ldi	r19, 0x00	; 0
    5f42:	40 e2       	ldi	r20, 0x20	; 32
    5f44:	51 e4       	ldi	r21, 0x41	; 65
    5f46:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5f4a:	dc 01       	movw	r26, r24
    5f4c:	cb 01       	movw	r24, r22
    5f4e:	bc 01       	movw	r22, r24
    5f50:	cd 01       	movw	r24, r26
    5f52:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5f56:	dc 01       	movw	r26, r24
    5f58:	cb 01       	movw	r24, r22
    5f5a:	9e 83       	std	Y+6, r25	; 0x06
    5f5c:	8d 83       	std	Y+5, r24	; 0x05
    5f5e:	0f c0       	rjmp	.+30     	; 0x5f7e <LCD_Clear+0xcc>
    5f60:	88 ec       	ldi	r24, 0xC8	; 200
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	9c 83       	std	Y+4, r25	; 0x04
    5f66:	8b 83       	std	Y+3, r24	; 0x03
    5f68:	8b 81       	ldd	r24, Y+3	; 0x03
    5f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5f6c:	01 97       	sbiw	r24, 0x01	; 1
    5f6e:	f1 f7       	brne	.-4      	; 0x5f6c <LCD_Clear+0xba>
    5f70:	9c 83       	std	Y+4, r25	; 0x04
    5f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f74:	8d 81       	ldd	r24, Y+5	; 0x05
    5f76:	9e 81       	ldd	r25, Y+6	; 0x06
    5f78:	01 97       	sbiw	r24, 0x01	; 1
    5f7a:	9e 83       	std	Y+6, r25	; 0x06
    5f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f80:	9e 81       	ldd	r25, Y+6	; 0x06
    5f82:	00 97       	sbiw	r24, 0x00	; 0
    5f84:	69 f7       	brne	.-38     	; 0x5f60 <LCD_Clear+0xae>
    5f86:	14 c0       	rjmp	.+40     	; 0x5fb0 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f88:	6f 81       	ldd	r22, Y+7	; 0x07
    5f8a:	78 85       	ldd	r23, Y+8	; 0x08
    5f8c:	89 85       	ldd	r24, Y+9	; 0x09
    5f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f90:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5f94:	dc 01       	movw	r26, r24
    5f96:	cb 01       	movw	r24, r22
    5f98:	9e 83       	std	Y+6, r25	; 0x06
    5f9a:	8d 83       	std	Y+5, r24	; 0x05
    5f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5fa0:	9a 83       	std	Y+2, r25	; 0x02
    5fa2:	89 83       	std	Y+1, r24	; 0x01
    5fa4:	89 81       	ldd	r24, Y+1	; 0x01
    5fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa8:	01 97       	sbiw	r24, 0x01	; 1
    5faa:	f1 f7       	brne	.-4      	; 0x5fa8 <LCD_Clear+0xf6>
    5fac:	9a 83       	std	Y+2, r25	; 0x02
    5fae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    5fb0:	80 e8       	ldi	r24, 0x80	; 128
    5fb2:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
}
    5fb6:	2e 96       	adiw	r28, 0x0e	; 14
    5fb8:	0f b6       	in	r0, 0x3f	; 63
    5fba:	f8 94       	cli
    5fbc:	de bf       	out	0x3e, r29	; 62
    5fbe:	0f be       	out	0x3f, r0	; 63
    5fc0:	cd bf       	out	0x3d, r28	; 61
    5fc2:	cf 91       	pop	r28
    5fc4:	df 91       	pop	r29
    5fc6:	08 95       	ret

00005fc8 <LCD_SendNum>:

void LCD_SendNum(signed long int num)
{
    5fc8:	af 92       	push	r10
    5fca:	bf 92       	push	r11
    5fcc:	cf 92       	push	r12
    5fce:	df 92       	push	r13
    5fd0:	ef 92       	push	r14
    5fd2:	ff 92       	push	r15
    5fd4:	0f 93       	push	r16
    5fd6:	1f 93       	push	r17
    5fd8:	df 93       	push	r29
    5fda:	cf 93       	push	r28
    5fdc:	cd b7       	in	r28, 0x3d	; 61
    5fde:	de b7       	in	r29, 0x3e	; 62
    5fe0:	cc 56       	subi	r28, 0x6C	; 108
    5fe2:	d0 40       	sbci	r29, 0x00	; 0
    5fe4:	0f b6       	in	r0, 0x3f	; 63
    5fe6:	f8 94       	cli
    5fe8:	de bf       	out	0x3e, r29	; 62
    5fea:	0f be       	out	0x3f, r0	; 63
    5fec:	cd bf       	out	0x3d, r28	; 61
    5fee:	6a 8b       	std	Y+18, r22	; 0x12
    5ff0:	7b 8b       	std	Y+19, r23	; 0x13
    5ff2:	8c 8b       	std	Y+20, r24	; 0x14
    5ff4:	9d 8b       	std	Y+21, r25	; 0x15
	unsigned long long temp;
	unsigned long long rev = 0;
    5ff6:	1a 82       	std	Y+2, r1	; 0x02
    5ff8:	1b 82       	std	Y+3, r1	; 0x03
    5ffa:	1c 82       	std	Y+4, r1	; 0x04
    5ffc:	1d 82       	std	Y+5, r1	; 0x05
    5ffe:	1e 82       	std	Y+6, r1	; 0x06
    6000:	1f 82       	std	Y+7, r1	; 0x07
    6002:	18 86       	std	Y+8, r1	; 0x08
    6004:	19 86       	std	Y+9, r1	; 0x09
	unsigned char counter = 0;
    6006:	19 82       	std	Y+1, r1	; 0x01
	if (num == 0)
    6008:	8a 89       	ldd	r24, Y+18	; 0x12
    600a:	9b 89       	ldd	r25, Y+19	; 0x13
    600c:	ac 89       	ldd	r26, Y+20	; 0x14
    600e:	bd 89       	ldd	r27, Y+21	; 0x15
    6010:	00 97       	sbiw	r24, 0x00	; 0
    6012:	a1 05       	cpc	r26, r1
    6014:	b1 05       	cpc	r27, r1
    6016:	21 f4       	brne	.+8      	; 0x6020 <LCD_SendNum+0x58>
	{
		LCD_Char('0');
    6018:	80 e3       	ldi	r24, 0x30	; 48
    601a:	0e 94 87 2a 	call	0x550e	; 0x550e <LCD_Char>
    601e:	e5 c3       	rjmp	.+1994   	; 0x67ea <LCD_SendNum+0x822>
	}
	else
	{
		if (num< 0)
    6020:	8a 89       	ldd	r24, Y+18	; 0x12
    6022:	9b 89       	ldd	r25, Y+19	; 0x13
    6024:	ac 89       	ldd	r26, Y+20	; 0x14
    6026:	bd 89       	ldd	r27, Y+21	; 0x15
    6028:	bb 23       	and	r27, r27
    602a:	0c f0       	brlt	.+2      	; 0x602e <LCD_SendNum+0x66>
    602c:	60 c3       	rjmp	.+1728   	; 0x66ee <LCD_SendNum+0x726>
		{
			LCD_Char('-');
    602e:	8d e2       	ldi	r24, 0x2D	; 45
    6030:	0e 94 87 2a 	call	0x550e	; 0x550e <LCD_Char>
			num = -num;
    6034:	8a 89       	ldd	r24, Y+18	; 0x12
    6036:	9b 89       	ldd	r25, Y+19	; 0x13
    6038:	ac 89       	ldd	r26, Y+20	; 0x14
    603a:	bd 89       	ldd	r27, Y+21	; 0x15
    603c:	b0 95       	com	r27
    603e:	a0 95       	com	r26
    6040:	90 95       	com	r25
    6042:	81 95       	neg	r24
    6044:	9f 4f       	sbci	r25, 0xFF	; 255
    6046:	af 4f       	sbci	r26, 0xFF	; 255
    6048:	bf 4f       	sbci	r27, 0xFF	; 255
    604a:	8a 8b       	std	Y+18, r24	; 0x12
    604c:	9b 8b       	std	Y+19, r25	; 0x13
    604e:	ac 8b       	std	Y+20, r26	; 0x14
    6050:	bd 8b       	std	Y+21, r27	; 0x15
    6052:	4d c3       	rjmp	.+1690   	; 0x66ee <LCD_SendNum+0x726>
		}
		while(num !=0)
		{
			temp = num %10;
    6054:	8a 89       	ldd	r24, Y+18	; 0x12
    6056:	9b 89       	ldd	r25, Y+19	; 0x13
    6058:	ac 89       	ldd	r26, Y+20	; 0x14
    605a:	bd 89       	ldd	r27, Y+21	; 0x15
    605c:	2a e0       	ldi	r18, 0x0A	; 10
    605e:	30 e0       	ldi	r19, 0x00	; 0
    6060:	40 e0       	ldi	r20, 0x00	; 0
    6062:	50 e0       	ldi	r21, 0x00	; 0
    6064:	bc 01       	movw	r22, r24
    6066:	cd 01       	movw	r24, r26
    6068:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__divmodsi4>
    606c:	dc 01       	movw	r26, r24
    606e:	cb 01       	movw	r24, r22
    6070:	8a 87       	std	Y+10, r24	; 0x0a
    6072:	9b 87       	std	Y+11, r25	; 0x0b
    6074:	ac 87       	std	Y+12, r26	; 0x0c
    6076:	bd 87       	std	Y+13, r27	; 0x0d
    6078:	bb 0f       	add	r27, r27
    607a:	88 0b       	sbc	r24, r24
    607c:	98 2f       	mov	r25, r24
    607e:	dc 01       	movw	r26, r24
    6080:	8e 87       	std	Y+14, r24	; 0x0e
    6082:	8f 87       	std	Y+15, r24	; 0x0f
    6084:	88 8b       	std	Y+16, r24	; 0x10
    6086:	89 8b       	std	Y+17, r24	; 0x11
			num = num/10;
    6088:	8a 89       	ldd	r24, Y+18	; 0x12
    608a:	9b 89       	ldd	r25, Y+19	; 0x13
    608c:	ac 89       	ldd	r26, Y+20	; 0x14
    608e:	bd 89       	ldd	r27, Y+21	; 0x15
    6090:	2a e0       	ldi	r18, 0x0A	; 10
    6092:	30 e0       	ldi	r19, 0x00	; 0
    6094:	40 e0       	ldi	r20, 0x00	; 0
    6096:	50 e0       	ldi	r21, 0x00	; 0
    6098:	bc 01       	movw	r22, r24
    609a:	cd 01       	movw	r24, r26
    609c:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__divmodsi4>
    60a0:	da 01       	movw	r26, r20
    60a2:	c9 01       	movw	r24, r18
    60a4:	8a 8b       	std	Y+18, r24	; 0x12
    60a6:	9b 8b       	std	Y+19, r25	; 0x13
    60a8:	ac 8b       	std	Y+20, r26	; 0x14
    60aa:	bd 8b       	std	Y+21, r27	; 0x15
			rev = rev*10 + temp;
    60ac:	2a 81       	ldd	r18, Y+2	; 0x02
    60ae:	3b 81       	ldd	r19, Y+3	; 0x03
    60b0:	4c 81       	ldd	r20, Y+4	; 0x04
    60b2:	5d 81       	ldd	r21, Y+5	; 0x05
    60b4:	6e 81       	ldd	r22, Y+6	; 0x06
    60b6:	7f 81       	ldd	r23, Y+7	; 0x07
    60b8:	88 85       	ldd	r24, Y+8	; 0x08
    60ba:	99 85       	ldd	r25, Y+9	; 0x09
    60bc:	a2 2e       	mov	r10, r18
    60be:	b3 2e       	mov	r11, r19
    60c0:	c4 2e       	mov	r12, r20
    60c2:	d5 2e       	mov	r13, r21
    60c4:	e6 2e       	mov	r14, r22
    60c6:	f7 2e       	mov	r15, r23
    60c8:	08 2f       	mov	r16, r24
    60ca:	19 2f       	mov	r17, r25
    60cc:	2a 2d       	mov	r18, r10
    60ce:	3b 2d       	mov	r19, r11
    60d0:	4c 2d       	mov	r20, r12
    60d2:	5d 2d       	mov	r21, r13
    60d4:	6e 2d       	mov	r22, r14
    60d6:	7f 2d       	mov	r23, r15
    60d8:	80 2f       	mov	r24, r16
    60da:	91 2f       	mov	r25, r17
    60dc:	01 e0       	ldi	r16, 0x01	; 1
    60de:	0e 94 c3 01 	call	0x386	; 0x386 <__ashldi3>
    60e2:	2e 8f       	std	Y+30, r18	; 0x1e
    60e4:	3f 8f       	std	Y+31, r19	; 0x1f
    60e6:	48 a3       	std	Y+32, r20	; 0x20
    60e8:	59 a3       	std	Y+33, r21	; 0x21
    60ea:	6a a3       	std	Y+34, r22	; 0x22
    60ec:	7b a3       	std	Y+35, r23	; 0x23
    60ee:	8c a3       	std	Y+36, r24	; 0x24
    60f0:	9d a3       	std	Y+37, r25	; 0x25
    60f2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    60f4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    60f6:	48 a1       	ldd	r20, Y+32	; 0x20
    60f8:	59 a1       	ldd	r21, Y+33	; 0x21
    60fa:	6a a1       	ldd	r22, Y+34	; 0x22
    60fc:	7b a1       	ldd	r23, Y+35	; 0x23
    60fe:	8c a1       	ldd	r24, Y+36	; 0x24
    6100:	9d a1       	ldd	r25, Y+37	; 0x25
    6102:	02 e0       	ldi	r16, 0x02	; 2
    6104:	0e 94 c3 01 	call	0x386	; 0x386 <__ashldi3>
    6108:	2e a3       	std	Y+38, r18	; 0x26
    610a:	3f a3       	std	Y+39, r19	; 0x27
    610c:	48 a7       	std	Y+40, r20	; 0x28
    610e:	59 a7       	std	Y+41, r21	; 0x29
    6110:	6a a7       	std	Y+42, r22	; 0x2a
    6112:	7b a7       	std	Y+43, r23	; 0x2b
    6114:	8c a7       	std	Y+44, r24	; 0x2c
    6116:	9d a7       	std	Y+45, r25	; 0x2d
    6118:	8e 8d       	ldd	r24, Y+30	; 0x1e
    611a:	9e a1       	ldd	r25, Y+38	; 0x26
    611c:	89 0f       	add	r24, r25
    611e:	8e a7       	std	Y+46, r24	; 0x2e
    6120:	81 e0       	ldi	r24, 0x01	; 1
    6122:	8e ab       	std	Y+54, r24	; 0x36
    6124:	9e a5       	ldd	r25, Y+46	; 0x2e
    6126:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6128:	98 17       	cp	r25, r24
    612a:	08 f0       	brcs	.+2      	; 0x612e <LCD_SendNum+0x166>
    612c:	1e aa       	std	Y+54, r1	; 0x36
    612e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6130:	8f a1       	ldd	r24, Y+39	; 0x27
    6132:	98 0f       	add	r25, r24
    6134:	9f a7       	std	Y+47, r25	; 0x2f
    6136:	91 e0       	ldi	r25, 0x01	; 1
    6138:	9f ab       	std	Y+55, r25	; 0x37
    613a:	8f a5       	ldd	r24, Y+47	; 0x2f
    613c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    613e:	89 17       	cp	r24, r25
    6140:	08 f0       	brcs	.+2      	; 0x6144 <LCD_SendNum+0x17c>
    6142:	1f aa       	std	Y+55, r1	; 0x37
    6144:	8e a9       	ldd	r24, Y+54	; 0x36
    6146:	9f a5       	ldd	r25, Y+47	; 0x2f
    6148:	89 0f       	add	r24, r25
    614a:	88 af       	std	Y+56, r24	; 0x38
    614c:	81 e0       	ldi	r24, 0x01	; 1
    614e:	89 af       	std	Y+57, r24	; 0x39
    6150:	98 ad       	ldd	r25, Y+56	; 0x38
    6152:	8f a5       	ldd	r24, Y+47	; 0x2f
    6154:	98 17       	cp	r25, r24
    6156:	08 f0       	brcs	.+2      	; 0x615a <LCD_SendNum+0x192>
    6158:	19 ae       	std	Y+57, r1	; 0x39
    615a:	9f a9       	ldd	r25, Y+55	; 0x37
    615c:	89 ad       	ldd	r24, Y+57	; 0x39
    615e:	98 2b       	or	r25, r24
    6160:	9f ab       	std	Y+55, r25	; 0x37
    6162:	98 ad       	ldd	r25, Y+56	; 0x38
    6164:	9f a7       	std	Y+47, r25	; 0x2f
    6166:	88 a1       	ldd	r24, Y+32	; 0x20
    6168:	98 a5       	ldd	r25, Y+40	; 0x28
    616a:	89 0f       	add	r24, r25
    616c:	88 ab       	std	Y+48, r24	; 0x30
    616e:	81 e0       	ldi	r24, 0x01	; 1
    6170:	8a af       	std	Y+58, r24	; 0x3a
    6172:	98 a9       	ldd	r25, Y+48	; 0x30
    6174:	88 a1       	ldd	r24, Y+32	; 0x20
    6176:	98 17       	cp	r25, r24
    6178:	08 f0       	brcs	.+2      	; 0x617c <LCD_SendNum+0x1b4>
    617a:	1a ae       	std	Y+58, r1	; 0x3a
    617c:	9f a9       	ldd	r25, Y+55	; 0x37
    617e:	88 a9       	ldd	r24, Y+48	; 0x30
    6180:	98 0f       	add	r25, r24
    6182:	9b af       	std	Y+59, r25	; 0x3b
    6184:	91 e0       	ldi	r25, 0x01	; 1
    6186:	9c af       	std	Y+60, r25	; 0x3c
    6188:	8b ad       	ldd	r24, Y+59	; 0x3b
    618a:	98 a9       	ldd	r25, Y+48	; 0x30
    618c:	89 17       	cp	r24, r25
    618e:	08 f0       	brcs	.+2      	; 0x6192 <LCD_SendNum+0x1ca>
    6190:	1c ae       	std	Y+60, r1	; 0x3c
    6192:	8a ad       	ldd	r24, Y+58	; 0x3a
    6194:	9c ad       	ldd	r25, Y+60	; 0x3c
    6196:	89 2b       	or	r24, r25
    6198:	8a af       	std	Y+58, r24	; 0x3a
    619a:	8b ad       	ldd	r24, Y+59	; 0x3b
    619c:	88 ab       	std	Y+48, r24	; 0x30
    619e:	99 a1       	ldd	r25, Y+33	; 0x21
    61a0:	89 a5       	ldd	r24, Y+41	; 0x29
    61a2:	98 0f       	add	r25, r24
    61a4:	99 ab       	std	Y+49, r25	; 0x31
    61a6:	91 e0       	ldi	r25, 0x01	; 1
    61a8:	9d af       	std	Y+61, r25	; 0x3d
    61aa:	89 a9       	ldd	r24, Y+49	; 0x31
    61ac:	99 a1       	ldd	r25, Y+33	; 0x21
    61ae:	89 17       	cp	r24, r25
    61b0:	08 f0       	brcs	.+2      	; 0x61b4 <LCD_SendNum+0x1ec>
    61b2:	1d ae       	std	Y+61, r1	; 0x3d
    61b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    61b6:	99 a9       	ldd	r25, Y+49	; 0x31
    61b8:	89 0f       	add	r24, r25
    61ba:	8e af       	std	Y+62, r24	; 0x3e
    61bc:	81 e0       	ldi	r24, 0x01	; 1
    61be:	8f af       	std	Y+63, r24	; 0x3f
    61c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    61c2:	89 a9       	ldd	r24, Y+49	; 0x31
    61c4:	98 17       	cp	r25, r24
    61c6:	08 f0       	brcs	.+2      	; 0x61ca <LCD_SendNum+0x202>
    61c8:	1f ae       	std	Y+63, r1	; 0x3f
    61ca:	9d ad       	ldd	r25, Y+61	; 0x3d
    61cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    61ce:	98 2b       	or	r25, r24
    61d0:	9d af       	std	Y+61, r25	; 0x3d
    61d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    61d4:	99 ab       	std	Y+49, r25	; 0x31
    61d6:	8a a1       	ldd	r24, Y+34	; 0x22
    61d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    61da:	89 0f       	add	r24, r25
    61dc:	8a ab       	std	Y+50, r24	; 0x32
    61de:	81 e0       	ldi	r24, 0x01	; 1
    61e0:	21 96       	adiw	r28, 0x01	; 1
    61e2:	8f af       	std	Y+63, r24	; 0x3f
    61e4:	21 97       	sbiw	r28, 0x01	; 1
    61e6:	9a a9       	ldd	r25, Y+50	; 0x32
    61e8:	8a a1       	ldd	r24, Y+34	; 0x22
    61ea:	98 17       	cp	r25, r24
    61ec:	18 f0       	brcs	.+6      	; 0x61f4 <LCD_SendNum+0x22c>
    61ee:	21 96       	adiw	r28, 0x01	; 1
    61f0:	1f ae       	std	Y+63, r1	; 0x3f
    61f2:	21 97       	sbiw	r28, 0x01	; 1
    61f4:	9d ad       	ldd	r25, Y+61	; 0x3d
    61f6:	8a a9       	ldd	r24, Y+50	; 0x32
    61f8:	98 0f       	add	r25, r24
    61fa:	22 96       	adiw	r28, 0x02	; 2
    61fc:	9f af       	std	Y+63, r25	; 0x3f
    61fe:	22 97       	sbiw	r28, 0x02	; 2
    6200:	91 e0       	ldi	r25, 0x01	; 1
    6202:	23 96       	adiw	r28, 0x03	; 3
    6204:	9f af       	std	Y+63, r25	; 0x3f
    6206:	23 97       	sbiw	r28, 0x03	; 3
    6208:	22 96       	adiw	r28, 0x02	; 2
    620a:	8f ad       	ldd	r24, Y+63	; 0x3f
    620c:	22 97       	sbiw	r28, 0x02	; 2
    620e:	9a a9       	ldd	r25, Y+50	; 0x32
    6210:	89 17       	cp	r24, r25
    6212:	18 f0       	brcs	.+6      	; 0x621a <LCD_SendNum+0x252>
    6214:	23 96       	adiw	r28, 0x03	; 3
    6216:	1f ae       	std	Y+63, r1	; 0x3f
    6218:	23 97       	sbiw	r28, 0x03	; 3
    621a:	21 96       	adiw	r28, 0x01	; 1
    621c:	8f ad       	ldd	r24, Y+63	; 0x3f
    621e:	21 97       	sbiw	r28, 0x01	; 1
    6220:	23 96       	adiw	r28, 0x03	; 3
    6222:	9f ad       	ldd	r25, Y+63	; 0x3f
    6224:	23 97       	sbiw	r28, 0x03	; 3
    6226:	89 2b       	or	r24, r25
    6228:	21 96       	adiw	r28, 0x01	; 1
    622a:	8f af       	std	Y+63, r24	; 0x3f
    622c:	21 97       	sbiw	r28, 0x01	; 1
    622e:	22 96       	adiw	r28, 0x02	; 2
    6230:	8f ad       	ldd	r24, Y+63	; 0x3f
    6232:	22 97       	sbiw	r28, 0x02	; 2
    6234:	8a ab       	std	Y+50, r24	; 0x32
    6236:	9b a1       	ldd	r25, Y+35	; 0x23
    6238:	8b a5       	ldd	r24, Y+43	; 0x2b
    623a:	98 0f       	add	r25, r24
    623c:	9b ab       	std	Y+51, r25	; 0x33
    623e:	91 e0       	ldi	r25, 0x01	; 1
    6240:	24 96       	adiw	r28, 0x04	; 4
    6242:	9f af       	std	Y+63, r25	; 0x3f
    6244:	24 97       	sbiw	r28, 0x04	; 4
    6246:	8b a9       	ldd	r24, Y+51	; 0x33
    6248:	9b a1       	ldd	r25, Y+35	; 0x23
    624a:	89 17       	cp	r24, r25
    624c:	18 f0       	brcs	.+6      	; 0x6254 <LCD_SendNum+0x28c>
    624e:	24 96       	adiw	r28, 0x04	; 4
    6250:	1f ae       	std	Y+63, r1	; 0x3f
    6252:	24 97       	sbiw	r28, 0x04	; 4
    6254:	21 96       	adiw	r28, 0x01	; 1
    6256:	8f ad       	ldd	r24, Y+63	; 0x3f
    6258:	21 97       	sbiw	r28, 0x01	; 1
    625a:	9b a9       	ldd	r25, Y+51	; 0x33
    625c:	89 0f       	add	r24, r25
    625e:	25 96       	adiw	r28, 0x05	; 5
    6260:	8f af       	std	Y+63, r24	; 0x3f
    6262:	25 97       	sbiw	r28, 0x05	; 5
    6264:	81 e0       	ldi	r24, 0x01	; 1
    6266:	26 96       	adiw	r28, 0x06	; 6
    6268:	8f af       	std	Y+63, r24	; 0x3f
    626a:	26 97       	sbiw	r28, 0x06	; 6
    626c:	25 96       	adiw	r28, 0x05	; 5
    626e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6270:	25 97       	sbiw	r28, 0x05	; 5
    6272:	8b a9       	ldd	r24, Y+51	; 0x33
    6274:	98 17       	cp	r25, r24
    6276:	18 f0       	brcs	.+6      	; 0x627e <LCD_SendNum+0x2b6>
    6278:	26 96       	adiw	r28, 0x06	; 6
    627a:	1f ae       	std	Y+63, r1	; 0x3f
    627c:	26 97       	sbiw	r28, 0x06	; 6
    627e:	24 96       	adiw	r28, 0x04	; 4
    6280:	9f ad       	ldd	r25, Y+63	; 0x3f
    6282:	24 97       	sbiw	r28, 0x04	; 4
    6284:	26 96       	adiw	r28, 0x06	; 6
    6286:	8f ad       	ldd	r24, Y+63	; 0x3f
    6288:	26 97       	sbiw	r28, 0x06	; 6
    628a:	98 2b       	or	r25, r24
    628c:	24 96       	adiw	r28, 0x04	; 4
    628e:	9f af       	std	Y+63, r25	; 0x3f
    6290:	24 97       	sbiw	r28, 0x04	; 4
    6292:	25 96       	adiw	r28, 0x05	; 5
    6294:	9f ad       	ldd	r25, Y+63	; 0x3f
    6296:	25 97       	sbiw	r28, 0x05	; 5
    6298:	9b ab       	std	Y+51, r25	; 0x33
    629a:	8c a1       	ldd	r24, Y+36	; 0x24
    629c:	9c a5       	ldd	r25, Y+44	; 0x2c
    629e:	89 0f       	add	r24, r25
    62a0:	8c ab       	std	Y+52, r24	; 0x34
    62a2:	81 e0       	ldi	r24, 0x01	; 1
    62a4:	27 96       	adiw	r28, 0x07	; 7
    62a6:	8f af       	std	Y+63, r24	; 0x3f
    62a8:	27 97       	sbiw	r28, 0x07	; 7
    62aa:	9c a9       	ldd	r25, Y+52	; 0x34
    62ac:	8c a1       	ldd	r24, Y+36	; 0x24
    62ae:	98 17       	cp	r25, r24
    62b0:	18 f0       	brcs	.+6      	; 0x62b8 <LCD_SendNum+0x2f0>
    62b2:	27 96       	adiw	r28, 0x07	; 7
    62b4:	1f ae       	std	Y+63, r1	; 0x3f
    62b6:	27 97       	sbiw	r28, 0x07	; 7
    62b8:	24 96       	adiw	r28, 0x04	; 4
    62ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    62bc:	24 97       	sbiw	r28, 0x04	; 4
    62be:	8c a9       	ldd	r24, Y+52	; 0x34
    62c0:	98 0f       	add	r25, r24
    62c2:	28 96       	adiw	r28, 0x08	; 8
    62c4:	9f af       	std	Y+63, r25	; 0x3f
    62c6:	28 97       	sbiw	r28, 0x08	; 8
    62c8:	91 e0       	ldi	r25, 0x01	; 1
    62ca:	29 96       	adiw	r28, 0x09	; 9
    62cc:	9f af       	std	Y+63, r25	; 0x3f
    62ce:	29 97       	sbiw	r28, 0x09	; 9
    62d0:	28 96       	adiw	r28, 0x08	; 8
    62d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    62d4:	28 97       	sbiw	r28, 0x08	; 8
    62d6:	9c a9       	ldd	r25, Y+52	; 0x34
    62d8:	89 17       	cp	r24, r25
    62da:	18 f0       	brcs	.+6      	; 0x62e2 <LCD_SendNum+0x31a>
    62dc:	29 96       	adiw	r28, 0x09	; 9
    62de:	1f ae       	std	Y+63, r1	; 0x3f
    62e0:	29 97       	sbiw	r28, 0x09	; 9
    62e2:	27 96       	adiw	r28, 0x07	; 7
    62e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    62e6:	27 97       	sbiw	r28, 0x07	; 7
    62e8:	29 96       	adiw	r28, 0x09	; 9
    62ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    62ec:	29 97       	sbiw	r28, 0x09	; 9
    62ee:	89 2b       	or	r24, r25
    62f0:	27 96       	adiw	r28, 0x07	; 7
    62f2:	8f af       	std	Y+63, r24	; 0x3f
    62f4:	27 97       	sbiw	r28, 0x07	; 7
    62f6:	28 96       	adiw	r28, 0x08	; 8
    62f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    62fa:	28 97       	sbiw	r28, 0x08	; 8
    62fc:	8c ab       	std	Y+52, r24	; 0x34
    62fe:	9d a1       	ldd	r25, Y+37	; 0x25
    6300:	8d a5       	ldd	r24, Y+45	; 0x2d
    6302:	98 0f       	add	r25, r24
    6304:	9d ab       	std	Y+53, r25	; 0x35
    6306:	27 96       	adiw	r28, 0x07	; 7
    6308:	8f ad       	ldd	r24, Y+63	; 0x3f
    630a:	27 97       	sbiw	r28, 0x07	; 7
    630c:	9d a9       	ldd	r25, Y+53	; 0x35
    630e:	89 0f       	add	r24, r25
    6310:	8d ab       	std	Y+53, r24	; 0x35
    6312:	8e a5       	ldd	r24, Y+46	; 0x2e
    6314:	8e 8b       	std	Y+22, r24	; 0x16
    6316:	9f a5       	ldd	r25, Y+47	; 0x2f
    6318:	9f 8b       	std	Y+23, r25	; 0x17
    631a:	88 a9       	ldd	r24, Y+48	; 0x30
    631c:	88 8f       	std	Y+24, r24	; 0x18
    631e:	99 a9       	ldd	r25, Y+49	; 0x31
    6320:	99 8f       	std	Y+25, r25	; 0x19
    6322:	8a a9       	ldd	r24, Y+50	; 0x32
    6324:	8a 8f       	std	Y+26, r24	; 0x1a
    6326:	9b a9       	ldd	r25, Y+51	; 0x33
    6328:	9b 8f       	std	Y+27, r25	; 0x1b
    632a:	8c a9       	ldd	r24, Y+52	; 0x34
    632c:	8c 8f       	std	Y+28, r24	; 0x1c
    632e:	9d a9       	ldd	r25, Y+53	; 0x35
    6330:	9d 8f       	std	Y+29, r25	; 0x1d
    6332:	8a 85       	ldd	r24, Y+10	; 0x0a
    6334:	2a 96       	adiw	r28, 0x0a	; 10
    6336:	8f af       	std	Y+63, r24	; 0x3f
    6338:	2a 97       	sbiw	r28, 0x0a	; 10
    633a:	9b 85       	ldd	r25, Y+11	; 0x0b
    633c:	2b 96       	adiw	r28, 0x0b	; 11
    633e:	9f af       	std	Y+63, r25	; 0x3f
    6340:	2b 97       	sbiw	r28, 0x0b	; 11
    6342:	8c 85       	ldd	r24, Y+12	; 0x0c
    6344:	2c 96       	adiw	r28, 0x0c	; 12
    6346:	8f af       	std	Y+63, r24	; 0x3f
    6348:	2c 97       	sbiw	r28, 0x0c	; 12
    634a:	9d 85       	ldd	r25, Y+13	; 0x0d
    634c:	2d 96       	adiw	r28, 0x0d	; 13
    634e:	9f af       	std	Y+63, r25	; 0x3f
    6350:	2d 97       	sbiw	r28, 0x0d	; 13
    6352:	8e 85       	ldd	r24, Y+14	; 0x0e
    6354:	2e 96       	adiw	r28, 0x0e	; 14
    6356:	8f af       	std	Y+63, r24	; 0x3f
    6358:	2e 97       	sbiw	r28, 0x0e	; 14
    635a:	9f 85       	ldd	r25, Y+15	; 0x0f
    635c:	2f 96       	adiw	r28, 0x0f	; 15
    635e:	9f af       	std	Y+63, r25	; 0x3f
    6360:	2f 97       	sbiw	r28, 0x0f	; 15
    6362:	88 89       	ldd	r24, Y+16	; 0x10
    6364:	60 96       	adiw	r28, 0x10	; 16
    6366:	8f af       	std	Y+63, r24	; 0x3f
    6368:	60 97       	sbiw	r28, 0x10	; 16
    636a:	99 89       	ldd	r25, Y+17	; 0x11
    636c:	61 96       	adiw	r28, 0x11	; 17
    636e:	9f af       	std	Y+63, r25	; 0x3f
    6370:	61 97       	sbiw	r28, 0x11	; 17
    6372:	8e 89       	ldd	r24, Y+22	; 0x16
    6374:	2a 96       	adiw	r28, 0x0a	; 10
    6376:	9f ad       	ldd	r25, Y+63	; 0x3f
    6378:	2a 97       	sbiw	r28, 0x0a	; 10
    637a:	89 0f       	add	r24, r25
    637c:	62 96       	adiw	r28, 0x12	; 18
    637e:	8f af       	std	Y+63, r24	; 0x3f
    6380:	62 97       	sbiw	r28, 0x12	; 18
    6382:	81 e0       	ldi	r24, 0x01	; 1
    6384:	6a 96       	adiw	r28, 0x1a	; 26
    6386:	8f af       	std	Y+63, r24	; 0x3f
    6388:	6a 97       	sbiw	r28, 0x1a	; 26
    638a:	62 96       	adiw	r28, 0x12	; 18
    638c:	9f ad       	ldd	r25, Y+63	; 0x3f
    638e:	62 97       	sbiw	r28, 0x12	; 18
    6390:	8e 89       	ldd	r24, Y+22	; 0x16
    6392:	98 17       	cp	r25, r24
    6394:	18 f0       	brcs	.+6      	; 0x639c <LCD_SendNum+0x3d4>
    6396:	6a 96       	adiw	r28, 0x1a	; 26
    6398:	1f ae       	std	Y+63, r1	; 0x3f
    639a:	6a 97       	sbiw	r28, 0x1a	; 26
    639c:	9f 89       	ldd	r25, Y+23	; 0x17
    639e:	2b 96       	adiw	r28, 0x0b	; 11
    63a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    63a2:	2b 97       	sbiw	r28, 0x0b	; 11
    63a4:	98 0f       	add	r25, r24
    63a6:	63 96       	adiw	r28, 0x13	; 19
    63a8:	9f af       	std	Y+63, r25	; 0x3f
    63aa:	63 97       	sbiw	r28, 0x13	; 19
    63ac:	91 e0       	ldi	r25, 0x01	; 1
    63ae:	6b 96       	adiw	r28, 0x1b	; 27
    63b0:	9f af       	std	Y+63, r25	; 0x3f
    63b2:	6b 97       	sbiw	r28, 0x1b	; 27
    63b4:	63 96       	adiw	r28, 0x13	; 19
    63b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    63b8:	63 97       	sbiw	r28, 0x13	; 19
    63ba:	9f 89       	ldd	r25, Y+23	; 0x17
    63bc:	89 17       	cp	r24, r25
    63be:	18 f0       	brcs	.+6      	; 0x63c6 <LCD_SendNum+0x3fe>
    63c0:	6b 96       	adiw	r28, 0x1b	; 27
    63c2:	1f ae       	std	Y+63, r1	; 0x3f
    63c4:	6b 97       	sbiw	r28, 0x1b	; 27
    63c6:	6a 96       	adiw	r28, 0x1a	; 26
    63c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    63ca:	6a 97       	sbiw	r28, 0x1a	; 26
    63cc:	63 96       	adiw	r28, 0x13	; 19
    63ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    63d0:	63 97       	sbiw	r28, 0x13	; 19
    63d2:	89 0f       	add	r24, r25
    63d4:	6c 96       	adiw	r28, 0x1c	; 28
    63d6:	8f af       	std	Y+63, r24	; 0x3f
    63d8:	6c 97       	sbiw	r28, 0x1c	; 28
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	6d 96       	adiw	r28, 0x1d	; 29
    63de:	8f af       	std	Y+63, r24	; 0x3f
    63e0:	6d 97       	sbiw	r28, 0x1d	; 29
    63e2:	6c 96       	adiw	r28, 0x1c	; 28
    63e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    63e6:	6c 97       	sbiw	r28, 0x1c	; 28
    63e8:	63 96       	adiw	r28, 0x13	; 19
    63ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    63ec:	63 97       	sbiw	r28, 0x13	; 19
    63ee:	98 17       	cp	r25, r24
    63f0:	18 f0       	brcs	.+6      	; 0x63f8 <LCD_SendNum+0x430>
    63f2:	6d 96       	adiw	r28, 0x1d	; 29
    63f4:	1f ae       	std	Y+63, r1	; 0x3f
    63f6:	6d 97       	sbiw	r28, 0x1d	; 29
    63f8:	6b 96       	adiw	r28, 0x1b	; 27
    63fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    63fc:	6b 97       	sbiw	r28, 0x1b	; 27
    63fe:	6d 96       	adiw	r28, 0x1d	; 29
    6400:	8f ad       	ldd	r24, Y+63	; 0x3f
    6402:	6d 97       	sbiw	r28, 0x1d	; 29
    6404:	98 2b       	or	r25, r24
    6406:	6b 96       	adiw	r28, 0x1b	; 27
    6408:	9f af       	std	Y+63, r25	; 0x3f
    640a:	6b 97       	sbiw	r28, 0x1b	; 27
    640c:	6c 96       	adiw	r28, 0x1c	; 28
    640e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6410:	6c 97       	sbiw	r28, 0x1c	; 28
    6412:	63 96       	adiw	r28, 0x13	; 19
    6414:	9f af       	std	Y+63, r25	; 0x3f
    6416:	63 97       	sbiw	r28, 0x13	; 19
    6418:	88 8d       	ldd	r24, Y+24	; 0x18
    641a:	2c 96       	adiw	r28, 0x0c	; 12
    641c:	9f ad       	ldd	r25, Y+63	; 0x3f
    641e:	2c 97       	sbiw	r28, 0x0c	; 12
    6420:	89 0f       	add	r24, r25
    6422:	64 96       	adiw	r28, 0x14	; 20
    6424:	8f af       	std	Y+63, r24	; 0x3f
    6426:	64 97       	sbiw	r28, 0x14	; 20
    6428:	81 e0       	ldi	r24, 0x01	; 1
    642a:	6e 96       	adiw	r28, 0x1e	; 30
    642c:	8f af       	std	Y+63, r24	; 0x3f
    642e:	6e 97       	sbiw	r28, 0x1e	; 30
    6430:	64 96       	adiw	r28, 0x14	; 20
    6432:	9f ad       	ldd	r25, Y+63	; 0x3f
    6434:	64 97       	sbiw	r28, 0x14	; 20
    6436:	88 8d       	ldd	r24, Y+24	; 0x18
    6438:	98 17       	cp	r25, r24
    643a:	18 f0       	brcs	.+6      	; 0x6442 <LCD_SendNum+0x47a>
    643c:	6e 96       	adiw	r28, 0x1e	; 30
    643e:	1f ae       	std	Y+63, r1	; 0x3f
    6440:	6e 97       	sbiw	r28, 0x1e	; 30
    6442:	6b 96       	adiw	r28, 0x1b	; 27
    6444:	9f ad       	ldd	r25, Y+63	; 0x3f
    6446:	6b 97       	sbiw	r28, 0x1b	; 27
    6448:	64 96       	adiw	r28, 0x14	; 20
    644a:	8f ad       	ldd	r24, Y+63	; 0x3f
    644c:	64 97       	sbiw	r28, 0x14	; 20
    644e:	98 0f       	add	r25, r24
    6450:	6f 96       	adiw	r28, 0x1f	; 31
    6452:	9f af       	std	Y+63, r25	; 0x3f
    6454:	6f 97       	sbiw	r28, 0x1f	; 31
    6456:	91 e0       	ldi	r25, 0x01	; 1
    6458:	a0 96       	adiw	r28, 0x20	; 32
    645a:	9f af       	std	Y+63, r25	; 0x3f
    645c:	a0 97       	sbiw	r28, 0x20	; 32
    645e:	6f 96       	adiw	r28, 0x1f	; 31
    6460:	8f ad       	ldd	r24, Y+63	; 0x3f
    6462:	6f 97       	sbiw	r28, 0x1f	; 31
    6464:	64 96       	adiw	r28, 0x14	; 20
    6466:	9f ad       	ldd	r25, Y+63	; 0x3f
    6468:	64 97       	sbiw	r28, 0x14	; 20
    646a:	89 17       	cp	r24, r25
    646c:	18 f0       	brcs	.+6      	; 0x6474 <LCD_SendNum+0x4ac>
    646e:	a0 96       	adiw	r28, 0x20	; 32
    6470:	1f ae       	std	Y+63, r1	; 0x3f
    6472:	a0 97       	sbiw	r28, 0x20	; 32
    6474:	6e 96       	adiw	r28, 0x1e	; 30
    6476:	8f ad       	ldd	r24, Y+63	; 0x3f
    6478:	6e 97       	sbiw	r28, 0x1e	; 30
    647a:	a0 96       	adiw	r28, 0x20	; 32
    647c:	9f ad       	ldd	r25, Y+63	; 0x3f
    647e:	a0 97       	sbiw	r28, 0x20	; 32
    6480:	89 2b       	or	r24, r25
    6482:	6e 96       	adiw	r28, 0x1e	; 30
    6484:	8f af       	std	Y+63, r24	; 0x3f
    6486:	6e 97       	sbiw	r28, 0x1e	; 30
    6488:	6f 96       	adiw	r28, 0x1f	; 31
    648a:	8f ad       	ldd	r24, Y+63	; 0x3f
    648c:	6f 97       	sbiw	r28, 0x1f	; 31
    648e:	64 96       	adiw	r28, 0x14	; 20
    6490:	8f af       	std	Y+63, r24	; 0x3f
    6492:	64 97       	sbiw	r28, 0x14	; 20
    6494:	99 8d       	ldd	r25, Y+25	; 0x19
    6496:	2d 96       	adiw	r28, 0x0d	; 13
    6498:	8f ad       	ldd	r24, Y+63	; 0x3f
    649a:	2d 97       	sbiw	r28, 0x0d	; 13
    649c:	98 0f       	add	r25, r24
    649e:	65 96       	adiw	r28, 0x15	; 21
    64a0:	9f af       	std	Y+63, r25	; 0x3f
    64a2:	65 97       	sbiw	r28, 0x15	; 21
    64a4:	91 e0       	ldi	r25, 0x01	; 1
    64a6:	a1 96       	adiw	r28, 0x21	; 33
    64a8:	9f af       	std	Y+63, r25	; 0x3f
    64aa:	a1 97       	sbiw	r28, 0x21	; 33
    64ac:	65 96       	adiw	r28, 0x15	; 21
    64ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    64b0:	65 97       	sbiw	r28, 0x15	; 21
    64b2:	99 8d       	ldd	r25, Y+25	; 0x19
    64b4:	89 17       	cp	r24, r25
    64b6:	18 f0       	brcs	.+6      	; 0x64be <LCD_SendNum+0x4f6>
    64b8:	a1 96       	adiw	r28, 0x21	; 33
    64ba:	1f ae       	std	Y+63, r1	; 0x3f
    64bc:	a1 97       	sbiw	r28, 0x21	; 33
    64be:	6e 96       	adiw	r28, 0x1e	; 30
    64c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    64c2:	6e 97       	sbiw	r28, 0x1e	; 30
    64c4:	65 96       	adiw	r28, 0x15	; 21
    64c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    64c8:	65 97       	sbiw	r28, 0x15	; 21
    64ca:	89 0f       	add	r24, r25
    64cc:	a2 96       	adiw	r28, 0x22	; 34
    64ce:	8f af       	std	Y+63, r24	; 0x3f
    64d0:	a2 97       	sbiw	r28, 0x22	; 34
    64d2:	81 e0       	ldi	r24, 0x01	; 1
    64d4:	a3 96       	adiw	r28, 0x23	; 35
    64d6:	8f af       	std	Y+63, r24	; 0x3f
    64d8:	a3 97       	sbiw	r28, 0x23	; 35
    64da:	a2 96       	adiw	r28, 0x22	; 34
    64dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    64de:	a2 97       	sbiw	r28, 0x22	; 34
    64e0:	65 96       	adiw	r28, 0x15	; 21
    64e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    64e4:	65 97       	sbiw	r28, 0x15	; 21
    64e6:	98 17       	cp	r25, r24
    64e8:	18 f0       	brcs	.+6      	; 0x64f0 <LCD_SendNum+0x528>
    64ea:	a3 96       	adiw	r28, 0x23	; 35
    64ec:	1f ae       	std	Y+63, r1	; 0x3f
    64ee:	a3 97       	sbiw	r28, 0x23	; 35
    64f0:	a1 96       	adiw	r28, 0x21	; 33
    64f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    64f4:	a1 97       	sbiw	r28, 0x21	; 33
    64f6:	a3 96       	adiw	r28, 0x23	; 35
    64f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    64fa:	a3 97       	sbiw	r28, 0x23	; 35
    64fc:	98 2b       	or	r25, r24
    64fe:	a1 96       	adiw	r28, 0x21	; 33
    6500:	9f af       	std	Y+63, r25	; 0x3f
    6502:	a1 97       	sbiw	r28, 0x21	; 33
    6504:	a2 96       	adiw	r28, 0x22	; 34
    6506:	9f ad       	ldd	r25, Y+63	; 0x3f
    6508:	a2 97       	sbiw	r28, 0x22	; 34
    650a:	65 96       	adiw	r28, 0x15	; 21
    650c:	9f af       	std	Y+63, r25	; 0x3f
    650e:	65 97       	sbiw	r28, 0x15	; 21
    6510:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6512:	2e 96       	adiw	r28, 0x0e	; 14
    6514:	9f ad       	ldd	r25, Y+63	; 0x3f
    6516:	2e 97       	sbiw	r28, 0x0e	; 14
    6518:	89 0f       	add	r24, r25
    651a:	66 96       	adiw	r28, 0x16	; 22
    651c:	8f af       	std	Y+63, r24	; 0x3f
    651e:	66 97       	sbiw	r28, 0x16	; 22
    6520:	81 e0       	ldi	r24, 0x01	; 1
    6522:	a4 96       	adiw	r28, 0x24	; 36
    6524:	8f af       	std	Y+63, r24	; 0x3f
    6526:	a4 97       	sbiw	r28, 0x24	; 36
    6528:	66 96       	adiw	r28, 0x16	; 22
    652a:	9f ad       	ldd	r25, Y+63	; 0x3f
    652c:	66 97       	sbiw	r28, 0x16	; 22
    652e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6530:	98 17       	cp	r25, r24
    6532:	18 f0       	brcs	.+6      	; 0x653a <LCD_SendNum+0x572>
    6534:	a4 96       	adiw	r28, 0x24	; 36
    6536:	1f ae       	std	Y+63, r1	; 0x3f
    6538:	a4 97       	sbiw	r28, 0x24	; 36
    653a:	a1 96       	adiw	r28, 0x21	; 33
    653c:	9f ad       	ldd	r25, Y+63	; 0x3f
    653e:	a1 97       	sbiw	r28, 0x21	; 33
    6540:	66 96       	adiw	r28, 0x16	; 22
    6542:	8f ad       	ldd	r24, Y+63	; 0x3f
    6544:	66 97       	sbiw	r28, 0x16	; 22
    6546:	98 0f       	add	r25, r24
    6548:	a5 96       	adiw	r28, 0x25	; 37
    654a:	9f af       	std	Y+63, r25	; 0x3f
    654c:	a5 97       	sbiw	r28, 0x25	; 37
    654e:	91 e0       	ldi	r25, 0x01	; 1
    6550:	a6 96       	adiw	r28, 0x26	; 38
    6552:	9f af       	std	Y+63, r25	; 0x3f
    6554:	a6 97       	sbiw	r28, 0x26	; 38
    6556:	a5 96       	adiw	r28, 0x25	; 37
    6558:	8f ad       	ldd	r24, Y+63	; 0x3f
    655a:	a5 97       	sbiw	r28, 0x25	; 37
    655c:	66 96       	adiw	r28, 0x16	; 22
    655e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6560:	66 97       	sbiw	r28, 0x16	; 22
    6562:	89 17       	cp	r24, r25
    6564:	18 f0       	brcs	.+6      	; 0x656c <LCD_SendNum+0x5a4>
    6566:	a6 96       	adiw	r28, 0x26	; 38
    6568:	1f ae       	std	Y+63, r1	; 0x3f
    656a:	a6 97       	sbiw	r28, 0x26	; 38
    656c:	a4 96       	adiw	r28, 0x24	; 36
    656e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6570:	a4 97       	sbiw	r28, 0x24	; 36
    6572:	a6 96       	adiw	r28, 0x26	; 38
    6574:	9f ad       	ldd	r25, Y+63	; 0x3f
    6576:	a6 97       	sbiw	r28, 0x26	; 38
    6578:	89 2b       	or	r24, r25
    657a:	a4 96       	adiw	r28, 0x24	; 36
    657c:	8f af       	std	Y+63, r24	; 0x3f
    657e:	a4 97       	sbiw	r28, 0x24	; 36
    6580:	a5 96       	adiw	r28, 0x25	; 37
    6582:	8f ad       	ldd	r24, Y+63	; 0x3f
    6584:	a5 97       	sbiw	r28, 0x25	; 37
    6586:	66 96       	adiw	r28, 0x16	; 22
    6588:	8f af       	std	Y+63, r24	; 0x3f
    658a:	66 97       	sbiw	r28, 0x16	; 22
    658c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    658e:	2f 96       	adiw	r28, 0x0f	; 15
    6590:	8f ad       	ldd	r24, Y+63	; 0x3f
    6592:	2f 97       	sbiw	r28, 0x0f	; 15
    6594:	98 0f       	add	r25, r24
    6596:	67 96       	adiw	r28, 0x17	; 23
    6598:	9f af       	std	Y+63, r25	; 0x3f
    659a:	67 97       	sbiw	r28, 0x17	; 23
    659c:	91 e0       	ldi	r25, 0x01	; 1
    659e:	a7 96       	adiw	r28, 0x27	; 39
    65a0:	9f af       	std	Y+63, r25	; 0x3f
    65a2:	a7 97       	sbiw	r28, 0x27	; 39
    65a4:	67 96       	adiw	r28, 0x17	; 23
    65a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    65a8:	67 97       	sbiw	r28, 0x17	; 23
    65aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    65ac:	89 17       	cp	r24, r25
    65ae:	18 f0       	brcs	.+6      	; 0x65b6 <LCD_SendNum+0x5ee>
    65b0:	a7 96       	adiw	r28, 0x27	; 39
    65b2:	1f ae       	std	Y+63, r1	; 0x3f
    65b4:	a7 97       	sbiw	r28, 0x27	; 39
    65b6:	a4 96       	adiw	r28, 0x24	; 36
    65b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    65ba:	a4 97       	sbiw	r28, 0x24	; 36
    65bc:	67 96       	adiw	r28, 0x17	; 23
    65be:	9f ad       	ldd	r25, Y+63	; 0x3f
    65c0:	67 97       	sbiw	r28, 0x17	; 23
    65c2:	89 0f       	add	r24, r25
    65c4:	a8 96       	adiw	r28, 0x28	; 40
    65c6:	8f af       	std	Y+63, r24	; 0x3f
    65c8:	a8 97       	sbiw	r28, 0x28	; 40
    65ca:	81 e0       	ldi	r24, 0x01	; 1
    65cc:	a9 96       	adiw	r28, 0x29	; 41
    65ce:	8f af       	std	Y+63, r24	; 0x3f
    65d0:	a9 97       	sbiw	r28, 0x29	; 41
    65d2:	a8 96       	adiw	r28, 0x28	; 40
    65d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    65d6:	a8 97       	sbiw	r28, 0x28	; 40
    65d8:	67 96       	adiw	r28, 0x17	; 23
    65da:	8f ad       	ldd	r24, Y+63	; 0x3f
    65dc:	67 97       	sbiw	r28, 0x17	; 23
    65de:	98 17       	cp	r25, r24
    65e0:	18 f0       	brcs	.+6      	; 0x65e8 <LCD_SendNum+0x620>
    65e2:	a9 96       	adiw	r28, 0x29	; 41
    65e4:	1f ae       	std	Y+63, r1	; 0x3f
    65e6:	a9 97       	sbiw	r28, 0x29	; 41
    65e8:	a7 96       	adiw	r28, 0x27	; 39
    65ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    65ec:	a7 97       	sbiw	r28, 0x27	; 39
    65ee:	a9 96       	adiw	r28, 0x29	; 41
    65f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    65f2:	a9 97       	sbiw	r28, 0x29	; 41
    65f4:	98 2b       	or	r25, r24
    65f6:	a7 96       	adiw	r28, 0x27	; 39
    65f8:	9f af       	std	Y+63, r25	; 0x3f
    65fa:	a7 97       	sbiw	r28, 0x27	; 39
    65fc:	a8 96       	adiw	r28, 0x28	; 40
    65fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    6600:	a8 97       	sbiw	r28, 0x28	; 40
    6602:	67 96       	adiw	r28, 0x17	; 23
    6604:	9f af       	std	Y+63, r25	; 0x3f
    6606:	67 97       	sbiw	r28, 0x17	; 23
    6608:	8c 8d       	ldd	r24, Y+28	; 0x1c
    660a:	60 96       	adiw	r28, 0x10	; 16
    660c:	9f ad       	ldd	r25, Y+63	; 0x3f
    660e:	60 97       	sbiw	r28, 0x10	; 16
    6610:	89 0f       	add	r24, r25
    6612:	68 96       	adiw	r28, 0x18	; 24
    6614:	8f af       	std	Y+63, r24	; 0x3f
    6616:	68 97       	sbiw	r28, 0x18	; 24
    6618:	81 e0       	ldi	r24, 0x01	; 1
    661a:	aa 96       	adiw	r28, 0x2a	; 42
    661c:	8f af       	std	Y+63, r24	; 0x3f
    661e:	aa 97       	sbiw	r28, 0x2a	; 42
    6620:	68 96       	adiw	r28, 0x18	; 24
    6622:	9f ad       	ldd	r25, Y+63	; 0x3f
    6624:	68 97       	sbiw	r28, 0x18	; 24
    6626:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6628:	98 17       	cp	r25, r24
    662a:	18 f0       	brcs	.+6      	; 0x6632 <LCD_SendNum+0x66a>
    662c:	aa 96       	adiw	r28, 0x2a	; 42
    662e:	1f ae       	std	Y+63, r1	; 0x3f
    6630:	aa 97       	sbiw	r28, 0x2a	; 42
    6632:	a7 96       	adiw	r28, 0x27	; 39
    6634:	9f ad       	ldd	r25, Y+63	; 0x3f
    6636:	a7 97       	sbiw	r28, 0x27	; 39
    6638:	68 96       	adiw	r28, 0x18	; 24
    663a:	8f ad       	ldd	r24, Y+63	; 0x3f
    663c:	68 97       	sbiw	r28, 0x18	; 24
    663e:	98 0f       	add	r25, r24
    6640:	ab 96       	adiw	r28, 0x2b	; 43
    6642:	9f af       	std	Y+63, r25	; 0x3f
    6644:	ab 97       	sbiw	r28, 0x2b	; 43
    6646:	91 e0       	ldi	r25, 0x01	; 1
    6648:	ac 96       	adiw	r28, 0x2c	; 44
    664a:	9f af       	std	Y+63, r25	; 0x3f
    664c:	ac 97       	sbiw	r28, 0x2c	; 44
    664e:	ab 96       	adiw	r28, 0x2b	; 43
    6650:	8f ad       	ldd	r24, Y+63	; 0x3f
    6652:	ab 97       	sbiw	r28, 0x2b	; 43
    6654:	68 96       	adiw	r28, 0x18	; 24
    6656:	9f ad       	ldd	r25, Y+63	; 0x3f
    6658:	68 97       	sbiw	r28, 0x18	; 24
    665a:	89 17       	cp	r24, r25
    665c:	18 f0       	brcs	.+6      	; 0x6664 <LCD_SendNum+0x69c>
    665e:	ac 96       	adiw	r28, 0x2c	; 44
    6660:	1f ae       	std	Y+63, r1	; 0x3f
    6662:	ac 97       	sbiw	r28, 0x2c	; 44
    6664:	aa 96       	adiw	r28, 0x2a	; 42
    6666:	8f ad       	ldd	r24, Y+63	; 0x3f
    6668:	aa 97       	sbiw	r28, 0x2a	; 42
    666a:	ac 96       	adiw	r28, 0x2c	; 44
    666c:	9f ad       	ldd	r25, Y+63	; 0x3f
    666e:	ac 97       	sbiw	r28, 0x2c	; 44
    6670:	89 2b       	or	r24, r25
    6672:	aa 96       	adiw	r28, 0x2a	; 42
    6674:	8f af       	std	Y+63, r24	; 0x3f
    6676:	aa 97       	sbiw	r28, 0x2a	; 42
    6678:	ab 96       	adiw	r28, 0x2b	; 43
    667a:	8f ad       	ldd	r24, Y+63	; 0x3f
    667c:	ab 97       	sbiw	r28, 0x2b	; 43
    667e:	68 96       	adiw	r28, 0x18	; 24
    6680:	8f af       	std	Y+63, r24	; 0x3f
    6682:	68 97       	sbiw	r28, 0x18	; 24
    6684:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6686:	61 96       	adiw	r28, 0x11	; 17
    6688:	8f ad       	ldd	r24, Y+63	; 0x3f
    668a:	61 97       	sbiw	r28, 0x11	; 17
    668c:	98 0f       	add	r25, r24
    668e:	69 96       	adiw	r28, 0x19	; 25
    6690:	9f af       	std	Y+63, r25	; 0x3f
    6692:	69 97       	sbiw	r28, 0x19	; 25
    6694:	aa 96       	adiw	r28, 0x2a	; 42
    6696:	8f ad       	ldd	r24, Y+63	; 0x3f
    6698:	aa 97       	sbiw	r28, 0x2a	; 42
    669a:	69 96       	adiw	r28, 0x19	; 25
    669c:	9f ad       	ldd	r25, Y+63	; 0x3f
    669e:	69 97       	sbiw	r28, 0x19	; 25
    66a0:	89 0f       	add	r24, r25
    66a2:	69 96       	adiw	r28, 0x19	; 25
    66a4:	8f af       	std	Y+63, r24	; 0x3f
    66a6:	69 97       	sbiw	r28, 0x19	; 25
    66a8:	62 96       	adiw	r28, 0x12	; 18
    66aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    66ac:	62 97       	sbiw	r28, 0x12	; 18
    66ae:	8a 83       	std	Y+2, r24	; 0x02
    66b0:	63 96       	adiw	r28, 0x13	; 19
    66b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    66b4:	63 97       	sbiw	r28, 0x13	; 19
    66b6:	9b 83       	std	Y+3, r25	; 0x03
    66b8:	64 96       	adiw	r28, 0x14	; 20
    66ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    66bc:	64 97       	sbiw	r28, 0x14	; 20
    66be:	8c 83       	std	Y+4, r24	; 0x04
    66c0:	65 96       	adiw	r28, 0x15	; 21
    66c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    66c4:	65 97       	sbiw	r28, 0x15	; 21
    66c6:	9d 83       	std	Y+5, r25	; 0x05
    66c8:	66 96       	adiw	r28, 0x16	; 22
    66ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    66cc:	66 97       	sbiw	r28, 0x16	; 22
    66ce:	8e 83       	std	Y+6, r24	; 0x06
    66d0:	67 96       	adiw	r28, 0x17	; 23
    66d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    66d4:	67 97       	sbiw	r28, 0x17	; 23
    66d6:	9f 83       	std	Y+7, r25	; 0x07
    66d8:	68 96       	adiw	r28, 0x18	; 24
    66da:	8f ad       	ldd	r24, Y+63	; 0x3f
    66dc:	68 97       	sbiw	r28, 0x18	; 24
    66de:	88 87       	std	Y+8, r24	; 0x08
    66e0:	69 96       	adiw	r28, 0x19	; 25
    66e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    66e4:	69 97       	sbiw	r28, 0x19	; 25
    66e6:	99 87       	std	Y+9, r25	; 0x09
			counter++;
    66e8:	89 81       	ldd	r24, Y+1	; 0x01
    66ea:	8f 5f       	subi	r24, 0xFF	; 255
    66ec:	89 83       	std	Y+1, r24	; 0x01
		if (num< 0)
		{
			LCD_Char('-');
			num = -num;
		}
		while(num !=0)
    66ee:	8a 89       	ldd	r24, Y+18	; 0x12
    66f0:	9b 89       	ldd	r25, Y+19	; 0x13
    66f2:	ac 89       	ldd	r26, Y+20	; 0x14
    66f4:	bd 89       	ldd	r27, Y+21	; 0x15
    66f6:	00 97       	sbiw	r24, 0x00	; 0
    66f8:	a1 05       	cpc	r26, r1
    66fa:	b1 05       	cpc	r27, r1
    66fc:	09 f0       	breq	.+2      	; 0x6700 <LCD_SendNum+0x738>
    66fe:	aa cc       	rjmp	.-1708   	; 0x6054 <LCD_SendNum+0x8c>
    6700:	5e c0       	rjmp	.+188    	; 0x67be <LCD_SendNum+0x7f6>
			counter++;
		}

		while(counter--)
		{
			LCD_Char(rev%10+'0');
    6702:	aa 80       	ldd	r10, Y+2	; 0x02
    6704:	bb 80       	ldd	r11, Y+3	; 0x03
    6706:	cc 80       	ldd	r12, Y+4	; 0x04
    6708:	dd 80       	ldd	r13, Y+5	; 0x05
    670a:	ee 80       	ldd	r14, Y+6	; 0x06
    670c:	ff 80       	ldd	r15, Y+7	; 0x07
    670e:	08 85       	ldd	r16, Y+8	; 0x08
    6710:	19 85       	ldd	r17, Y+9	; 0x09
    6712:	2a 2d       	mov	r18, r10
    6714:	3b 2d       	mov	r19, r11
    6716:	4c 2d       	mov	r20, r12
    6718:	5d 2d       	mov	r21, r13
    671a:	6e 2d       	mov	r22, r14
    671c:	7f 2d       	mov	r23, r15
    671e:	80 2f       	mov	r24, r16
    6720:	91 2f       	mov	r25, r17
    6722:	0f 2e       	mov	r0, r31
    6724:	fa e0       	ldi	r31, 0x0A	; 10
    6726:	af 2e       	mov	r10, r31
    6728:	f0 2d       	mov	r31, r0
    672a:	bb 24       	eor	r11, r11
    672c:	cc 24       	eor	r12, r12
    672e:	dd 24       	eor	r13, r13
    6730:	ee 24       	eor	r14, r14
    6732:	ff 24       	eor	r15, r15
    6734:	00 e0       	ldi	r16, 0x00	; 0
    6736:	10 e0       	ldi	r17, 0x00	; 0
    6738:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__umoddi3>
    673c:	a2 2e       	mov	r10, r18
    673e:	b3 2e       	mov	r11, r19
    6740:	c4 2e       	mov	r12, r20
    6742:	d5 2e       	mov	r13, r21
    6744:	e6 2e       	mov	r14, r22
    6746:	f7 2e       	mov	r15, r23
    6748:	08 2f       	mov	r16, r24
    674a:	19 2f       	mov	r17, r25
    674c:	2a 2d       	mov	r18, r10
    674e:	3b 2d       	mov	r19, r11
    6750:	4c 2d       	mov	r20, r12
    6752:	5d 2d       	mov	r21, r13
    6754:	6e 2d       	mov	r22, r14
    6756:	7f 2d       	mov	r23, r15
    6758:	80 2f       	mov	r24, r16
    675a:	91 2f       	mov	r25, r17
    675c:	82 2f       	mov	r24, r18
    675e:	80 5d       	subi	r24, 0xD0	; 208
    6760:	0e 94 87 2a 	call	0x550e	; 0x550e <LCD_Char>
			rev = rev/10;
    6764:	aa 80       	ldd	r10, Y+2	; 0x02
    6766:	bb 80       	ldd	r11, Y+3	; 0x03
    6768:	cc 80       	ldd	r12, Y+4	; 0x04
    676a:	dd 80       	ldd	r13, Y+5	; 0x05
    676c:	ee 80       	ldd	r14, Y+6	; 0x06
    676e:	ff 80       	ldd	r15, Y+7	; 0x07
    6770:	08 85       	ldd	r16, Y+8	; 0x08
    6772:	19 85       	ldd	r17, Y+9	; 0x09
    6774:	2a 2d       	mov	r18, r10
    6776:	3b 2d       	mov	r19, r11
    6778:	4c 2d       	mov	r20, r12
    677a:	5d 2d       	mov	r21, r13
    677c:	6e 2d       	mov	r22, r14
    677e:	7f 2d       	mov	r23, r15
    6780:	80 2f       	mov	r24, r16
    6782:	91 2f       	mov	r25, r17
    6784:	0f 2e       	mov	r0, r31
    6786:	fa e0       	ldi	r31, 0x0A	; 10
    6788:	af 2e       	mov	r10, r31
    678a:	f0 2d       	mov	r31, r0
    678c:	bb 24       	eor	r11, r11
    678e:	cc 24       	eor	r12, r12
    6790:	dd 24       	eor	r13, r13
    6792:	ee 24       	eor	r14, r14
    6794:	ff 24       	eor	r15, r15
    6796:	00 e0       	ldi	r16, 0x00	; 0
    6798:	10 e0       	ldi	r17, 0x00	; 0
    679a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__udivdi3>
    679e:	a2 2e       	mov	r10, r18
    67a0:	b3 2e       	mov	r11, r19
    67a2:	c4 2e       	mov	r12, r20
    67a4:	d5 2e       	mov	r13, r21
    67a6:	e6 2e       	mov	r14, r22
    67a8:	f7 2e       	mov	r15, r23
    67aa:	08 2f       	mov	r16, r24
    67ac:	19 2f       	mov	r17, r25
    67ae:	aa 82       	std	Y+2, r10	; 0x02
    67b0:	bb 82       	std	Y+3, r11	; 0x03
    67b2:	cc 82       	std	Y+4, r12	; 0x04
    67b4:	dd 82       	std	Y+5, r13	; 0x05
    67b6:	ee 82       	std	Y+6, r14	; 0x06
    67b8:	ff 82       	std	Y+7, r15	; 0x07
    67ba:	08 87       	std	Y+8, r16	; 0x08
    67bc:	19 87       	std	Y+9, r17	; 0x09
			num = num/10;
			rev = rev*10 + temp;
			counter++;
		}

		while(counter--)
    67be:	89 81       	ldd	r24, Y+1	; 0x01
    67c0:	ad 96       	adiw	r28, 0x2d	; 45
    67c2:	8f af       	std	Y+63, r24	; 0x3f
    67c4:	ad 97       	sbiw	r28, 0x2d	; 45
    67c6:	ad 96       	adiw	r28, 0x2d	; 45
    67c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    67ca:	ad 97       	sbiw	r28, 0x2d	; 45
    67cc:	99 23       	and	r25, r25
    67ce:	21 f0       	breq	.+8      	; 0x67d8 <LCD_SendNum+0x810>
    67d0:	81 e0       	ldi	r24, 0x01	; 1
    67d2:	ad 96       	adiw	r28, 0x2d	; 45
    67d4:	8f af       	std	Y+63, r24	; 0x3f
    67d6:	ad 97       	sbiw	r28, 0x2d	; 45
    67d8:	ad 96       	adiw	r28, 0x2d	; 45
    67da:	8f ad       	ldd	r24, Y+63	; 0x3f
    67dc:	ad 97       	sbiw	r28, 0x2d	; 45
    67de:	99 81       	ldd	r25, Y+1	; 0x01
    67e0:	91 50       	subi	r25, 0x01	; 1
    67e2:	99 83       	std	Y+1, r25	; 0x01
    67e4:	88 23       	and	r24, r24
    67e6:	09 f0       	breq	.+2      	; 0x67ea <LCD_SendNum+0x822>
    67e8:	8c cf       	rjmp	.-232    	; 0x6702 <LCD_SendNum+0x73a>
			LCD_Char(rev%10+'0');
			rev = rev/10;
		}
	}

}
    67ea:	c4 59       	subi	r28, 0x94	; 148
    67ec:	df 4f       	sbci	r29, 0xFF	; 255
    67ee:	0f b6       	in	r0, 0x3f	; 63
    67f0:	f8 94       	cli
    67f2:	de bf       	out	0x3e, r29	; 62
    67f4:	0f be       	out	0x3f, r0	; 63
    67f6:	cd bf       	out	0x3d, r28	; 61
    67f8:	cf 91       	pop	r28
    67fa:	df 91       	pop	r29
    67fc:	1f 91       	pop	r17
    67fe:	0f 91       	pop	r16
    6800:	ff 90       	pop	r15
    6802:	ef 90       	pop	r14
    6804:	df 90       	pop	r13
    6806:	cf 90       	pop	r12
    6808:	bf 90       	pop	r11
    680a:	af 90       	pop	r10
    680c:	08 95       	ret

0000680e <TIMER_VidSetCallBack>:
static u16 PRE_SCALAR_TIMER2 ;
static f32 T_OV_TIMER2  ;
static f32 NUM_OV_TIMER2 ;
static f32 PRE_LOAD_TIMER2 ;

void TIMER_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    680e:	df 93       	push	r29
    6810:	cf 93       	push	r28
    6812:	00 d0       	rcall	.+0      	; 0x6814 <TIMER_VidSetCallBack+0x6>
    6814:	00 d0       	rcall	.+0      	; 0x6816 <TIMER_VidSetCallBack+0x8>
    6816:	0f 92       	push	r0
    6818:	cd b7       	in	r28, 0x3d	; 61
    681a:	de b7       	in	r29, 0x3e	; 62
    681c:	89 83       	std	Y+1, r24	; 0x01
    681e:	7b 83       	std	Y+3, r23	; 0x03
    6820:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    6822:	89 81       	ldd	r24, Y+1	; 0x01
    6824:	28 2f       	mov	r18, r24
    6826:	30 e0       	ldi	r19, 0x00	; 0
    6828:	3d 83       	std	Y+5, r19	; 0x05
    682a:	2c 83       	std	Y+4, r18	; 0x04
    682c:	8c 81       	ldd	r24, Y+4	; 0x04
    682e:	9d 81       	ldd	r25, Y+5	; 0x05
    6830:	81 30       	cpi	r24, 0x01	; 1
    6832:	91 05       	cpc	r25, r1
    6834:	81 f0       	breq	.+32     	; 0x6856 <TIMER_VidSetCallBack+0x48>
    6836:	2c 81       	ldd	r18, Y+4	; 0x04
    6838:	3d 81       	ldd	r19, Y+5	; 0x05
    683a:	22 30       	cpi	r18, 0x02	; 2
    683c:	31 05       	cpc	r19, r1
    683e:	91 f0       	breq	.+36     	; 0x6864 <TIMER_VidSetCallBack+0x56>
    6840:	8c 81       	ldd	r24, Y+4	; 0x04
    6842:	9d 81       	ldd	r25, Y+5	; 0x05
    6844:	00 97       	sbiw	r24, 0x00	; 0
    6846:	a1 f4       	brne	.+40     	; 0x6870 <TIMER_VidSetCallBack+0x62>
	case 0 :TIMER0_PFUNC = ptr ;             break ;
    6848:	8a 81       	ldd	r24, Y+2	; 0x02
    684a:	9b 81       	ldd	r25, Y+3	; 0x03
    684c:	90 93 95 01 	sts	0x0195, r25
    6850:	80 93 94 01 	sts	0x0194, r24
    6854:	0d c0       	rjmp	.+26     	; 0x6870 <TIMER_VidSetCallBack+0x62>
	case 1 :TIMER1_PFUNC = ptr ;             break ;
    6856:	8a 81       	ldd	r24, Y+2	; 0x02
    6858:	9b 81       	ldd	r25, Y+3	; 0x03
    685a:	90 93 97 01 	sts	0x0197, r25
    685e:	80 93 96 01 	sts	0x0196, r24
    6862:	06 c0       	rjmp	.+12     	; 0x6870 <TIMER_VidSetCallBack+0x62>
	case 2 :TIMER2_PFUNC = ptr ;             break ;
    6864:	8a 81       	ldd	r24, Y+2	; 0x02
    6866:	9b 81       	ldd	r25, Y+3	; 0x03
    6868:	90 93 99 01 	sts	0x0199, r25
    686c:	80 93 98 01 	sts	0x0198, r24
	}
}
    6870:	0f 90       	pop	r0
    6872:	0f 90       	pop	r0
    6874:	0f 90       	pop	r0
    6876:	0f 90       	pop	r0
    6878:	0f 90       	pop	r0
    687a:	cf 91       	pop	r28
    687c:	df 91       	pop	r29
    687e:	08 95       	ret

00006880 <TIMER0_VidInitialize>:




/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
void TIMER0_VidInitialize (void) {
    6880:	df 93       	push	r29
    6882:	cf 93       	push	r28
    6884:	cd b7       	in	r28, 0x3d	; 61
    6886:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
#endif

#if TIMER0_MODE == FAST_PWM
	//define pin of timer 0
	DIO_VidSetPinDirection(1,3,1);
    6888:	81 e0       	ldi	r24, 0x01	; 1
    688a:	63 e0       	ldi	r22, 0x03	; 3
    688c:	41 e0       	ldi	r20, 0x01	; 1
    688e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(1,3,0);
    6892:	81 e0       	ldi	r24, 0x01	; 1
    6894:	63 e0       	ldi	r22, 0x03	; 3
    6896:	40 e0       	ldi	r20, 0x00	; 0
    6898:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>

	// to initialize timer0 on 0 , FOCO = 0
	TCCR0 = 0 ;
    689c:	e3 e5       	ldi	r30, 0x53	; 83
    689e:	f0 e0       	ldi	r31, 0x00	; 0
    68a0:	10 82       	st	Z, r1

	// 1 1 Fast PWM
	SET_BIT(TCCR0,WGM00);
    68a2:	a3 e5       	ldi	r26, 0x53	; 83
    68a4:	b0 e0       	ldi	r27, 0x00	; 0
    68a6:	e3 e5       	ldi	r30, 0x53	; 83
    68a8:	f0 e0       	ldi	r31, 0x00	; 0
    68aa:	80 81       	ld	r24, Z
    68ac:	80 64       	ori	r24, 0x40	; 64
    68ae:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    68b0:	a3 e5       	ldi	r26, 0x53	; 83
    68b2:	b0 e0       	ldi	r27, 0x00	; 0
    68b4:	e3 e5       	ldi	r30, 0x53	; 83
    68b6:	f0 e0       	ldi	r31, 0x00	; 0
    68b8:	80 81       	ld	r24, Z
    68ba:	88 60       	ori	r24, 0x08	; 8
    68bc:	8c 93       	st	X, r24

	//1 0 Clear OC0 on compare match, set OC0 at TOP ,  NON_INVERED MODE PWM
	SET_BIT(TCCR0,COM01);
    68be:	a3 e5       	ldi	r26, 0x53	; 83
    68c0:	b0 e0       	ldi	r27, 0x00	; 0
    68c2:	e3 e5       	ldi	r30, 0x53	; 83
    68c4:	f0 e0       	ldi	r31, 0x00	; 0
    68c6:	80 81       	ld	r24, Z
    68c8:	80 62       	ori	r24, 0x20	; 32
    68ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,COM00);
    68cc:	a3 e5       	ldi	r26, 0x53	; 83
    68ce:	b0 e0       	ldi	r27, 0x00	; 0
    68d0:	e3 e5       	ldi	r30, 0x53	; 83
    68d2:	f0 e0       	ldi	r31, 0x00	; 0
    68d4:	80 81       	ld	r24, Z
    68d6:	8f 7e       	andi	r24, 0xEF	; 239
    68d8:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER0 == NO_PRE
	CLR_BIT(TCCR0,CS02);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
#elif PRE_TYPE_TIMER0 == PRE_8
	CLR_BIT(TCCR0,CS02);
    68da:	a3 e5       	ldi	r26, 0x53	; 83
    68dc:	b0 e0       	ldi	r27, 0x00	; 0
    68de:	e3 e5       	ldi	r30, 0x53	; 83
    68e0:	f0 e0       	ldi	r31, 0x00	; 0
    68e2:	80 81       	ld	r24, Z
    68e4:	8b 7f       	andi	r24, 0xFB	; 251
    68e6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    68e8:	a3 e5       	ldi	r26, 0x53	; 83
    68ea:	b0 e0       	ldi	r27, 0x00	; 0
    68ec:	e3 e5       	ldi	r30, 0x53	; 83
    68ee:	f0 e0       	ldi	r31, 0x00	; 0
    68f0:	80 81       	ld	r24, Z
    68f2:	82 60       	ori	r24, 0x02	; 2
    68f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
    68f6:	a3 e5       	ldi	r26, 0x53	; 83
    68f8:	b0 e0       	ldi	r27, 0x00	; 0
    68fa:	e3 e5       	ldi	r30, 0x53	; 83
    68fc:	f0 e0       	ldi	r31, 0x00	; 0
    68fe:	80 81       	ld	r24, Z
    6900:	8e 7f       	andi	r24, 0xFE	; 254
    6902:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER0 = 8 ;
    6904:	88 e0       	ldi	r24, 0x08	; 8
    6906:	90 e0       	ldi	r25, 0x00	; 0
    6908:	90 93 a7 01 	sts	0x01A7, r25
    690c:	80 93 a6 01 	sts	0x01A6, r24
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
	PRE_SCALAR_TIMER0 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    6910:	cf 91       	pop	r28
    6912:	df 91       	pop	r29
    6914:	08 95       	ret

00006916 <Timer0_VidSETDUTY>:

#endif

#if TIMER0_MODE == FAST_PWM

void Timer0_VidSETDUTY (u8 duty ) {
    6916:	df 93       	push	r29
    6918:	cf 93       	push	r28
    691a:	0f 92       	push	r0
    691c:	cd b7       	in	r28, 0x3d	; 61
    691e:	de b7       	in	r29, 0x3e	; 62
    6920:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    6922:	89 81       	ldd	r24, Y+1	; 0x01
    6924:	48 2f       	mov	r20, r24
    6926:	50 e0       	ldi	r21, 0x00	; 0
    6928:	ca 01       	movw	r24, r20
    692a:	9c 01       	movw	r18, r24
    692c:	22 0f       	add	r18, r18
    692e:	33 1f       	adc	r19, r19
    6930:	c9 01       	movw	r24, r18
    6932:	96 95       	lsr	r25
    6934:	98 2f       	mov	r25, r24
    6936:	88 27       	eor	r24, r24
    6938:	97 95       	ror	r25
    693a:	87 95       	ror	r24
    693c:	82 1b       	sub	r24, r18
    693e:	93 0b       	sbc	r25, r19
    6940:	84 0f       	add	r24, r20
    6942:	95 1f       	adc	r25, r21
    6944:	24 e6       	ldi	r18, 0x64	; 100
    6946:	30 e0       	ldi	r19, 0x00	; 0
    6948:	b9 01       	movw	r22, r18
    694a:	0e 94 f6 39 	call	0x73ec	; 0x73ec <__udivmodhi4>
    694e:	cb 01       	movw	r24, r22
    6950:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty ;
    6952:	ec e5       	ldi	r30, 0x5C	; 92
    6954:	f0 e0       	ldi	r31, 0x00	; 0
    6956:	89 81       	ldd	r24, Y+1	; 0x01
    6958:	80 83       	st	Z, r24
}
    695a:	0f 90       	pop	r0
    695c:	cf 91       	pop	r28
    695e:	df 91       	pop	r29
    6960:	08 95       	ret

00006962 <TIMER1_VidInitialize>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER1_VidInitialize (void) {
    6962:	df 93       	push	r29
    6964:	cf 93       	push	r28
    6966:	cd b7       	in	r28, 0x3d	; 61
    6968:	de b7       	in	r29, 0x3e	; 62

#if TIMER1_MODE == FAST_PWM
	//COM1A1/COM1B1 COM1A0/COM1B0  1 0 Clear OC1A/OC1B on compare match, set  OC1A/OC1B at TOP
	TCCR1A = 0b10100000 ;
    696a:	ef e4       	ldi	r30, 0x4F	; 79
    696c:	f0 e0       	ldi	r31, 0x00	; 0
    696e:	80 ea       	ldi	r24, 0xA0	; 160
    6970:	80 83       	st	Z, r24

	//in next update we will make Timer not fixed modes
	/*WGM13 WGM12	WGM11	WGM10	Timer/Counter Mode of Operation TOP Update of OCR1x	TOV1 Flag Set 	on
      1      1       1        0        Fast PWM                      ICR1 TOP TOP*/
	SET_BIT(TCCR1B,WGM13);
    6972:	ae e4       	ldi	r26, 0x4E	; 78
    6974:	b0 e0       	ldi	r27, 0x00	; 0
    6976:	ee e4       	ldi	r30, 0x4E	; 78
    6978:	f0 e0       	ldi	r31, 0x00	; 0
    697a:	80 81       	ld	r24, Z
    697c:	80 61       	ori	r24, 0x10	; 16
    697e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    6980:	ae e4       	ldi	r26, 0x4E	; 78
    6982:	b0 e0       	ldi	r27, 0x00	; 0
    6984:	ee e4       	ldi	r30, 0x4E	; 78
    6986:	f0 e0       	ldi	r31, 0x00	; 0
    6988:	80 81       	ld	r24, Z
    698a:	88 60       	ori	r24, 0x08	; 8
    698c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    698e:	af e4       	ldi	r26, 0x4F	; 79
    6990:	b0 e0       	ldi	r27, 0x00	; 0
    6992:	ef e4       	ldi	r30, 0x4F	; 79
    6994:	f0 e0       	ldi	r31, 0x00	; 0
    6996:	80 81       	ld	r24, Z
    6998:	82 60       	ori	r24, 0x02	; 2
    699a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM10);
    699c:	af e4       	ldi	r26, 0x4F	; 79
    699e:	b0 e0       	ldi	r27, 0x00	; 0
    69a0:	ef e4       	ldi	r30, 0x4F	; 79
    69a2:	f0 e0       	ldi	r31, 0x00	; 0
    69a4:	80 81       	ld	r24, Z
    69a6:	8e 7f       	andi	r24, 0xFE	; 254
    69a8:	8c 93       	st	X, r24

	//define pin of timer1
	DIO_VidSetPinDirection(3,5,1);
    69aa:	83 e0       	ldi	r24, 0x03	; 3
    69ac:	65 e0       	ldi	r22, 0x05	; 5
    69ae:	41 e0       	ldi	r20, 0x01	; 1
    69b0:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,4,1);
    69b4:	83 e0       	ldi	r24, 0x03	; 3
    69b6:	64 e0       	ldi	r22, 0x04	; 4
    69b8:	41 e0       	ldi	r20, 0x01	; 1
    69ba:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,5,0);
    69be:	83 e0       	ldi	r24, 0x03	; 3
    69c0:	65 e0       	ldi	r22, 0x05	; 5
    69c2:	40 e0       	ldi	r20, 0x00	; 0
    69c4:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(3,4,0);
    69c8:	83 e0       	ldi	r24, 0x03	; 3
    69ca:	64 e0       	ldi	r22, 0x04	; 4
    69cc:	40 e0       	ldi	r20, 0x00	; 0
    69ce:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
	CLR_BIT(TCCR1B,CS12);
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);
	PRE_SCALAR_TIMER1 = 1 ;
#elif PRE_TYPE_TIMER1 == PRE_8
	CLR_BIT(TCCR1B,CS12);
    69d2:	ae e4       	ldi	r26, 0x4E	; 78
    69d4:	b0 e0       	ldi	r27, 0x00	; 0
    69d6:	ee e4       	ldi	r30, 0x4E	; 78
    69d8:	f0 e0       	ldi	r31, 0x00	; 0
    69da:	80 81       	ld	r24, Z
    69dc:	8b 7f       	andi	r24, 0xFB	; 251
    69de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    69e0:	ae e4       	ldi	r26, 0x4E	; 78
    69e2:	b0 e0       	ldi	r27, 0x00	; 0
    69e4:	ee e4       	ldi	r30, 0x4E	; 78
    69e6:	f0 e0       	ldi	r31, 0x00	; 0
    69e8:	80 81       	ld	r24, Z
    69ea:	82 60       	ori	r24, 0x02	; 2
    69ec:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    69ee:	ae e4       	ldi	r26, 0x4E	; 78
    69f0:	b0 e0       	ldi	r27, 0x00	; 0
    69f2:	ee e4       	ldi	r30, 0x4E	; 78
    69f4:	f0 e0       	ldi	r31, 0x00	; 0
    69f6:	80 81       	ld	r24, Z
    69f8:	8e 7f       	andi	r24, 0xFE	; 254
    69fa:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER1 = 8 ;
    69fc:	88 e0       	ldi	r24, 0x08	; 8
    69fe:	90 e0       	ldi	r25, 0x00	; 0
    6a00:	90 93 b5 01 	sts	0x01B5, r25
    6a04:	80 93 b4 01 	sts	0x01B4, r24
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);
	PRE_SCALAR_TIMER1 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    6a08:	cf 91       	pop	r28
    6a0a:	df 91       	pop	r29
    6a0c:	08 95       	ret

00006a0e <Timer1_VidSETFreqency>:

//to check that you use FAST_PWM mode
#if TIMER1_MODE == FAST_PWM

//to set the top of counting in PWM
void Timer1_VidSETFreqency (u8 copy_f){
    6a0e:	8f 92       	push	r8
    6a10:	9f 92       	push	r9
    6a12:	af 92       	push	r10
    6a14:	bf 92       	push	r11
    6a16:	cf 92       	push	r12
    6a18:	df 92       	push	r13
    6a1a:	ef 92       	push	r14
    6a1c:	ff 92       	push	r15
    6a1e:	0f 93       	push	r16
    6a20:	1f 93       	push	r17
    6a22:	df 93       	push	r29
    6a24:	cf 93       	push	r28
    6a26:	0f 92       	push	r0
    6a28:	cd b7       	in	r28, 0x3d	; 61
    6a2a:	de b7       	in	r29, 0x3e	; 62
    6a2c:	89 83       	std	Y+1, r24	; 0x01
	//in next update we want to make not fixed max = 38944 in counting in timer one by PWM
	top_count = 8000000/(copy_f*PRE_SCALAR_TIMER1) ;
    6a2e:	89 81       	ldd	r24, Y+1	; 0x01
    6a30:	28 2f       	mov	r18, r24
    6a32:	30 e0       	ldi	r19, 0x00	; 0
    6a34:	80 91 b4 01 	lds	r24, 0x01B4
    6a38:	90 91 b5 01 	lds	r25, 0x01B5
    6a3c:	ac 01       	movw	r20, r24
    6a3e:	24 9f       	mul	r18, r20
    6a40:	c0 01       	movw	r24, r0
    6a42:	25 9f       	mul	r18, r21
    6a44:	90 0d       	add	r25, r0
    6a46:	34 9f       	mul	r19, r20
    6a48:	90 0d       	add	r25, r0
    6a4a:	11 24       	eor	r1, r1
    6a4c:	9c 01       	movw	r18, r24
    6a4e:	40 e0       	ldi	r20, 0x00	; 0
    6a50:	50 e0       	ldi	r21, 0x00	; 0
    6a52:	80 e0       	ldi	r24, 0x00	; 0
    6a54:	92 e1       	ldi	r25, 0x12	; 18
    6a56:	aa e7       	ldi	r26, 0x7A	; 122
    6a58:	b0 e0       	ldi	r27, 0x00	; 0
    6a5a:	bc 01       	movw	r22, r24
    6a5c:	cd 01       	movw	r24, r26
    6a5e:	0e 94 0a 3a 	call	0x7414	; 0x7414 <__divmodsi4>
    6a62:	da 01       	movw	r26, r20
    6a64:	c9 01       	movw	r24, r18
    6a66:	5c 01       	movw	r10, r24
    6a68:	6d 01       	movw	r12, r26
    6a6a:	86 01       	movw	r16, r12
    6a6c:	75 01       	movw	r14, r10
    6a6e:	11 0f       	add	r17, r17
    6a70:	ee 08       	sbc	r14, r14
    6a72:	fe 2c       	mov	r15, r14
    6a74:	87 01       	movw	r16, r14
    6a76:	a6 01       	movw	r20, r12
    6a78:	95 01       	movw	r18, r10
    6a7a:	6e 2d       	mov	r22, r14
    6a7c:	7e 2d       	mov	r23, r14
    6a7e:	8e 2d       	mov	r24, r14
    6a80:	9e 2d       	mov	r25, r14
    6a82:	20 93 b6 01 	sts	0x01B6, r18
    6a86:	30 93 b7 01 	sts	0x01B7, r19
    6a8a:	40 93 b8 01 	sts	0x01B8, r20
    6a8e:	50 93 b9 01 	sts	0x01B9, r21
    6a92:	60 93 ba 01 	sts	0x01BA, r22
    6a96:	70 93 bb 01 	sts	0x01BB, r23
    6a9a:	80 93 bc 01 	sts	0x01BC, r24
    6a9e:	90 93 bd 01 	sts	0x01BD, r25
	ICR1H =(u8)(top_count>>8) ;
    6aa2:	0f 2e       	mov	r0, r31
    6aa4:	f7 e4       	ldi	r31, 0x47	; 71
    6aa6:	8f 2e       	mov	r8, r31
    6aa8:	99 24       	eor	r9, r9
    6aaa:	f0 2d       	mov	r31, r0
    6aac:	a0 90 b6 01 	lds	r10, 0x01B6
    6ab0:	b0 90 b7 01 	lds	r11, 0x01B7
    6ab4:	c0 90 b8 01 	lds	r12, 0x01B8
    6ab8:	d0 90 b9 01 	lds	r13, 0x01B9
    6abc:	e0 90 ba 01 	lds	r14, 0x01BA
    6ac0:	f0 90 bb 01 	lds	r15, 0x01BB
    6ac4:	00 91 bc 01 	lds	r16, 0x01BC
    6ac8:	10 91 bd 01 	lds	r17, 0x01BD
    6acc:	2a 2d       	mov	r18, r10
    6ace:	3b 2d       	mov	r19, r11
    6ad0:	4c 2d       	mov	r20, r12
    6ad2:	5d 2d       	mov	r21, r13
    6ad4:	6e 2d       	mov	r22, r14
    6ad6:	7f 2d       	mov	r23, r15
    6ad8:	80 2f       	mov	r24, r16
    6ada:	91 2f       	mov	r25, r17
    6adc:	08 e0       	ldi	r16, 0x08	; 8
    6ade:	0e 94 44 01 	call	0x288	; 0x288 <__lshrdi3>
    6ae2:	a2 2e       	mov	r10, r18
    6ae4:	b3 2e       	mov	r11, r19
    6ae6:	c4 2e       	mov	r12, r20
    6ae8:	d5 2e       	mov	r13, r21
    6aea:	e6 2e       	mov	r14, r22
    6aec:	f7 2e       	mov	r15, r23
    6aee:	08 2f       	mov	r16, r24
    6af0:	19 2f       	mov	r17, r25
    6af2:	2a 2d       	mov	r18, r10
    6af4:	3b 2d       	mov	r19, r11
    6af6:	4c 2d       	mov	r20, r12
    6af8:	5d 2d       	mov	r21, r13
    6afa:	6e 2d       	mov	r22, r14
    6afc:	7f 2d       	mov	r23, r15
    6afe:	80 2f       	mov	r24, r16
    6b00:	91 2f       	mov	r25, r17
    6b02:	82 2f       	mov	r24, r18
    6b04:	f4 01       	movw	r30, r8
    6b06:	80 83       	st	Z, r24
	ICR1L =(u8)(top_count) ;
    6b08:	e6 e4       	ldi	r30, 0x46	; 70
    6b0a:	f0 e0       	ldi	r31, 0x00	; 0
    6b0c:	20 91 b6 01 	lds	r18, 0x01B6
    6b10:	30 91 b7 01 	lds	r19, 0x01B7
    6b14:	40 91 b8 01 	lds	r20, 0x01B8
    6b18:	50 91 b9 01 	lds	r21, 0x01B9
    6b1c:	60 91 ba 01 	lds	r22, 0x01BA
    6b20:	70 91 bb 01 	lds	r23, 0x01BB
    6b24:	80 91 bc 01 	lds	r24, 0x01BC
    6b28:	90 91 bd 01 	lds	r25, 0x01BD
    6b2c:	82 2f       	mov	r24, r18
    6b2e:	80 83       	st	Z, r24
}
    6b30:	0f 90       	pop	r0
    6b32:	cf 91       	pop	r28
    6b34:	df 91       	pop	r29
    6b36:	1f 91       	pop	r17
    6b38:	0f 91       	pop	r16
    6b3a:	ff 90       	pop	r15
    6b3c:	ef 90       	pop	r14
    6b3e:	df 90       	pop	r13
    6b40:	cf 90       	pop	r12
    6b42:	bf 90       	pop	r11
    6b44:	af 90       	pop	r10
    6b46:	9f 90       	pop	r9
    6b48:	8f 90       	pop	r8
    6b4a:	08 95       	ret

00006b4c <Timer1_VidSETDUTY>:

//in next update we want to make duty by _precentage %
void Timer1_VidSETDUTY (u16 Copy_U8DutyA , u16 Copy_U8DutyB ) {
    6b4c:	2f 92       	push	r2
    6b4e:	3f 92       	push	r3
    6b50:	4f 92       	push	r4
    6b52:	5f 92       	push	r5
    6b54:	6f 92       	push	r6
    6b56:	7f 92       	push	r7
    6b58:	8f 92       	push	r8
    6b5a:	9f 92       	push	r9
    6b5c:	af 92       	push	r10
    6b5e:	bf 92       	push	r11
    6b60:	cf 92       	push	r12
    6b62:	df 92       	push	r13
    6b64:	ef 92       	push	r14
    6b66:	ff 92       	push	r15
    6b68:	0f 93       	push	r16
    6b6a:	1f 93       	push	r17
    6b6c:	df 93       	push	r29
    6b6e:	cf 93       	push	r28
    6b70:	00 d0       	rcall	.+0      	; 0x6b72 <Timer1_VidSETDUTY+0x26>
    6b72:	00 d0       	rcall	.+0      	; 0x6b74 <Timer1_VidSETDUTY+0x28>
    6b74:	cd b7       	in	r28, 0x3d	; 61
    6b76:	de b7       	in	r29, 0x3e	; 62
    6b78:	9a 83       	std	Y+2, r25	; 0x02
    6b7a:	89 83       	std	Y+1, r24	; 0x01
    6b7c:	7c 83       	std	Y+4, r23	; 0x04
    6b7e:	6b 83       	std	Y+3, r22	; 0x03
	Copy_U8DutyA = top_count*Copy_U8DutyA/100  ;
    6b80:	89 81       	ldd	r24, Y+1	; 0x01
    6b82:	9a 81       	ldd	r25, Y+2	; 0x02
    6b84:	5c 01       	movw	r10, r24
    6b86:	cc 24       	eor	r12, r12
    6b88:	dd 24       	eor	r13, r13
    6b8a:	ee 24       	eor	r14, r14
    6b8c:	ff 24       	eor	r15, r15
    6b8e:	87 01       	movw	r16, r14
    6b90:	20 90 b6 01 	lds	r2, 0x01B6
    6b94:	30 90 b7 01 	lds	r3, 0x01B7
    6b98:	40 90 b8 01 	lds	r4, 0x01B8
    6b9c:	50 90 b9 01 	lds	r5, 0x01B9
    6ba0:	60 90 ba 01 	lds	r6, 0x01BA
    6ba4:	70 90 bb 01 	lds	r7, 0x01BB
    6ba8:	80 90 bc 01 	lds	r8, 0x01BC
    6bac:	90 90 bd 01 	lds	r9, 0x01BD
    6bb0:	2a 2d       	mov	r18, r10
    6bb2:	3b 2d       	mov	r19, r11
    6bb4:	4c 2d       	mov	r20, r12
    6bb6:	5d 2d       	mov	r21, r13
    6bb8:	6e 2d       	mov	r22, r14
    6bba:	7f 2d       	mov	r23, r15
    6bbc:	80 2f       	mov	r24, r16
    6bbe:	91 2f       	mov	r25, r17
    6bc0:	a2 2c       	mov	r10, r2
    6bc2:	b3 2c       	mov	r11, r3
    6bc4:	c4 2c       	mov	r12, r4
    6bc6:	d5 2c       	mov	r13, r5
    6bc8:	e6 2c       	mov	r14, r6
    6bca:	f7 2c       	mov	r15, r7
    6bcc:	08 2d       	mov	r16, r8
    6bce:	19 2d       	mov	r17, r9
    6bd0:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    6bd4:	22 2e       	mov	r2, r18
    6bd6:	33 2e       	mov	r3, r19
    6bd8:	44 2e       	mov	r4, r20
    6bda:	55 2e       	mov	r5, r21
    6bdc:	66 2e       	mov	r6, r22
    6bde:	77 2e       	mov	r7, r23
    6be0:	88 2e       	mov	r8, r24
    6be2:	99 2e       	mov	r9, r25
    6be4:	a2 2c       	mov	r10, r2
    6be6:	b3 2c       	mov	r11, r3
    6be8:	c4 2c       	mov	r12, r4
    6bea:	d5 2c       	mov	r13, r5
    6bec:	e6 2c       	mov	r14, r6
    6bee:	f7 2c       	mov	r15, r7
    6bf0:	08 2d       	mov	r16, r8
    6bf2:	19 2d       	mov	r17, r9
    6bf4:	2a 2d       	mov	r18, r10
    6bf6:	3b 2d       	mov	r19, r11
    6bf8:	4c 2d       	mov	r20, r12
    6bfa:	5d 2d       	mov	r21, r13
    6bfc:	6e 2d       	mov	r22, r14
    6bfe:	7f 2d       	mov	r23, r15
    6c00:	80 2f       	mov	r24, r16
    6c02:	91 2f       	mov	r25, r17
    6c04:	0f 2e       	mov	r0, r31
    6c06:	f4 e6       	ldi	r31, 0x64	; 100
    6c08:	af 2e       	mov	r10, r31
    6c0a:	f0 2d       	mov	r31, r0
    6c0c:	bb 24       	eor	r11, r11
    6c0e:	cc 24       	eor	r12, r12
    6c10:	dd 24       	eor	r13, r13
    6c12:	ee 24       	eor	r14, r14
    6c14:	ff 24       	eor	r15, r15
    6c16:	00 e0       	ldi	r16, 0x00	; 0
    6c18:	10 e0       	ldi	r17, 0x00	; 0
    6c1a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__udivdi3>
    6c1e:	a2 2e       	mov	r10, r18
    6c20:	b3 2e       	mov	r11, r19
    6c22:	c4 2e       	mov	r12, r20
    6c24:	d5 2e       	mov	r13, r21
    6c26:	e6 2e       	mov	r14, r22
    6c28:	f7 2e       	mov	r15, r23
    6c2a:	08 2f       	mov	r16, r24
    6c2c:	19 2f       	mov	r17, r25
    6c2e:	2a 2d       	mov	r18, r10
    6c30:	3b 2d       	mov	r19, r11
    6c32:	4c 2d       	mov	r20, r12
    6c34:	5d 2d       	mov	r21, r13
    6c36:	6e 2d       	mov	r22, r14
    6c38:	7f 2d       	mov	r23, r15
    6c3a:	80 2f       	mov	r24, r16
    6c3c:	91 2f       	mov	r25, r17
    6c3e:	3a 83       	std	Y+2, r19	; 0x02
    6c40:	29 83       	std	Y+1, r18	; 0x01
	Copy_U8DutyB = top_count*Copy_U8DutyB/100 ;
    6c42:	8b 81       	ldd	r24, Y+3	; 0x03
    6c44:	9c 81       	ldd	r25, Y+4	; 0x04
    6c46:	5c 01       	movw	r10, r24
    6c48:	cc 24       	eor	r12, r12
    6c4a:	dd 24       	eor	r13, r13
    6c4c:	ee 24       	eor	r14, r14
    6c4e:	ff 24       	eor	r15, r15
    6c50:	87 01       	movw	r16, r14
    6c52:	20 90 b6 01 	lds	r2, 0x01B6
    6c56:	30 90 b7 01 	lds	r3, 0x01B7
    6c5a:	40 90 b8 01 	lds	r4, 0x01B8
    6c5e:	50 90 b9 01 	lds	r5, 0x01B9
    6c62:	60 90 ba 01 	lds	r6, 0x01BA
    6c66:	70 90 bb 01 	lds	r7, 0x01BB
    6c6a:	80 90 bc 01 	lds	r8, 0x01BC
    6c6e:	90 90 bd 01 	lds	r9, 0x01BD
    6c72:	2a 2d       	mov	r18, r10
    6c74:	3b 2d       	mov	r19, r11
    6c76:	4c 2d       	mov	r20, r12
    6c78:	5d 2d       	mov	r21, r13
    6c7a:	6e 2d       	mov	r22, r14
    6c7c:	7f 2d       	mov	r23, r15
    6c7e:	80 2f       	mov	r24, r16
    6c80:	91 2f       	mov	r25, r17
    6c82:	a2 2c       	mov	r10, r2
    6c84:	b3 2c       	mov	r11, r3
    6c86:	c4 2c       	mov	r12, r4
    6c88:	d5 2c       	mov	r13, r5
    6c8a:	e6 2c       	mov	r14, r6
    6c8c:	f7 2c       	mov	r15, r7
    6c8e:	08 2d       	mov	r16, r8
    6c90:	19 2d       	mov	r17, r9
    6c92:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    6c96:	22 2e       	mov	r2, r18
    6c98:	33 2e       	mov	r3, r19
    6c9a:	44 2e       	mov	r4, r20
    6c9c:	55 2e       	mov	r5, r21
    6c9e:	66 2e       	mov	r6, r22
    6ca0:	77 2e       	mov	r7, r23
    6ca2:	88 2e       	mov	r8, r24
    6ca4:	99 2e       	mov	r9, r25
    6ca6:	a2 2c       	mov	r10, r2
    6ca8:	b3 2c       	mov	r11, r3
    6caa:	c4 2c       	mov	r12, r4
    6cac:	d5 2c       	mov	r13, r5
    6cae:	e6 2c       	mov	r14, r6
    6cb0:	f7 2c       	mov	r15, r7
    6cb2:	08 2d       	mov	r16, r8
    6cb4:	19 2d       	mov	r17, r9
    6cb6:	2a 2d       	mov	r18, r10
    6cb8:	3b 2d       	mov	r19, r11
    6cba:	4c 2d       	mov	r20, r12
    6cbc:	5d 2d       	mov	r21, r13
    6cbe:	6e 2d       	mov	r22, r14
    6cc0:	7f 2d       	mov	r23, r15
    6cc2:	80 2f       	mov	r24, r16
    6cc4:	91 2f       	mov	r25, r17
    6cc6:	0f 2e       	mov	r0, r31
    6cc8:	f4 e6       	ldi	r31, 0x64	; 100
    6cca:	af 2e       	mov	r10, r31
    6ccc:	f0 2d       	mov	r31, r0
    6cce:	bb 24       	eor	r11, r11
    6cd0:	cc 24       	eor	r12, r12
    6cd2:	dd 24       	eor	r13, r13
    6cd4:	ee 24       	eor	r14, r14
    6cd6:	ff 24       	eor	r15, r15
    6cd8:	00 e0       	ldi	r16, 0x00	; 0
    6cda:	10 e0       	ldi	r17, 0x00	; 0
    6cdc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__udivdi3>
    6ce0:	a2 2e       	mov	r10, r18
    6ce2:	b3 2e       	mov	r11, r19
    6ce4:	c4 2e       	mov	r12, r20
    6ce6:	d5 2e       	mov	r13, r21
    6ce8:	e6 2e       	mov	r14, r22
    6cea:	f7 2e       	mov	r15, r23
    6cec:	08 2f       	mov	r16, r24
    6cee:	19 2f       	mov	r17, r25
    6cf0:	2a 2d       	mov	r18, r10
    6cf2:	3b 2d       	mov	r19, r11
    6cf4:	4c 2d       	mov	r20, r12
    6cf6:	5d 2d       	mov	r21, r13
    6cf8:	6e 2d       	mov	r22, r14
    6cfa:	7f 2d       	mov	r23, r15
    6cfc:	80 2f       	mov	r24, r16
    6cfe:	91 2f       	mov	r25, r17
    6d00:	3c 83       	std	Y+4, r19	; 0x04
    6d02:	2b 83       	std	Y+3, r18	; 0x03

	OCR1AH = (u8)(Copy_U8DutyA>>8) ;
    6d04:	eb e4       	ldi	r30, 0x4B	; 75
    6d06:	f0 e0       	ldi	r31, 0x00	; 0
    6d08:	89 81       	ldd	r24, Y+1	; 0x01
    6d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d0c:	89 2f       	mov	r24, r25
    6d0e:	99 27       	eor	r25, r25
    6d10:	80 83       	st	Z, r24
	OCR1AL = (u8)Copy_U8DutyA ;
    6d12:	ea e4       	ldi	r30, 0x4A	; 74
    6d14:	f0 e0       	ldi	r31, 0x00	; 0
    6d16:	89 81       	ldd	r24, Y+1	; 0x01
    6d18:	80 83       	st	Z, r24

	OCR1BH = (u8)(Copy_U8DutyB>>8) ;
    6d1a:	e9 e4       	ldi	r30, 0x49	; 73
    6d1c:	f0 e0       	ldi	r31, 0x00	; 0
    6d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d20:	9c 81       	ldd	r25, Y+4	; 0x04
    6d22:	89 2f       	mov	r24, r25
    6d24:	99 27       	eor	r25, r25
    6d26:	80 83       	st	Z, r24
	OCR1BL = (u8)Copy_U8DutyB ;
    6d28:	e8 e4       	ldi	r30, 0x48	; 72
    6d2a:	f0 e0       	ldi	r31, 0x00	; 0
    6d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    6d2e:	80 83       	st	Z, r24
}
    6d30:	0f 90       	pop	r0
    6d32:	0f 90       	pop	r0
    6d34:	0f 90       	pop	r0
    6d36:	0f 90       	pop	r0
    6d38:	cf 91       	pop	r28
    6d3a:	df 91       	pop	r29
    6d3c:	1f 91       	pop	r17
    6d3e:	0f 91       	pop	r16
    6d40:	ff 90       	pop	r15
    6d42:	ef 90       	pop	r14
    6d44:	df 90       	pop	r13
    6d46:	cf 90       	pop	r12
    6d48:	bf 90       	pop	r11
    6d4a:	af 90       	pop	r10
    6d4c:	9f 90       	pop	r9
    6d4e:	8f 90       	pop	r8
    6d50:	7f 90       	pop	r7
    6d52:	6f 90       	pop	r6
    6d54:	5f 90       	pop	r5
    6d56:	4f 90       	pop	r4
    6d58:	3f 90       	pop	r3
    6d5a:	2f 90       	pop	r2
    6d5c:	08 95       	ret

00006d5e <TIMER2_VidInitialize>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER2_VidInitialize (void) {
    6d5e:	df 93       	push	r29
    6d60:	cf 93       	push	r28
    6d62:	cd b7       	in	r28, 0x3d	; 61
    6d64:	de b7       	in	r29, 0x3e	; 62
	//define pin of timer 2
	DIO_VidSetPinDirection(3,7,1);
    6d66:	83 e0       	ldi	r24, 0x03	; 3
    6d68:	67 e0       	ldi	r22, 0x07	; 7
    6d6a:	41 e0       	ldi	r20, 0x01	; 1
    6d6c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,7,0);
    6d70:	83 e0       	ldi	r24, 0x03	; 3
    6d72:	67 e0       	ldi	r22, 0x07	; 7
    6d74:	40 e0       	ldi	r20, 0x00	; 0
    6d76:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
	SET_BIT(TIMSK,OCIE2);
#endif

#if TIMER2_MODE == FAST_PWM
	// to initialize timer0 on 0 , FOCO = 0
	TCCR2 = 0 ;
    6d7a:	e5 e4       	ldi	r30, 0x45	; 69
    6d7c:	f0 e0       	ldi	r31, 0x00	; 0
    6d7e:	10 82       	st	Z, r1

	// 1 1 Fast PWM
	SET_BIT(TCCR2,WGM20);
    6d80:	a5 e4       	ldi	r26, 0x45	; 69
    6d82:	b0 e0       	ldi	r27, 0x00	; 0
    6d84:	e5 e4       	ldi	r30, 0x45	; 69
    6d86:	f0 e0       	ldi	r31, 0x00	; 0
    6d88:	80 81       	ld	r24, Z
    6d8a:	80 64       	ori	r24, 0x40	; 64
    6d8c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    6d8e:	a5 e4       	ldi	r26, 0x45	; 69
    6d90:	b0 e0       	ldi	r27, 0x00	; 0
    6d92:	e5 e4       	ldi	r30, 0x45	; 69
    6d94:	f0 e0       	ldi	r31, 0x00	; 0
    6d96:	80 81       	ld	r24, Z
    6d98:	88 60       	ori	r24, 0x08	; 8
    6d9a:	8c 93       	st	X, r24

	//1 0 Clear OC0 on compare match, set OC0 at TOP ,  NON_INVERED MODE PWM
	SET_BIT(TCCR2,COM21);
    6d9c:	a5 e4       	ldi	r26, 0x45	; 69
    6d9e:	b0 e0       	ldi	r27, 0x00	; 0
    6da0:	e5 e4       	ldi	r30, 0x45	; 69
    6da2:	f0 e0       	ldi	r31, 0x00	; 0
    6da4:	80 81       	ld	r24, Z
    6da6:	80 62       	ori	r24, 0x20	; 32
    6da8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,COM20);
    6daa:	a5 e4       	ldi	r26, 0x45	; 69
    6dac:	b0 e0       	ldi	r27, 0x00	; 0
    6dae:	e5 e4       	ldi	r30, 0x45	; 69
    6db0:	f0 e0       	ldi	r31, 0x00	; 0
    6db2:	80 81       	ld	r24, Z
    6db4:	8f 7e       	andi	r24, 0xEF	; 239
    6db6:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER2 == NO_PRE
	CLR_BIT(TCCR2,CS22);
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
#elif PRE_TYPE_TIMER2 == PRE_8
	CLR_BIT(TCCR2,CS22);
    6db8:	a5 e4       	ldi	r26, 0x45	; 69
    6dba:	b0 e0       	ldi	r27, 0x00	; 0
    6dbc:	e5 e4       	ldi	r30, 0x45	; 69
    6dbe:	f0 e0       	ldi	r31, 0x00	; 0
    6dc0:	80 81       	ld	r24, Z
    6dc2:	8b 7f       	andi	r24, 0xFB	; 251
    6dc4:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    6dc6:	a5 e4       	ldi	r26, 0x45	; 69
    6dc8:	b0 e0       	ldi	r27, 0x00	; 0
    6dca:	e5 e4       	ldi	r30, 0x45	; 69
    6dcc:	f0 e0       	ldi	r31, 0x00	; 0
    6dce:	80 81       	ld	r24, Z
    6dd0:	82 60       	ori	r24, 0x02	; 2
    6dd2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS20);
    6dd4:	a5 e4       	ldi	r26, 0x45	; 69
    6dd6:	b0 e0       	ldi	r27, 0x00	; 0
    6dd8:	e5 e4       	ldi	r30, 0x45	; 69
    6dda:	f0 e0       	ldi	r31, 0x00	; 0
    6ddc:	80 81       	ld	r24, Z
    6dde:	8e 7f       	andi	r24, 0xFE	; 254
    6de0:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER2 = 8 ;
    6de2:	88 e0       	ldi	r24, 0x08	; 8
    6de4:	90 e0       	ldi	r25, 0x00	; 0
    6de6:	90 93 c7 01 	sts	0x01C7, r25
    6dea:	80 93 c6 01 	sts	0x01C6, r24
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
	PRE_SCALAR_TIMER2 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    6dee:	cf 91       	pop	r28
    6df0:	df 91       	pop	r29
    6df2:	08 95       	ret

00006df4 <Timer2_VidSETDUTY>:


//to check that you use FAST_PWM mode
#if TIMER2_MODE == FAST_PWM

void Timer2_VidSETDUTY (u8 duty ) {
    6df4:	df 93       	push	r29
    6df6:	cf 93       	push	r28
    6df8:	0f 92       	push	r0
    6dfa:	cd b7       	in	r28, 0x3d	; 61
    6dfc:	de b7       	in	r29, 0x3e	; 62
    6dfe:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    6e00:	89 81       	ldd	r24, Y+1	; 0x01
    6e02:	48 2f       	mov	r20, r24
    6e04:	50 e0       	ldi	r21, 0x00	; 0
    6e06:	ca 01       	movw	r24, r20
    6e08:	9c 01       	movw	r18, r24
    6e0a:	22 0f       	add	r18, r18
    6e0c:	33 1f       	adc	r19, r19
    6e0e:	c9 01       	movw	r24, r18
    6e10:	96 95       	lsr	r25
    6e12:	98 2f       	mov	r25, r24
    6e14:	88 27       	eor	r24, r24
    6e16:	97 95       	ror	r25
    6e18:	87 95       	ror	r24
    6e1a:	82 1b       	sub	r24, r18
    6e1c:	93 0b       	sbc	r25, r19
    6e1e:	84 0f       	add	r24, r20
    6e20:	95 1f       	adc	r25, r21
    6e22:	24 e6       	ldi	r18, 0x64	; 100
    6e24:	30 e0       	ldi	r19, 0x00	; 0
    6e26:	b9 01       	movw	r22, r18
    6e28:	0e 94 f6 39 	call	0x73ec	; 0x73ec <__udivmodhi4>
    6e2c:	cb 01       	movw	r24, r22
    6e2e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = duty ;
    6e30:	e3 e4       	ldi	r30, 0x43	; 67
    6e32:	f0 e0       	ldi	r31, 0x00	; 0
    6e34:	89 81       	ldd	r24, Y+1	; 0x01
    6e36:	80 83       	st	Z, r24
}
    6e38:	0f 90       	pop	r0
    6e3a:	cf 91       	pop	r28
    6e3c:	df 91       	pop	r29
    6e3e:	08 95       	ret

00006e40 <__vector_11>:
    4) PRE_256  every 1sec need t_ov = 8.192ms  , num_ov = 122.0703125 , pre_load = 0.0703125
    5) PRE_1024 every 1sec need t_ov = 32.768ms , num_ov = 30.51757813 , pre_load = 0.51757813
*/

/****************************************************************************/
void __vector_11(void){
    6e40:	1f 92       	push	r1
    6e42:	0f 92       	push	r0
    6e44:	0f b6       	in	r0, 0x3f	; 63
    6e46:	0f 92       	push	r0
    6e48:	11 24       	eor	r1, r1
    6e4a:	0f 93       	push	r16
    6e4c:	1f 93       	push	r17
    6e4e:	2f 93       	push	r18
    6e50:	3f 93       	push	r19
    6e52:	4f 93       	push	r20
    6e54:	5f 93       	push	r21
    6e56:	6f 93       	push	r22
    6e58:	7f 93       	push	r23
    6e5a:	8f 93       	push	r24
    6e5c:	9f 93       	push	r25
    6e5e:	af 93       	push	r26
    6e60:	bf 93       	push	r27
    6e62:	ef 93       	push	r30
    6e64:	ff 93       	push	r31
    6e66:	df 93       	push	r29
    6e68:	cf 93       	push	r28
    6e6a:	cd b7       	in	r28, 0x3d	; 61
    6e6c:	de b7       	in	r29, 0x3e	; 62
	static u32 tick = 0 ;
	tick++ ;
    6e6e:	80 91 9a 01 	lds	r24, 0x019A
    6e72:	90 91 9b 01 	lds	r25, 0x019B
    6e76:	a0 91 9c 01 	lds	r26, 0x019C
    6e7a:	b0 91 9d 01 	lds	r27, 0x019D
    6e7e:	01 96       	adiw	r24, 0x01	; 1
    6e80:	a1 1d       	adc	r26, r1
    6e82:	b1 1d       	adc	r27, r1
    6e84:	80 93 9a 01 	sts	0x019A, r24
    6e88:	90 93 9b 01 	sts	0x019B, r25
    6e8c:	a0 93 9c 01 	sts	0x019C, r26
    6e90:	b0 93 9d 01 	sts	0x019D, r27

	if (tick == (u32)NUM_OV_TIMER0 ){
    6e94:	80 91 ac 01 	lds	r24, 0x01AC
    6e98:	90 91 ad 01 	lds	r25, 0x01AD
    6e9c:	a0 91 ae 01 	lds	r26, 0x01AE
    6ea0:	b0 91 af 01 	lds	r27, 0x01AF
    6ea4:	bc 01       	movw	r22, r24
    6ea6:	cd 01       	movw	r24, r26
    6ea8:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6eac:	9b 01       	movw	r18, r22
    6eae:	ac 01       	movw	r20, r24
    6eb0:	80 91 9a 01 	lds	r24, 0x019A
    6eb4:	90 91 9b 01 	lds	r25, 0x019B
    6eb8:	a0 91 9c 01 	lds	r26, 0x019C
    6ebc:	b0 91 9d 01 	lds	r27, 0x019D
    6ec0:	28 17       	cp	r18, r24
    6ec2:	39 07       	cpc	r19, r25
    6ec4:	4a 07       	cpc	r20, r26
    6ec6:	5b 07       	cpc	r21, r27
    6ec8:	99 f5       	brne	.+102    	; 0x6f30 <__vector_11+0xf0>
		TIMER0_PFUNC();                                     //to toggle led
    6eca:	e0 91 94 01 	lds	r30, 0x0194
    6ece:	f0 91 95 01 	lds	r31, 0x0195
    6ed2:	09 95       	icall
		TCNT0 = 256-(256*PRE_LOAD_TIMER0);                         //to begin from specific value
    6ed4:	02 e5       	ldi	r16, 0x52	; 82
    6ed6:	10 e0       	ldi	r17, 0x00	; 0
    6ed8:	80 91 b0 01 	lds	r24, 0x01B0
    6edc:	90 91 b1 01 	lds	r25, 0x01B1
    6ee0:	a0 91 b2 01 	lds	r26, 0x01B2
    6ee4:	b0 91 b3 01 	lds	r27, 0x01B3
    6ee8:	bc 01       	movw	r22, r24
    6eea:	cd 01       	movw	r24, r26
    6eec:	20 e0       	ldi	r18, 0x00	; 0
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	40 e8       	ldi	r20, 0x80	; 128
    6ef2:	53 ec       	ldi	r21, 0xC3	; 195
    6ef4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6ef8:	dc 01       	movw	r26, r24
    6efa:	cb 01       	movw	r24, r22
    6efc:	bc 01       	movw	r22, r24
    6efe:	cd 01       	movw	r24, r26
    6f00:	20 e0       	ldi	r18, 0x00	; 0
    6f02:	30 e0       	ldi	r19, 0x00	; 0
    6f04:	40 e8       	ldi	r20, 0x80	; 128
    6f06:	53 e4       	ldi	r21, 0x43	; 67
    6f08:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__addsf3>
    6f0c:	dc 01       	movw	r26, r24
    6f0e:	cb 01       	movw	r24, r22
    6f10:	bc 01       	movw	r22, r24
    6f12:	cd 01       	movw	r24, r26
    6f14:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6f18:	dc 01       	movw	r26, r24
    6f1a:	cb 01       	movw	r24, r22
    6f1c:	f8 01       	movw	r30, r16
    6f1e:	80 83       	st	Z, r24
		tick = 0 ;                                          //to start count from beginning again
    6f20:	10 92 9a 01 	sts	0x019A, r1
    6f24:	10 92 9b 01 	sts	0x019B, r1
    6f28:	10 92 9c 01 	sts	0x019C, r1
    6f2c:	10 92 9d 01 	sts	0x019D, r1
	}//end if
}//end ISR FUNC
    6f30:	cf 91       	pop	r28
    6f32:	df 91       	pop	r29
    6f34:	ff 91       	pop	r31
    6f36:	ef 91       	pop	r30
    6f38:	bf 91       	pop	r27
    6f3a:	af 91       	pop	r26
    6f3c:	9f 91       	pop	r25
    6f3e:	8f 91       	pop	r24
    6f40:	7f 91       	pop	r23
    6f42:	6f 91       	pop	r22
    6f44:	5f 91       	pop	r21
    6f46:	4f 91       	pop	r20
    6f48:	3f 91       	pop	r19
    6f4a:	2f 91       	pop	r18
    6f4c:	1f 91       	pop	r17
    6f4e:	0f 91       	pop	r16
    6f50:	0f 90       	pop	r0
    6f52:	0f be       	out	0x3f, r0	; 63
    6f54:	0f 90       	pop	r0
    6f56:	1f 90       	pop	r1
    6f58:	18 95       	reti

00006f5a <__vector_5>:
//	}//end if
//}//end ISR FUNC
//


void __vector_5(void){
    6f5a:	1f 92       	push	r1
    6f5c:	0f 92       	push	r0
    6f5e:	0f b6       	in	r0, 0x3f	; 63
    6f60:	0f 92       	push	r0
    6f62:	11 24       	eor	r1, r1
    6f64:	2f 93       	push	r18
    6f66:	3f 93       	push	r19
    6f68:	4f 93       	push	r20
    6f6a:	5f 93       	push	r21
    6f6c:	6f 93       	push	r22
    6f6e:	7f 93       	push	r23
    6f70:	8f 93       	push	r24
    6f72:	9f 93       	push	r25
    6f74:	af 93       	push	r26
    6f76:	bf 93       	push	r27
    6f78:	ef 93       	push	r30
    6f7a:	ff 93       	push	r31
    6f7c:	df 93       	push	r29
    6f7e:	cf 93       	push	r28
    6f80:	cd b7       	in	r28, 0x3d	; 61
    6f82:	de b7       	in	r29, 0x3e	; 62
//	static u32 tick = 0 ;
//	tick++ ;

//	if (tick == (u32)NUM_OV_TIMER2 ){
		TIMER2_PFUNC();                                     //to toggle led
    6f84:	e0 91 98 01 	lds	r30, 0x0198
    6f88:	f0 91 99 01 	lds	r31, 0x0199
    6f8c:	09 95       	icall
//		TCNT2 = 256-(256*PRE_LOAD_TIMER2);                         //to begin from specific value
//		tick = 0 ;                                          //to start count from beginning again
	}//end if
    6f8e:	cf 91       	pop	r28
    6f90:	df 91       	pop	r29
    6f92:	ff 91       	pop	r31
    6f94:	ef 91       	pop	r30
    6f96:	bf 91       	pop	r27
    6f98:	af 91       	pop	r26
    6f9a:	9f 91       	pop	r25
    6f9c:	8f 91       	pop	r24
    6f9e:	7f 91       	pop	r23
    6fa0:	6f 91       	pop	r22
    6fa2:	5f 91       	pop	r21
    6fa4:	4f 91       	pop	r20
    6fa6:	3f 91       	pop	r19
    6fa8:	2f 91       	pop	r18
    6faa:	0f 90       	pop	r0
    6fac:	0f be       	out	0x3f, r0	; 63
    6fae:	0f 90       	pop	r0
    6fb0:	1f 90       	pop	r1
    6fb2:	18 95       	reti

00006fb4 <__vector_9>:



/********************************************************************************/

void __vector_9(void){
    6fb4:	1f 92       	push	r1
    6fb6:	0f 92       	push	r0
    6fb8:	0f b6       	in	r0, 0x3f	; 63
    6fba:	0f 92       	push	r0
    6fbc:	11 24       	eor	r1, r1
    6fbe:	df 93       	push	r29
    6fc0:	cf 93       	push	r28
    6fc2:	cd b7       	in	r28, 0x3d	; 61
    6fc4:	de b7       	in	r29, 0x3e	; 62
/*****************************************/
}//end ISR FUNC
    6fc6:	cf 91       	pop	r28
    6fc8:	df 91       	pop	r29
    6fca:	0f 90       	pop	r0
    6fcc:	0f be       	out	0x3f, r0	; 63
    6fce:	0f 90       	pop	r0
    6fd0:	1f 90       	pop	r1
    6fd2:	18 95       	reti

00006fd4 <__vector_6>:

/********************************************************************************/
void __vector_6(void){
    6fd4:	1f 92       	push	r1
    6fd6:	0f 92       	push	r0
    6fd8:	0f b6       	in	r0, 0x3f	; 63
    6fda:	0f 92       	push	r0
    6fdc:	11 24       	eor	r1, r1
    6fde:	df 93       	push	r29
    6fe0:	cf 93       	push	r28
    6fe2:	cd b7       	in	r28, 0x3d	; 61
    6fe4:	de b7       	in	r29, 0x3e	; 62
/*****************************************/
}
    6fe6:	cf 91       	pop	r28
    6fe8:	df 91       	pop	r29
    6fea:	0f 90       	pop	r0
    6fec:	0f be       	out	0x3f, r0	; 63
    6fee:	0f 90       	pop	r0
    6ff0:	1f 90       	pop	r1
    6ff2:	18 95       	reti

00006ff4 <fan_controllerint>:
#include "fan_controller.h"


u8 duty=0;
void fan_controllerint()
{
    6ff4:	df 93       	push	r29
    6ff6:	cf 93       	push	r28
    6ff8:	cd b7       	in	r28, 0x3d	; 61
    6ffa:	de b7       	in	r29, 0x3e	; 62
		    ADC_VidInit();
    6ffc:	0e 94 f5 15 	call	0x2bea	; 0x2bea <ADC_VidInit>
			//LCD_VidInitiallization();
		    LCD_Init();
    7000:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <LCD_Init>
			//DcMotor_VidInit();
			TIMER0_VidInitialize();
    7004:	0e 94 40 34 	call	0x6880	; 0x6880 <TIMER0_VidInitialize>
			TIMER2_VidInitialize();
    7008:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <TIMER2_VidInitialize>

			DIO_VidSetPinDirection(BUZZER_PORT,BUZZER_PIN,HIGH);
    700c:	82 e0       	ldi	r24, 0x02	; 2
    700e:	61 e0       	ldi	r22, 0x01	; 1
    7010:	41 e0       	ldi	r20, 0x01	; 1
    7012:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
			DIO_VidSetPinDirection(LED_PORT,GREEN_PIN,HIGH);
    7016:	83 e0       	ldi	r24, 0x03	; 3
    7018:	64 e0       	ldi	r22, 0x04	; 4
    701a:	41 e0       	ldi	r20, 0x01	; 1
    701c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
			DIO_VidSetPinDirection(LED_PORT,YELLOW_PIN,HIGH);
    7020:	83 e0       	ldi	r24, 0x03	; 3
    7022:	65 e0       	ldi	r22, 0x05	; 5
    7024:	41 e0       	ldi	r20, 0x01	; 1
    7026:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>
			DIO_VidSetPinDirection(LED_PORT,RED_PIN,HIGH);
    702a:	83 e0       	ldi	r24, 0x03	; 3
    702c:	66 e0       	ldi	r22, 0x06	; 6
    702e:	41 e0       	ldi	r20, 0x01	; 1
    7030:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <DIO_VidSetPinDirection>

			DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,0);
    7034:	82 e0       	ldi	r24, 0x02	; 2
    7036:	61 e0       	ldi	r22, 0x01	; 1
    7038:	40 e0       	ldi	r20, 0x00	; 0
    703a:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,RED_PIN,0);
    703e:	83 e0       	ldi	r24, 0x03	; 3
    7040:	66 e0       	ldi	r22, 0x06	; 6
    7042:	40 e0       	ldi	r20, 0x00	; 0
    7044:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,YELLOW_PIN,0);
    7048:	83 e0       	ldi	r24, 0x03	; 3
    704a:	65 e0       	ldi	r22, 0x05	; 5
    704c:	40 e0       	ldi	r20, 0x00	; 0
    704e:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,GREEN_PIN,0);
    7052:	83 e0       	ldi	r24, 0x03	; 3
    7054:	64 e0       	ldi	r22, 0x04	; 4
    7056:	40 e0       	ldi	r20, 0x00	; 0
    7058:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>

}
    705c:	cf 91       	pop	r28
    705e:	df 91       	pop	r29
    7060:	08 95       	ret

00007062 <LM35_U16_ReadTemp>:

u16 LM35_U16_ReadTemp()
{
    7062:	df 93       	push	r29
    7064:	cf 93       	push	r28
    7066:	cd b7       	in	r28, 0x3d	; 61
    7068:	de b7       	in	r29, 0x3e	; 62
		//return (u16)OneWireTemp();
		return ADC_VidReadChannel(chanel_0)/10;
    706a:	80 e0       	ldi	r24, 0x00	; 0
    706c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <ADC_VidReadChannel>
    7070:	2a e0       	ldi	r18, 0x0A	; 10
    7072:	30 e0       	ldi	r19, 0x00	; 0
    7074:	b9 01       	movw	r22, r18
    7076:	0e 94 f6 39 	call	0x73ec	; 0x73ec <__udivmodhi4>
    707a:	cb 01       	movw	r24, r22
}
    707c:	cf 91       	pop	r28
    707e:	df 91       	pop	r29
    7080:	08 95       	ret

00007082 <check_thetemp>:


void check_thetemp(u16 temp)
{
    7082:	af 92       	push	r10
    7084:	bf 92       	push	r11
    7086:	cf 92       	push	r12
    7088:	df 92       	push	r13
    708a:	ef 92       	push	r14
    708c:	ff 92       	push	r15
    708e:	0f 93       	push	r16
    7090:	1f 93       	push	r17
    7092:	df 93       	push	r29
    7094:	cf 93       	push	r28
    7096:	00 d0       	rcall	.+0      	; 0x7098 <check_thetemp+0x16>
    7098:	cd b7       	in	r28, 0x3d	; 61
    709a:	de b7       	in	r29, 0x3e	; 62
    709c:	9a 83       	std	Y+2, r25	; 0x02
    709e:	89 83       	std	Y+1, r24	; 0x01
	//check for the temp
	duty = map(temp,17, 25, 75, 100);
    70a0:	89 81       	ldd	r24, Y+1	; 0x01
    70a2:	9a 81       	ldd	r25, Y+2	; 0x02
    70a4:	9c 01       	movw	r18, r24
    70a6:	40 e0       	ldi	r20, 0x00	; 0
    70a8:	50 e0       	ldi	r21, 0x00	; 0
    70aa:	00 d0       	rcall	.+0      	; 0x70ac <check_thetemp+0x2a>
    70ac:	00 d0       	rcall	.+0      	; 0x70ae <check_thetemp+0x2c>
    70ae:	ed b7       	in	r30, 0x3d	; 61
    70b0:	fe b7       	in	r31, 0x3e	; 62
    70b2:	31 96       	adiw	r30, 0x01	; 1
    70b4:	84 e6       	ldi	r24, 0x64	; 100
    70b6:	90 e0       	ldi	r25, 0x00	; 0
    70b8:	a0 e0       	ldi	r26, 0x00	; 0
    70ba:	b0 e0       	ldi	r27, 0x00	; 0
    70bc:	80 83       	st	Z, r24
    70be:	91 83       	std	Z+1, r25	; 0x01
    70c0:	a2 83       	std	Z+2, r26	; 0x02
    70c2:	b3 83       	std	Z+3, r27	; 0x03
    70c4:	ca 01       	movw	r24, r20
    70c6:	b9 01       	movw	r22, r18
    70c8:	21 e1       	ldi	r18, 0x11	; 17
    70ca:	30 e0       	ldi	r19, 0x00	; 0
    70cc:	40 e0       	ldi	r20, 0x00	; 0
    70ce:	50 e0       	ldi	r21, 0x00	; 0
    70d0:	0f 2e       	mov	r0, r31
    70d2:	f9 e1       	ldi	r31, 0x19	; 25
    70d4:	ef 2e       	mov	r14, r31
    70d6:	f0 e0       	ldi	r31, 0x00	; 0
    70d8:	ff 2e       	mov	r15, r31
    70da:	f0 e0       	ldi	r31, 0x00	; 0
    70dc:	0f 2f       	mov	r16, r31
    70de:	f0 e0       	ldi	r31, 0x00	; 0
    70e0:	1f 2f       	mov	r17, r31
    70e2:	f0 2d       	mov	r31, r0
    70e4:	0f 2e       	mov	r0, r31
    70e6:	fb e4       	ldi	r31, 0x4B	; 75
    70e8:	af 2e       	mov	r10, r31
    70ea:	f0 e0       	ldi	r31, 0x00	; 0
    70ec:	bf 2e       	mov	r11, r31
    70ee:	f0 e0       	ldi	r31, 0x00	; 0
    70f0:	cf 2e       	mov	r12, r31
    70f2:	f0 e0       	ldi	r31, 0x00	; 0
    70f4:	df 2e       	mov	r13, r31
    70f6:	f0 2d       	mov	r31, r0
    70f8:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <map>
    70fc:	0f 90       	pop	r0
    70fe:	0f 90       	pop	r0
    7100:	0f 90       	pop	r0
    7102:	0f 90       	pop	r0
    7104:	dc 01       	movw	r26, r24
    7106:	cb 01       	movw	r24, r22
    7108:	80 93 d4 01 	sts	0x01D4, r24
	duty = constrain(duty,75,100);
    710c:	80 91 d4 01 	lds	r24, 0x01D4
    7110:	88 2f       	mov	r24, r24
    7112:	90 e0       	ldi	r25, 0x00	; 0
    7114:	a0 e0       	ldi	r26, 0x00	; 0
    7116:	b0 e0       	ldi	r27, 0x00	; 0
    7118:	bc 01       	movw	r22, r24
    711a:	cd 01       	movw	r24, r26
    711c:	0e 94 87 13 	call	0x270e	; 0x270e <__floatunsisf>
    7120:	dc 01       	movw	r26, r24
    7122:	cb 01       	movw	r24, r22
    7124:	bc 01       	movw	r22, r24
    7126:	cd 01       	movw	r24, r26
    7128:	20 e0       	ldi	r18, 0x00	; 0
    712a:	30 e0       	ldi	r19, 0x00	; 0
    712c:	46 e9       	ldi	r20, 0x96	; 150
    712e:	52 e4       	ldi	r21, 0x42	; 66
    7130:	0f 2e       	mov	r0, r31
    7132:	f0 e0       	ldi	r31, 0x00	; 0
    7134:	ef 2e       	mov	r14, r31
    7136:	f0 e0       	ldi	r31, 0x00	; 0
    7138:	ff 2e       	mov	r15, r31
    713a:	f8 ec       	ldi	r31, 0xC8	; 200
    713c:	0f 2f       	mov	r16, r31
    713e:	f2 e4       	ldi	r31, 0x42	; 66
    7140:	1f 2f       	mov	r17, r31
    7142:	f0 2d       	mov	r31, r0
    7144:	0e 94 c4 1a 	call	0x3588	; 0x3588 <constrain>
    7148:	dc 01       	movw	r26, r24
    714a:	cb 01       	movw	r24, r22
    714c:	bc 01       	movw	r22, r24
    714e:	cd 01       	movw	r24, r26
    7150:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    7154:	dc 01       	movw	r26, r24
    7156:	cb 01       	movw	r24, r22
    7158:	80 93 d4 01 	sts	0x01D4, r24
	LCD_Command (0x80);		/* Cursor at home position */
    715c:	80 e8       	ldi	r24, 0x80	; 128
    715e:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
	LCD_String("Temp=");
    7162:	80 e6       	ldi	r24, 0x60	; 96
    7164:	90 e0       	ldi	r25, 0x00	; 0
    7166:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <LCD_String>
	LCD_SendNum(temp);
    716a:	89 81       	ldd	r24, Y+1	; 0x01
    716c:	9a 81       	ldd	r25, Y+2	; 0x02
    716e:	cc 01       	movw	r24, r24
    7170:	a0 e0       	ldi	r26, 0x00	; 0
    7172:	b0 e0       	ldi	r27, 0x00	; 0
    7174:	bc 01       	movw	r22, r24
    7176:	cd 01       	movw	r24, r26
    7178:	0e 94 e4 2f 	call	0x5fc8	; 0x5fc8 <LCD_SendNum>
	LCD_String("C   ");
    717c:	86 e6       	ldi	r24, 0x66	; 102
    717e:	90 e0       	ldi	r25, 0x00	; 0
    7180:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <LCD_String>
	LCD_Command(0xC0);		/* Go to 2nd line*/
    7184:	80 ec       	ldi	r24, 0xC0	; 192
    7186:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>

		if (temp >= 25 )
    718a:	89 81       	ldd	r24, Y+1	; 0x01
    718c:	9a 81       	ldd	r25, Y+2	; 0x02
    718e:	89 31       	cpi	r24, 0x19	; 25
    7190:	91 05       	cpc	r25, r1
    7192:	e0 f0       	brcs	.+56     	; 0x71cc <check_thetemp+0x14a>
		{
			duty = 100 ;
    7194:	84 e6       	ldi	r24, 0x64	; 100
    7196:	80 93 d4 01 	sts	0x01D4, r24

			DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,1);
    719a:	82 e0       	ldi	r24, 0x02	; 2
    719c:	61 e0       	ldi	r22, 0x01	; 1
    719e:	41 e0       	ldi	r20, 0x01	; 1
    71a0:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,RED_PIN,1);
    71a4:	83 e0       	ldi	r24, 0x03	; 3
    71a6:	66 e0       	ldi	r22, 0x06	; 6
    71a8:	41 e0       	ldi	r20, 0x01	; 1
    71aa:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,YELLOW_PIN,0);
    71ae:	83 e0       	ldi	r24, 0x03	; 3
    71b0:	65 e0       	ldi	r22, 0x05	; 5
    71b2:	40 e0       	ldi	r20, 0x00	; 0
    71b4:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,GREEN_PIN,0);
    71b8:	83 e0       	ldi	r24, 0x03	; 3
    71ba:	64 e0       	ldi	r22, 0x04	; 4
    71bc:	40 e0       	ldi	r20, 0x00	; 0
    71be:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>

			Timer2_VidSETDUTY(duty);
    71c2:	80 91 d4 01 	lds	r24, 0x01D4
    71c6:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <Timer2_VidSETDUTY>
    71ca:	3a c0       	rjmp	.+116    	; 0x7240 <check_thetemp+0x1be>
		}
		else if (temp >=17 && temp<25)
    71cc:	89 81       	ldd	r24, Y+1	; 0x01
    71ce:	9a 81       	ldd	r25, Y+2	; 0x02
    71d0:	81 31       	cpi	r24, 0x11	; 17
    71d2:	91 05       	cpc	r25, r1
    71d4:	d0 f0       	brcs	.+52     	; 0x720a <check_thetemp+0x188>
    71d6:	89 81       	ldd	r24, Y+1	; 0x01
    71d8:	9a 81       	ldd	r25, Y+2	; 0x02
    71da:	89 31       	cpi	r24, 0x19	; 25
    71dc:	91 05       	cpc	r25, r1
    71de:	a8 f4       	brcc	.+42     	; 0x720a <check_thetemp+0x188>
		{

			DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,0);
    71e0:	82 e0       	ldi	r24, 0x02	; 2
    71e2:	61 e0       	ldi	r22, 0x01	; 1
    71e4:	40 e0       	ldi	r20, 0x00	; 0
    71e6:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,RED_PIN,0);
    71ea:	83 e0       	ldi	r24, 0x03	; 3
    71ec:	66 e0       	ldi	r22, 0x06	; 6
    71ee:	40 e0       	ldi	r20, 0x00	; 0
    71f0:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,YELLOW_PIN,1);
    71f4:	83 e0       	ldi	r24, 0x03	; 3
    71f6:	65 e0       	ldi	r22, 0x05	; 5
    71f8:	41 e0       	ldi	r20, 0x01	; 1
    71fa:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,GREEN_PIN,0);
    71fe:	83 e0       	ldi	r24, 0x03	; 3
    7200:	64 e0       	ldi	r22, 0x04	; 4
    7202:	40 e0       	ldi	r20, 0x00	; 0
    7204:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
    7208:	1b c0       	rjmp	.+54     	; 0x7240 <check_thetemp+0x1be>


		}
		else if (temp<17)
    720a:	89 81       	ldd	r24, Y+1	; 0x01
    720c:	9a 81       	ldd	r25, Y+2	; 0x02
    720e:	81 31       	cpi	r24, 0x11	; 17
    7210:	91 05       	cpc	r25, r1
    7212:	b0 f4       	brcc	.+44     	; 0x7240 <check_thetemp+0x1be>
		{
			duty=0;
    7214:	10 92 d4 01 	sts	0x01D4, r1

			DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,0);
    7218:	82 e0       	ldi	r24, 0x02	; 2
    721a:	61 e0       	ldi	r22, 0x01	; 1
    721c:	40 e0       	ldi	r20, 0x00	; 0
    721e:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,RED_PIN,0);
    7222:	83 e0       	ldi	r24, 0x03	; 3
    7224:	66 e0       	ldi	r22, 0x06	; 6
    7226:	40 e0       	ldi	r20, 0x00	; 0
    7228:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,YELLOW_PIN,0);
    722c:	83 e0       	ldi	r24, 0x03	; 3
    722e:	65 e0       	ldi	r22, 0x05	; 5
    7230:	40 e0       	ldi	r20, 0x00	; 0
    7232:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LED_PORT,GREEN_PIN,1);
    7236:	83 e0       	ldi	r24, 0x03	; 3
    7238:	64 e0       	ldi	r22, 0x04	; 4
    723a:	41 e0       	ldi	r20, 0x01	; 1
    723c:	0e 94 13 18 	call	0x3026	; 0x3026 <DIO_VidSetPinValue>


		}
		Timer2_VidSETDUTY(duty);
    7240:	80 91 d4 01 	lds	r24, 0x01D4
    7244:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <Timer2_VidSETDUTY>
		LCD_String("Speed=");
    7248:	8b e6       	ldi	r24, 0x6B	; 107
    724a:	90 e0       	ldi	r25, 0x00	; 0
    724c:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <LCD_String>
		LCD_SendNum(duty);
    7250:	80 91 d4 01 	lds	r24, 0x01D4
    7254:	88 2f       	mov	r24, r24
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	a0 e0       	ldi	r26, 0x00	; 0
    725a:	b0 e0       	ldi	r27, 0x00	; 0
    725c:	bc 01       	movw	r22, r24
    725e:	cd 01       	movw	r24, r26
    7260:	0e 94 e4 2f 	call	0x5fc8	; 0x5fc8 <LCD_SendNum>
		LCD_String("%   ");
    7264:	82 e7       	ldi	r24, 0x72	; 114
    7266:	90 e0       	ldi	r25, 0x00	; 0
    7268:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <LCD_String>
}
    726c:	0f 90       	pop	r0
    726e:	0f 90       	pop	r0
    7270:	cf 91       	pop	r28
    7272:	df 91       	pop	r29
    7274:	1f 91       	pop	r17
    7276:	0f 91       	pop	r16
    7278:	ff 90       	pop	r15
    727a:	ef 90       	pop	r14
    727c:	df 90       	pop	r13
    727e:	cf 90       	pop	r12
    7280:	bf 90       	pop	r11
    7282:	af 90       	pop	r10
    7284:	08 95       	ret

00007286 <main>:

#include "fan_controller.h"
#include <util/delay.h>

int main()
{
    7286:	df 93       	push	r29
    7288:	cf 93       	push	r28
    728a:	cd b7       	in	r28, 0x3d	; 61
    728c:	de b7       	in	r29, 0x3e	; 62
    728e:	60 97       	sbiw	r28, 0x10	; 16
    7290:	0f b6       	in	r0, 0x3f	; 63
    7292:	f8 94       	cli
    7294:	de bf       	out	0x3e, r29	; 62
    7296:	0f be       	out	0x3f, r0	; 63
    7298:	cd bf       	out	0x3d, r28	; 61
	u16 temp;
	fan_controllerint();
    729a:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <fan_controllerint>
	LCD_String("Fan Controller");	/* Write string on 1st line of LCD*/
    729e:	87 e7       	ldi	r24, 0x77	; 119
    72a0:	90 e0       	ldi	r25, 0x00	; 0
    72a2:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <LCD_String>
	LCD_Command(0xC0);				/* Go to 2nd line*/
    72a6:	80 ec       	ldi	r24, 0xC0	; 192
    72a8:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <LCD_Command>
	LCD_String("V1.0");				/* Write string on 2nd line*/
    72ac:	86 e8       	ldi	r24, 0x86	; 134
    72ae:	90 e0       	ldi	r25, 0x00	; 0
    72b0:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <LCD_String>
    72b4:	80 e0       	ldi	r24, 0x00	; 0
    72b6:	90 e0       	ldi	r25, 0x00	; 0
    72b8:	aa e7       	ldi	r26, 0x7A	; 122
    72ba:	b4 e4       	ldi	r27, 0x44	; 68
    72bc:	8b 87       	std	Y+11, r24	; 0x0b
    72be:	9c 87       	std	Y+12, r25	; 0x0c
    72c0:	ad 87       	std	Y+13, r26	; 0x0d
    72c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    72c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    72c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    72c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    72ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    72cc:	20 e0       	ldi	r18, 0x00	; 0
    72ce:	30 e0       	ldi	r19, 0x00	; 0
    72d0:	4a ef       	ldi	r20, 0xFA	; 250
    72d2:	54 e4       	ldi	r21, 0x44	; 68
    72d4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    72d8:	dc 01       	movw	r26, r24
    72da:	cb 01       	movw	r24, r22
    72dc:	8f 83       	std	Y+7, r24	; 0x07
    72de:	98 87       	std	Y+8, r25	; 0x08
    72e0:	a9 87       	std	Y+9, r26	; 0x09
    72e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    72e4:	6f 81       	ldd	r22, Y+7	; 0x07
    72e6:	78 85       	ldd	r23, Y+8	; 0x08
    72e8:	89 85       	ldd	r24, Y+9	; 0x09
    72ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    72ec:	20 e0       	ldi	r18, 0x00	; 0
    72ee:	30 e0       	ldi	r19, 0x00	; 0
    72f0:	40 e8       	ldi	r20, 0x80	; 128
    72f2:	5f e3       	ldi	r21, 0x3F	; 63
    72f4:	0e 94 03 13 	call	0x2606	; 0x2606 <__ltsf2>
    72f8:	88 23       	and	r24, r24
    72fa:	2c f4       	brge	.+10     	; 0x7306 <main+0x80>
		__ticks = 1;
    72fc:	81 e0       	ldi	r24, 0x01	; 1
    72fe:	90 e0       	ldi	r25, 0x00	; 0
    7300:	9e 83       	std	Y+6, r25	; 0x06
    7302:	8d 83       	std	Y+5, r24	; 0x05
    7304:	3f c0       	rjmp	.+126    	; 0x7384 <main+0xfe>
	else if (__tmp > 65535)
    7306:	6f 81       	ldd	r22, Y+7	; 0x07
    7308:	78 85       	ldd	r23, Y+8	; 0x08
    730a:	89 85       	ldd	r24, Y+9	; 0x09
    730c:	9a 85       	ldd	r25, Y+10	; 0x0a
    730e:	20 e0       	ldi	r18, 0x00	; 0
    7310:	3f ef       	ldi	r19, 0xFF	; 255
    7312:	4f e7       	ldi	r20, 0x7F	; 127
    7314:	57 e4       	ldi	r21, 0x47	; 71
    7316:	0e 94 a3 12 	call	0x2546	; 0x2546 <__gtsf2>
    731a:	18 16       	cp	r1, r24
    731c:	4c f5       	brge	.+82     	; 0x7370 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    731e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7320:	7c 85       	ldd	r23, Y+12	; 0x0c
    7322:	8d 85       	ldd	r24, Y+13	; 0x0d
    7324:	9e 85       	ldd	r25, Y+14	; 0x0e
    7326:	20 e0       	ldi	r18, 0x00	; 0
    7328:	30 e0       	ldi	r19, 0x00	; 0
    732a:	40 e2       	ldi	r20, 0x20	; 32
    732c:	51 e4       	ldi	r21, 0x41	; 65
    732e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    7332:	dc 01       	movw	r26, r24
    7334:	cb 01       	movw	r24, r22
    7336:	bc 01       	movw	r22, r24
    7338:	cd 01       	movw	r24, r26
    733a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    733e:	dc 01       	movw	r26, r24
    7340:	cb 01       	movw	r24, r22
    7342:	9e 83       	std	Y+6, r25	; 0x06
    7344:	8d 83       	std	Y+5, r24	; 0x05
    7346:	0f c0       	rjmp	.+30     	; 0x7366 <main+0xe0>
    7348:	88 ec       	ldi	r24, 0xC8	; 200
    734a:	90 e0       	ldi	r25, 0x00	; 0
    734c:	9c 83       	std	Y+4, r25	; 0x04
    734e:	8b 83       	std	Y+3, r24	; 0x03
    7350:	8b 81       	ldd	r24, Y+3	; 0x03
    7352:	9c 81       	ldd	r25, Y+4	; 0x04
    7354:	01 97       	sbiw	r24, 0x01	; 1
    7356:	f1 f7       	brne	.-4      	; 0x7354 <main+0xce>
    7358:	9c 83       	std	Y+4, r25	; 0x04
    735a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    735c:	8d 81       	ldd	r24, Y+5	; 0x05
    735e:	9e 81       	ldd	r25, Y+6	; 0x06
    7360:	01 97       	sbiw	r24, 0x01	; 1
    7362:	9e 83       	std	Y+6, r25	; 0x06
    7364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7366:	8d 81       	ldd	r24, Y+5	; 0x05
    7368:	9e 81       	ldd	r25, Y+6	; 0x06
    736a:	00 97       	sbiw	r24, 0x00	; 0
    736c:	69 f7       	brne	.-38     	; 0x7348 <main+0xc2>
    736e:	14 c0       	rjmp	.+40     	; 0x7398 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7370:	6f 81       	ldd	r22, Y+7	; 0x07
    7372:	78 85       	ldd	r23, Y+8	; 0x08
    7374:	89 85       	ldd	r24, Y+9	; 0x09
    7376:	9a 85       	ldd	r25, Y+10	; 0x0a
    7378:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    737c:	dc 01       	movw	r26, r24
    737e:	cb 01       	movw	r24, r22
    7380:	9e 83       	std	Y+6, r25	; 0x06
    7382:	8d 83       	std	Y+5, r24	; 0x05
    7384:	8d 81       	ldd	r24, Y+5	; 0x05
    7386:	9e 81       	ldd	r25, Y+6	; 0x06
    7388:	9a 83       	std	Y+2, r25	; 0x02
    738a:	89 83       	std	Y+1, r24	; 0x01
    738c:	89 81       	ldd	r24, Y+1	; 0x01
    738e:	9a 81       	ldd	r25, Y+2	; 0x02
    7390:	01 97       	sbiw	r24, 0x01	; 1
    7392:	f1 f7       	brne	.-4      	; 0x7390 <main+0x10a>
    7394:	9a 83       	std	Y+2, r25	; 0x02
    7396:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_Clear();
    7398:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <LCD_Clear>
	while (1)
	{
		temp = LM35_U16_ReadTemp();
    739c:	0e 94 31 38 	call	0x7062	; 0x7062 <LM35_U16_ReadTemp>
    73a0:	98 8b       	std	Y+16, r25	; 0x10
    73a2:	8f 87       	std	Y+15, r24	; 0x0f
		check_thetemp(temp);
    73a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    73a6:	98 89       	ldd	r25, Y+16	; 0x10
    73a8:	0e 94 41 38 	call	0x7082	; 0x7082 <check_thetemp>
    73ac:	f7 cf       	rjmp	.-18     	; 0x739c <main+0x116>

000073ae <__mulsi3>:
    73ae:	62 9f       	mul	r22, r18
    73b0:	d0 01       	movw	r26, r0
    73b2:	73 9f       	mul	r23, r19
    73b4:	f0 01       	movw	r30, r0
    73b6:	82 9f       	mul	r24, r18
    73b8:	e0 0d       	add	r30, r0
    73ba:	f1 1d       	adc	r31, r1
    73bc:	64 9f       	mul	r22, r20
    73be:	e0 0d       	add	r30, r0
    73c0:	f1 1d       	adc	r31, r1
    73c2:	92 9f       	mul	r25, r18
    73c4:	f0 0d       	add	r31, r0
    73c6:	83 9f       	mul	r24, r19
    73c8:	f0 0d       	add	r31, r0
    73ca:	74 9f       	mul	r23, r20
    73cc:	f0 0d       	add	r31, r0
    73ce:	65 9f       	mul	r22, r21
    73d0:	f0 0d       	add	r31, r0
    73d2:	99 27       	eor	r25, r25
    73d4:	72 9f       	mul	r23, r18
    73d6:	b0 0d       	add	r27, r0
    73d8:	e1 1d       	adc	r30, r1
    73da:	f9 1f       	adc	r31, r25
    73dc:	63 9f       	mul	r22, r19
    73de:	b0 0d       	add	r27, r0
    73e0:	e1 1d       	adc	r30, r1
    73e2:	f9 1f       	adc	r31, r25
    73e4:	bd 01       	movw	r22, r26
    73e6:	cf 01       	movw	r24, r30
    73e8:	11 24       	eor	r1, r1
    73ea:	08 95       	ret

000073ec <__udivmodhi4>:
    73ec:	aa 1b       	sub	r26, r26
    73ee:	bb 1b       	sub	r27, r27
    73f0:	51 e1       	ldi	r21, 0x11	; 17
    73f2:	07 c0       	rjmp	.+14     	; 0x7402 <__udivmodhi4_ep>

000073f4 <__udivmodhi4_loop>:
    73f4:	aa 1f       	adc	r26, r26
    73f6:	bb 1f       	adc	r27, r27
    73f8:	a6 17       	cp	r26, r22
    73fa:	b7 07       	cpc	r27, r23
    73fc:	10 f0       	brcs	.+4      	; 0x7402 <__udivmodhi4_ep>
    73fe:	a6 1b       	sub	r26, r22
    7400:	b7 0b       	sbc	r27, r23

00007402 <__udivmodhi4_ep>:
    7402:	88 1f       	adc	r24, r24
    7404:	99 1f       	adc	r25, r25
    7406:	5a 95       	dec	r21
    7408:	a9 f7       	brne	.-22     	; 0x73f4 <__udivmodhi4_loop>
    740a:	80 95       	com	r24
    740c:	90 95       	com	r25
    740e:	bc 01       	movw	r22, r24
    7410:	cd 01       	movw	r24, r26
    7412:	08 95       	ret

00007414 <__divmodsi4>:
    7414:	97 fb       	bst	r25, 7
    7416:	09 2e       	mov	r0, r25
    7418:	05 26       	eor	r0, r21
    741a:	0e d0       	rcall	.+28     	; 0x7438 <__divmodsi4_neg1>
    741c:	57 fd       	sbrc	r21, 7
    741e:	04 d0       	rcall	.+8      	; 0x7428 <__divmodsi4_neg2>
    7420:	14 d0       	rcall	.+40     	; 0x744a <__udivmodsi4>
    7422:	0a d0       	rcall	.+20     	; 0x7438 <__divmodsi4_neg1>
    7424:	00 1c       	adc	r0, r0
    7426:	38 f4       	brcc	.+14     	; 0x7436 <__divmodsi4_exit>

00007428 <__divmodsi4_neg2>:
    7428:	50 95       	com	r21
    742a:	40 95       	com	r20
    742c:	30 95       	com	r19
    742e:	21 95       	neg	r18
    7430:	3f 4f       	sbci	r19, 0xFF	; 255
    7432:	4f 4f       	sbci	r20, 0xFF	; 255
    7434:	5f 4f       	sbci	r21, 0xFF	; 255

00007436 <__divmodsi4_exit>:
    7436:	08 95       	ret

00007438 <__divmodsi4_neg1>:
    7438:	f6 f7       	brtc	.-4      	; 0x7436 <__divmodsi4_exit>
    743a:	90 95       	com	r25
    743c:	80 95       	com	r24
    743e:	70 95       	com	r23
    7440:	61 95       	neg	r22
    7442:	7f 4f       	sbci	r23, 0xFF	; 255
    7444:	8f 4f       	sbci	r24, 0xFF	; 255
    7446:	9f 4f       	sbci	r25, 0xFF	; 255
    7448:	08 95       	ret

0000744a <__udivmodsi4>:
    744a:	a1 e2       	ldi	r26, 0x21	; 33
    744c:	1a 2e       	mov	r1, r26
    744e:	aa 1b       	sub	r26, r26
    7450:	bb 1b       	sub	r27, r27
    7452:	fd 01       	movw	r30, r26
    7454:	0d c0       	rjmp	.+26     	; 0x7470 <__udivmodsi4_ep>

00007456 <__udivmodsi4_loop>:
    7456:	aa 1f       	adc	r26, r26
    7458:	bb 1f       	adc	r27, r27
    745a:	ee 1f       	adc	r30, r30
    745c:	ff 1f       	adc	r31, r31
    745e:	a2 17       	cp	r26, r18
    7460:	b3 07       	cpc	r27, r19
    7462:	e4 07       	cpc	r30, r20
    7464:	f5 07       	cpc	r31, r21
    7466:	20 f0       	brcs	.+8      	; 0x7470 <__udivmodsi4_ep>
    7468:	a2 1b       	sub	r26, r18
    746a:	b3 0b       	sbc	r27, r19
    746c:	e4 0b       	sbc	r30, r20
    746e:	f5 0b       	sbc	r31, r21

00007470 <__udivmodsi4_ep>:
    7470:	66 1f       	adc	r22, r22
    7472:	77 1f       	adc	r23, r23
    7474:	88 1f       	adc	r24, r24
    7476:	99 1f       	adc	r25, r25
    7478:	1a 94       	dec	r1
    747a:	69 f7       	brne	.-38     	; 0x7456 <__udivmodsi4_loop>
    747c:	60 95       	com	r22
    747e:	70 95       	com	r23
    7480:	80 95       	com	r24
    7482:	90 95       	com	r25
    7484:	9b 01       	movw	r18, r22
    7486:	ac 01       	movw	r20, r24
    7488:	bd 01       	movw	r22, r26
    748a:	cf 01       	movw	r24, r30
    748c:	08 95       	ret

0000748e <__prologue_saves__>:
    748e:	2f 92       	push	r2
    7490:	3f 92       	push	r3
    7492:	4f 92       	push	r4
    7494:	5f 92       	push	r5
    7496:	6f 92       	push	r6
    7498:	7f 92       	push	r7
    749a:	8f 92       	push	r8
    749c:	9f 92       	push	r9
    749e:	af 92       	push	r10
    74a0:	bf 92       	push	r11
    74a2:	cf 92       	push	r12
    74a4:	df 92       	push	r13
    74a6:	ef 92       	push	r14
    74a8:	ff 92       	push	r15
    74aa:	0f 93       	push	r16
    74ac:	1f 93       	push	r17
    74ae:	cf 93       	push	r28
    74b0:	df 93       	push	r29
    74b2:	cd b7       	in	r28, 0x3d	; 61
    74b4:	de b7       	in	r29, 0x3e	; 62
    74b6:	ca 1b       	sub	r28, r26
    74b8:	db 0b       	sbc	r29, r27
    74ba:	0f b6       	in	r0, 0x3f	; 63
    74bc:	f8 94       	cli
    74be:	de bf       	out	0x3e, r29	; 62
    74c0:	0f be       	out	0x3f, r0	; 63
    74c2:	cd bf       	out	0x3d, r28	; 61
    74c4:	09 94       	ijmp

000074c6 <__epilogue_restores__>:
    74c6:	2a 88       	ldd	r2, Y+18	; 0x12
    74c8:	39 88       	ldd	r3, Y+17	; 0x11
    74ca:	48 88       	ldd	r4, Y+16	; 0x10
    74cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    74ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    74d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    74d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    74d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    74d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    74d8:	b9 84       	ldd	r11, Y+9	; 0x09
    74da:	c8 84       	ldd	r12, Y+8	; 0x08
    74dc:	df 80       	ldd	r13, Y+7	; 0x07
    74de:	ee 80       	ldd	r14, Y+6	; 0x06
    74e0:	fd 80       	ldd	r15, Y+5	; 0x05
    74e2:	0c 81       	ldd	r16, Y+4	; 0x04
    74e4:	1b 81       	ldd	r17, Y+3	; 0x03
    74e6:	aa 81       	ldd	r26, Y+2	; 0x02
    74e8:	b9 81       	ldd	r27, Y+1	; 0x01
    74ea:	ce 0f       	add	r28, r30
    74ec:	d1 1d       	adc	r29, r1
    74ee:	0f b6       	in	r0, 0x3f	; 63
    74f0:	f8 94       	cli
    74f2:	de bf       	out	0x3e, r29	; 62
    74f4:	0f be       	out	0x3f, r0	; 63
    74f6:	cd bf       	out	0x3d, r28	; 61
    74f8:	ed 01       	movw	r28, r26
    74fa:	08 95       	ret

000074fc <_exit>:
    74fc:	f8 94       	cli

000074fe <__stop_program>:
    74fe:	ff cf       	rjmp	.-2      	; 0x74fe <__stop_program>
